var searchIndex = {};
searchIndex["cymbalum"] = {"doc":"Cymbalum is a classical molecular simulation engine that provides a solid\nbase for developing new algorithms and methods.","items":[[11,"max","log","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",2,null],[11,"metadata","","Metadata about the log directive.",2,null],[11,"location","","The location of the log directive.",2,null],[11,"level","","The verbosity level of the message.",2,null],[11,"target","","The name of the target of the directive.",2,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"module_path","","The module path of the message.",4,null],[11,"file","","The source file containing the message.",4,null],[11,"line","","The line containing the message.",4,null],[11,"fmt","","",5,null],[11,"get","","Gets the current maximum log level filter.",5,null],[11,"set","","Sets the maximum log level.",5,null],[11,"fmt","","",6,null],[11,"fmt","","",6,null],[11,"description","","",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[4,"LogLevel","cymbalum","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[3,"Logger","","Logger with capacity to write to the standard output stream, the standard\nerror stream or a file.",null,null],[11,"new","std::sync::rwlock","Creates a new instance of an `RwLock&lt;T&gt;` which is unlocked.",8,{"inputs":[{"name":"t"}],"output":{"name":"rwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",8,null],[11,"try_read","","Attempts to acquire this rwlock with shared read access.",8,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",8,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",8,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",8,null],[11,"into_inner","","Consumes this `RwLock`, returning the underlying data.",8,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",8,null],[11,"from","alloc::boxed","",9,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"e"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"string"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"from","","",9,{"inputs":[{"name":"str"}],"output":{"name":"box"}}],[11,"description","core::str","",10,null],[11,"description","","",11,null],[11,"description","core::num","",12,null],[11,"description","","",13,null],[11,"description","core::num::dec2flt","",14,null],[11,"description","collections::string","",15,null],[11,"description","","",16,null],[11,"description","","",17,null],[11,"description","rustc_unicode::char","",18,null],[11,"description","alloc::boxed","",9,null],[11,"cause","","",9,null],[11,"is","cymbalum","Returns true if the boxed type is the same as `T`",19,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",19,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",19,null],[11,"is","","Forwards to the method defined on the type `Any`.",19,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",19,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",19,null],[11,"is","","Forwards to the method defined on the type `Any`.",19,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",19,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",19,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",19,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",19,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",19,{"inputs":[{"name":"box"}],"output":{"name":"result"}}],[11,"next","std::ascii","",20,null],[11,"size_hint","","",20,null],[11,"next_back","","",20,null],[11,"clone","std::thread::local","",21,null],[11,"eq","","",21,null],[11,"with","","Acquires a reference to the value in this TLS key.",22,null],[11,"state","","Query the current state of this key.",22,null],[11,"new","std::thread::local::elf","",23,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",23,null],[11,"new","std::thread::local::os","",24,{"inputs":[],"output":{"name":"key"}}],[11,"get","","",24,null],[11,"set","std::thread::scoped_tls","Inserts a value into this scoped thread local storage slot for a\nduration of a closure.",25,null],[11,"with","","Gets a value out of this scoped variable.",25,null],[11,"is_set","","Test whether this TLS key has been `set` for the current thread.",25,null],[11,"new","std::thread::scoped_tls::imp","",26,{"inputs":[],"output":{"name":"keyinner"}}],[11,"set","","",26,null],[11,"get","","",26,null],[11,"new","std::thread","Generates the base configuration for spawning a thread, from which\nconfiguration methods can be chained.",27,{"inputs":[],"output":{"name":"builder"}}],[11,"name","","Names the thread-to-be. Currently the name is used for identification\nonly in panic messages.",27,null],[11,"stack_size","","Sets the size of the stack for the new thread.",27,null],[11,"spawn","","Spawns a new thread, and returns a join handle for it.",27,null],[11,"clone","","",28,null],[11,"unpark","","Atomically makes the handle&#39;s token available if it is not already.",28,null],[11,"name","","Gets the thread&#39;s name.",28,null],[11,"fmt","","",28,null],[11,"thread","","Extracts a handle to the underlying thread",29,null],[11,"join","","Waits for the associated thread to finish.",29,null],[11,"clone","std::collections::hash::map","",30,null],[11,"new","","Creates an empty HashMap.",30,{"inputs":[],"output":{"name":"hashmap"}}],[11,"with_capacity","","Creates an empty hash map with the given initial capacity.",30,{"inputs":[{"name":"usize"}],"output":{"name":"hashmap"}}],[11,"with_hasher","","Creates an empty hashmap which will use the given hash builder to hash\nkeys.",30,{"inputs":[{"name":"s"}],"output":{"name":"hashmap"}}],[11,"with_capacity_and_hasher","","Creates an empty HashMap with space for at least `capacity`\nelements, using `hasher` to hash the keys.",30,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashmap"}}],[11,"hasher","","Returns a reference to the map&#39;s hasher.",30,null],[11,"capacity","","Returns the number of elements the map can hold without reallocating.",30,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashMap`. The collection may reserve more space to avoid\nfrequent reallocations.",30,null],[11,"shrink_to_fit","","Shrinks the capacity of the map as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",30,null],[11,"keys","","An iterator visiting all keys in arbitrary order.\nIterator element type is `&amp;&#39;a K`.",30,null],[11,"values","","An iterator visiting all values in arbitrary order.\nIterator element type is `&amp;&#39;a V`.",30,null],[11,"values_mut","","An iterator visiting all values mutably in arbitrary order.\nIterator element type is `&amp;&#39;a mut V`.",30,null],[11,"iter","","An iterator visiting all key-value pairs in arbitrary order.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a V)`.",30,null],[11,"iter_mut","","An iterator visiting all key-value pairs in arbitrary order,\nwith mutable references to the values.\nIterator element type is `(&amp;&#39;a K, &amp;&#39;a mut V)`.",30,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",30,null],[11,"len","","Returns the number of elements in the map.",30,null],[11,"is_empty","","Returns true if the map contains no elements.",30,null],[11,"drain","","Clears the map, returning all key-value pairs as an iterator. Keeps the\nallocated memory for reuse.",30,null],[11,"clear","","Clears the map, removing all key-value pairs. Keeps the allocated memory\nfor reuse.",30,null],[11,"get","","Returns a reference to the value corresponding to the key.",30,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",30,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",30,null],[11,"insert","","Inserts a key-value pair into the map.",30,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",30,null],[11,"eq","","",30,null],[11,"fmt","","",30,null],[11,"default","","",30,{"inputs":[],"output":{"name":"hashmap"}}],[11,"index","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",33,null],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each key-value\npair out of the map in arbitrary order. The map cannot be used after\ncalling this.",30,null],[11,"next","","",31,null],[11,"size_hint","","",31,null],[11,"len","","",31,null],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"len","","",34,null],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"len","","",35,null],[11,"next","","",32,null],[11,"size_hint","","",32,null],[11,"len","","",32,null],[11,"next","","",33,null],[11,"size_hint","","",33,null],[11,"len","","",33,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"len","","",36,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"len","","",37,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",38,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",38,null],[11,"key","","Returns a reference to this entry&#39;s key.",38,null],[11,"key","","Gets a reference to the key in the entry.",39,null],[11,"get","","Gets a reference to the value in the entry.",39,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",39,null],[11,"into_mut","","Converts the OccupiedEntry into a mutable reference to the value in the entry\nwith a lifetime bound to the map itself",39,null],[11,"insert","","Sets the value of the entry, and returns the entry&#39;s old value",39,null],[11,"remove","","Takes the value out of the entry, and returns it",39,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",40,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it",40,null],[11,"from_iter","","",30,{"inputs":[{"name":"t"}],"output":{"name":"hashmap"}}],[11,"extend","","",30,null],[11,"extend","","",30,null],[11,"clone","","",41,null],[11,"new","","Constructs a new `RandomState` that is initialized with random keys.",41,{"inputs":[],"output":{"name":"randomstate"}}],[11,"build_hasher","","",41,null],[11,"default","","",41,{"inputs":[],"output":{"name":"randomstate"}}],[11,"clone","std::collections::hash::set","",42,null],[11,"new","","Creates an empty HashSet.",42,{"inputs":[],"output":{"name":"hashset"}}],[11,"with_capacity","","Creates an empty HashSet with space for at least `n` elements in\nthe hash table.",42,{"inputs":[{"name":"usize"}],"output":{"name":"hashset"}}],[11,"with_hasher","","Creates a new empty hash set which will use the given hasher to hash\nkeys.",42,{"inputs":[{"name":"s"}],"output":{"name":"hashset"}}],[11,"with_capacity_and_hasher","","Creates an empty HashSet with space for at least `capacity`\nelements in the hash table, using `hasher` to hash the keys.",42,{"inputs":[{"name":"usize"},{"name":"s"}],"output":{"name":"hashset"}}],[11,"hasher","","Returns a reference to the set&#39;s hasher.",42,null],[11,"capacity","","Returns the number of elements the set can hold without reallocating.",42,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the `HashSet`. The collection may reserve more space to avoid\nfrequent reallocations.",42,null],[11,"shrink_to_fit","","Shrinks the capacity of the set as much as possible. It will drop\ndown as much as possible while maintaining the internal rules\nand possibly leaving some space in accordance with the resize policy.",42,null],[11,"iter","","An iterator visiting all elements in arbitrary order.\nIterator element type is &amp;&#39;a T.",42,null],[11,"difference","","Visit the values representing the difference.",42,null],[11,"symmetric_difference","","Visit the values representing the symmetric difference.",42,null],[11,"intersection","","Visit the values representing the intersection.",42,null],[11,"union","","Visit the values representing the union.",42,null],[11,"len","","Returns the number of elements in the set.",42,null],[11,"is_empty","","Returns true if the set contains no elements.",42,null],[11,"drain","","Clears the set, returning all elements in an iterator.",42,null],[11,"clear","","Clears the set, removing all values.",42,null],[11,"contains","","Returns `true` if the set contains a value.",42,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",42,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",42,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",42,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",42,null],[11,"insert","","Adds a value to the set.",42,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",42,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",42,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",42,null],[11,"eq","","",42,null],[11,"fmt","","",42,null],[11,"from_iter","","",42,{"inputs":[{"name":"i"}],"output":{"name":"hashset"}}],[11,"extend","","",42,null],[11,"extend","","",42,null],[11,"default","","",42,{"inputs":[],"output":{"name":"hashset"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out\nof the set in arbitrary order. The set cannot be used after calling\nthis.",42,null],[11,"clone","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"len","","",43,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"len","","",44,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"len","","",45,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"clone","collections::vec_deque","",50,null],[11,"drop","","",50,null],[11,"default","","",50,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"new","","Creates an empty `VecDeque`.",50,{"inputs":[],"output":{"name":"vecdeque"}}],[11,"with_capacity","","Creates an empty `VecDeque` with space for at least `n` elements.",50,{"inputs":[{"name":"usize"}],"output":{"name":"vecdeque"}}],[11,"get","","Retrieves an element in the `VecDeque` by index.",50,null],[11,"get_mut","","Retrieves an element in the `VecDeque` mutably by index.",50,null],[11,"swap","","Swaps elements at indices `i` and `j`.",50,null],[11,"capacity","","Returns the number of elements the `VecDeque` can hold without\nreallocating.",50,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `VecDeque`. Does nothing if the capacity is already sufficient.",50,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the given\n`VecDeque`. The collection may reserve more space to avoid frequent reallocations.",50,null],[11,"shrink_to_fit","","Shrinks the capacity of the `VecDeque` as much as possible.",50,null],[11,"truncate","","Shortens a `VecDeque`, dropping excess elements from the back.",50,null],[11,"iter","","Returns a front-to-back iterator.",50,null],[11,"iter_mut","","Returns a front-to-back iterator that returns mutable references.",50,null],[11,"as_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",50,null],[11,"as_mut_slices","","Returns a pair of slices which contain, in order, the contents of the\n`VecDeque`.",50,null],[11,"len","","Returns the number of elements in the `VecDeque`.",50,null],[11,"is_empty","","Returns true if the buffer contains no elements",50,null],[11,"drain","","Create a draining iterator that removes the specified range in the\n`VecDeque` and yields the removed items.",50,null],[11,"clear","","Clears the buffer, removing all values.",50,null],[11,"contains","","Returns `true` if the `VecDeque` contains an element equal to the\ngiven value.",50,null],[11,"front","","Provides a reference to the front element, or `None` if the sequence is\nempty.",50,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the\nsequence is empty.",50,null],[11,"back","","Provides a reference to the back element, or `None` if the sequence is\nempty.",50,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the\nsequence is empty.",50,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the sequence is\nempty.",50,null],[11,"push_front","","Inserts an element first in the sequence.",50,null],[11,"push_back","","Appends an element to the back of a buffer",50,null],[11,"pop_back","","Removes the last element from a buffer and returns it, or `None` if\nit is empty.",50,null],[11,"swap_remove_back","","Removes an element from anywhere in the `VecDeque` and returns it, replacing it with the\nlast element.",50,null],[11,"swap_remove_front","","Removes an element from anywhere in the `VecDeque` and returns it,\nreplacing it with the first element.",50,null],[11,"insert","","Inserts an element at `index` within the `VecDeque`. Whichever\nend is closer to the insertion point will be moved to make room,\nand all the affected elements will be moved to new positions.",50,null],[11,"remove","","Removes and returns the element at `index` from the `VecDeque`.\nWhichever end is closer to the removal point will be moved to make\nroom, and all the affected elements will be moved to new positions.\nReturns `None` if `index` is out of bounds.",50,null],[11,"split_off","","Splits the collection into two at the given index.",50,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",50,null],[11,"retain","","Retains only the elements specified by the predicate.",50,null],[11,"resize","","Modifies the `VecDeque` in-place so that `len()` is equal to new_len,\neither by removing excess elements or by appending copies of a value to the back.",50,null],[11,"clone","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"clone","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next_back","","",53,null],[11,"drop","","",54,null],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"eq","","",50,null],[11,"partial_cmp","","",50,null],[11,"cmp","","",50,null],[11,"hash","","",50,null],[11,"index","","",50,null],[11,"index_mut","","",50,null],[11,"from_iter","","",50,{"inputs":[{"name":"t"}],"output":{"name":"vecdeque"}}],[11,"into_iter","","Consumes the list into a front-to-back iterator yielding elements by\nvalue.",50,null],[11,"extend","","",50,null],[11,"extend","","",50,null],[11,"fmt","","",50,null],[11,"from","","",50,{"inputs":[{"name":"vec"}],"output":{"name":"vecdeque"}}],[11,"from","collections::vec","",55,{"inputs":[{"name":"vecdeque"}],"output":{"name":"vec"}}],[11,"clone","collections::binary_heap","",56,null],[11,"clone_from","","",56,null],[11,"default","","",56,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"fmt","","",56,null],[11,"new","","Creates an empty `BinaryHeap` as a max-heap.",56,{"inputs":[],"output":{"name":"binaryheap"}}],[11,"with_capacity","","Creates an empty `BinaryHeap` with a specific capacity.\nThis preallocates enough memory for `capacity` elements,\nso that the `BinaryHeap` does not have to be reallocated\nuntil it contains at least that many values.",56,{"inputs":[{"name":"usize"}],"output":{"name":"binaryheap"}}],[11,"iter","","Returns an iterator visiting all values in the underlying vector, in\narbitrary order.",56,null],[11,"peek","","Returns the greatest item in the binary heap, or `None` if it is empty.",56,null],[11,"capacity","","Returns the number of elements the binary heap can hold without reallocating.",56,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to be inserted in the\ngiven `BinaryHeap`. Does nothing if the capacity is already sufficient.",56,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted in the\n`BinaryHeap`. The collection may reserve more space to avoid frequent reallocations.",56,null],[11,"shrink_to_fit","","Discards as much additional capacity as possible.",56,null],[11,"pop","","Removes the greatest item from the binary heap and returns it, or `None` if it\nis empty.",56,null],[11,"push","","Pushes an item onto the binary heap.",56,null],[11,"push_pop","","Pushes an item onto the binary heap, then pops the greatest item off the queue in\nan optimized fashion.",56,null],[11,"replace","","Pops the greatest item off the binary heap, then pushes an item onto the queue in\nan optimized fashion. The push is done regardless of whether the binary heap\nwas empty.",56,null],[11,"into_vec","","Consumes the `BinaryHeap` and returns the underlying vector\nin arbitrary order.",56,null],[11,"into_sorted_vec","","Consumes the `BinaryHeap` and returns a vector in sorted\n(ascending) order.",56,null],[11,"len","","Returns the length of the binary heap.",56,null],[11,"is_empty","","Checks if the binary heap is empty.",56,null],[11,"drain","","Clears the binary heap, returning an iterator over the removed elements.",56,null],[11,"clear","","Drops all items from the binary heap.",56,null],[11,"append","","Moves all the elements of `other` into `self`, leaving `other` empty.",56,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"size_hint","","",58,null],[11,"next_back","","",58,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"next_back","","",59,null],[11,"from","","",56,{"inputs":[{"name":"vec"}],"output":{"name":"binaryheap"}}],[11,"from","collections::vec","",55,{"inputs":[{"name":"binaryheap"}],"output":{"name":"vec"}}],[11,"from_iter","collections::binary_heap","",56,{"inputs":[{"name":"i"}],"output":{"name":"binaryheap"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe binary heap in arbitrary order. The binary heap cannot be used\nafter calling this.",56,null],[11,"extend","","",56,null],[11,"extend","","",56,null],[11,"clone","collections::linked_list","",60,null],[11,"clone","","",61,null],[11,"default","","",62,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"new","","Creates an empty `LinkedList`.",62,{"inputs":[],"output":{"name":"linkedlist"}}],[11,"append","","Moves all elements from `other` to the end of the list.",62,null],[11,"iter","","Provides a forward iterator.",62,null],[11,"iter_mut","","Provides a forward iterator with mutable references.",62,null],[11,"is_empty","","Returns `true` if the `LinkedList` is empty.",62,null],[11,"len","","Returns the length of the `LinkedList`.",62,null],[11,"clear","","Removes all elements from the `LinkedList`.",62,null],[11,"contains","","Returns `true` if the `LinkedList` contains an element equal to the\ngiven value.",62,null],[11,"front","","Provides a reference to the front element, or `None` if the list is\nempty.",62,null],[11,"front_mut","","Provides a mutable reference to the front element, or `None` if the list\nis empty.",62,null],[11,"back","","Provides a reference to the back element, or `None` if the list is\nempty.",62,null],[11,"back_mut","","Provides a mutable reference to the back element, or `None` if the list\nis empty.",62,null],[11,"push_front","","Adds an element first in the list.",62,null],[11,"pop_front","","Removes the first element and returns it, or `None` if the list is\nempty.",62,null],[11,"push_back","","Appends an element to the back of a list",62,null],[11,"pop_back","","Removes the last element from a list and returns it, or `None` if\nit is empty.",62,null],[11,"split_off","","Splits the list into two at the given index. Returns everything after the given index,\nincluding the index.",62,null],[11,"front_place","","Returns a place for insertion at the front of the list.",62,null],[11,"back_place","","Returns a place for insertion at the back of the list.",62,null],[11,"drop","","",62,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"next","","",63,null],[11,"size_hint","","",63,null],[11,"next_back","","",63,null],[11,"insert_next","","Inserts `elt` just after the element most recently returned by `.next()`.\nThe inserted element does not appear in the iteration.",63,null],[11,"peek_next","","Provides a reference to the next element, without changing the iterator.",63,null],[11,"next","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"from_iter","","",62,{"inputs":[{"name":"t"}],"output":{"name":"linkedlist"}}],[11,"into_iter","","Consumes the list into an iterator yielding elements by value.",62,null],[11,"extend","","",62,null],[11,"extend","","",62,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"partial_cmp","","",62,null],[11,"cmp","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"hash","","",62,null],[11,"make_place","","",64,null],[11,"pointer","","",64,null],[11,"finalize","","",64,null],[11,"make_place","","",65,null],[11,"pointer","","",65,null],[11,"finalize","","",65,null],[11,"next","std::env","",66,null],[11,"size_hint","","",66,null],[11,"next","","",67,null],[11,"size_hint","","",67,null],[11,"clone","","",68,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"fmt","","",68,null],[11,"fmt","","",68,null],[11,"description","","",68,null],[11,"next","","",69,null],[11,"size_hint","","",69,null],[11,"fmt","","",70,null],[11,"fmt","","",70,null],[11,"description","","",70,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"len","","",71,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"len","","",72,null],[11,"clone","std::ffi::c_str","",73,null],[11,"hash","","",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"lt","","",73,null],[11,"le","","",73,null],[11,"gt","","",73,null],[11,"ge","","",73,null],[11,"eq","","",73,null],[11,"ne","","",73,null],[11,"hash","","",74,null],[11,"fmt","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"fmt","","",76,null],[11,"eq","","",76,null],[11,"ne","","",76,null],[11,"clone","","",76,null],[11,"fmt","","",77,null],[11,"eq","","",77,null],[11,"ne","","",77,null],[11,"clone","","",77,null],[11,"new","","Creates a new C-compatible string from a container of bytes.",73,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[11,"from_vec_unchecked","","Creates a C-compatible string from a byte vector without checking for\ninterior 0 bytes.",73,{"inputs":[{"name":"vec"}],"output":{"name":"cstring"}}],[11,"from_raw","","Retakes ownership of a `CString` that was transferred to C.",73,null],[11,"into_raw","","Transfers ownership of the string to a C caller.",73,null],[11,"into_string","","Converts the `CString` into a `String` if it contains valid Unicode data.",73,null],[11,"into_bytes","","Returns the underlying byte buffer.",73,null],[11,"into_bytes_with_nul","","Equivalent to the `into_bytes` function except that the returned vector\nincludes the trailing nul byte.",73,null],[11,"as_bytes","","Returns the contents of this `CString` as a slice of bytes.",73,null],[11,"as_bytes_with_nul","","Equivalent to the `as_bytes` function except that the returned slice\nincludes the trailing nul byte.",73,null],[11,"from_ptr","","Casts a raw C string to a safe C string wrapper.",74,null],[11,"from_bytes_with_nul","","Creates a C string wrapper from a byte slice.",74,null],[11,"from_bytes_with_nul_unchecked","","Unsafely creates a C string wrapper from a byte slice.",74,null],[11,"as_ptr","","Returns the inner pointer to this C string.",74,null],[11,"to_bytes","","Converts this C string to a byte slice.",74,null],[11,"to_bytes_with_nul","","Converts this C string to a byte slice containing the trailing 0 byte.",74,null],[11,"to_str","","Yields a `&amp;str` slice if the `CStr` contains valid UTF-8.",74,null],[11,"to_string_lossy","","Converts a `CStr` into a `Cow&lt;str&gt;`.",74,null],[11,"deref","","",73,null],[11,"fmt","","",73,null],[11,"from","collections::vec","",55,{"inputs":[{"name":"cstring"}],"output":{"name":"vec"}}],[11,"fmt","std::ffi::c_str","",74,null],[11,"default","","",73,{"inputs":[],"output":{"name":"cstring"}}],[11,"borrow","","",73,null],[11,"nul_position","","Returns the position of the nul byte in the slice that was provided to\n`CString::new`.",75,null],[11,"into_vec","","Consumes this error, returning the underlying vector of bytes which\ngenerated the error in the first place.",75,null],[11,"description","","",75,null],[11,"fmt","","",75,null],[11,"from","std::io::error","",78,{"inputs":[{"name":"nulerror"}],"output":{"name":"error"}}],[11,"into_cstring","std::ffi::c_str","Consumes this error, returning original `CString` which generated the\nerror.",77,null],[11,"utf8_error","","Access the underlying UTF-8 error that was the cause of this error.",77,null],[11,"description","","",77,null],[11,"cause","","",77,null],[11,"fmt","","",77,null],[11,"eq","","",74,null],[11,"partial_cmp","","",74,null],[11,"cmp","","",74,null],[11,"to_owned","","",74,null],[11,"from","","",73,{"inputs":[{"name":"cstr"}],"output":{"name":"cstring"}}],[11,"index","","",73,null],[11,"as_ref","","",74,null],[11,"as_ref","","",73,null],[11,"clone","std::ffi::os_str","",79,null],[11,"new","","Constructs a new empty `OsString`.",79,{"inputs":[],"output":{"name":"osstring"}}],[11,"as_os_str","","Converts to an `OsStr` slice.",79,null],[11,"into_string","","Converts the `OsString` into a `String` if it contains valid Unicode data.",79,null],[11,"push","","Extends the string with the given `&amp;OsStr` slice.",79,null],[11,"with_capacity","","Creates a new `OsString` with the given capacity.",79,{"inputs":[{"name":"usize"}],"output":{"name":"osstring"}}],[11,"clear","","Truncates the `OsString` to zero length.",79,null],[11,"capacity","","Returns the capacity this `OsString` can hold without reallocating.",79,null],[11,"reserve","","Reserves capacity for at least `additional` more capacity to be inserted\nin the given `OsString`.",79,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more capacity to\nbe inserted in the given `OsString`. Does nothing if the capacity is\nalready sufficient.",79,null],[11,"from","","",79,{"inputs":[{"name":"string"}],"output":{"name":"osstring"}}],[11,"from","","",79,{"inputs":[{"name":"t"}],"output":{"name":"osstring"}}],[11,"index","","",79,null],[11,"new","","Coerces into an `OsStr` slice.",80,{"inputs":[{"name":"s"}],"output":{"name":"osstr"}}],[11,"to_str","","Yields a `&amp;str` slice if the `OsStr` is valid Unicode.",80,null],[11,"to_string_lossy","","Converts an `OsStr` to a `Cow&lt;str&gt;`.",80,null],[11,"to_os_string","","Copies the slice into an owned `OsString`.",80,null],[11,"is_empty","","Checks whether the `OsStr` is empty.",80,null],[11,"len","","Returns the length of this `OsStr`.",80,null],[11,"deref","","",79,null],[11,"default","","",79,{"inputs":[],"output":{"name":"osstring"}}],[11,"fmt","","",79,null],[11,"eq","","",79,null],[11,"eq","","",79,null],[11,"partial_cmp","","",79,null],[11,"lt","","",79,null],[11,"le","","",79,null],[11,"gt","","",79,null],[11,"ge","","",79,null],[11,"partial_cmp","","",79,null],[11,"cmp","","",79,null],[11,"hash","","",79,null],[11,"eq","","",80,null],[11,"eq","","",80,null],[11,"partial_cmp","","",80,null],[11,"lt","","",80,null],[11,"le","","",80,null],[11,"gt","","",80,null],[11,"ge","","",80,null],[11,"partial_cmp","","",80,null],[11,"cmp","","",80,null],[11,"eq","","",79,null],[11,"eq","","",80,null],[11,"partial_cmp","","",79,null],[11,"partial_cmp","","",80,null],[11,"eq","","",79,null],[11,"partial_cmp","","",79,null],[11,"eq","collections::borrow","",81,null],[11,"eq","std::ffi::os_str","",80,null],[11,"partial_cmp","collections::borrow","",81,null],[11,"partial_cmp","std::ffi::os_str","",80,null],[11,"eq","collections::borrow","",81,null],[11,"partial_cmp","","",81,null],[11,"eq","","",81,null],[11,"eq","std::ffi::os_str","",79,null],[11,"partial_cmp","collections::borrow","",81,null],[11,"partial_cmp","std::ffi::os_str","",79,null],[11,"hash","","",80,null],[11,"fmt","","",80,null],[11,"borrow","","",79,null],[11,"to_owned","","",80,null],[11,"as_ref","","",80,null],[11,"as_ref","","",79,null],[11,"as_ref","collections::string","",82,null],[11,"clone","std::fs","",83,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"eq","","",85,null],[11,"ne","","",85,null],[11,"clone","","",85,null],[11,"hash","","",86,null],[11,"eq","","",86,null],[11,"ne","","",86,null],[11,"clone","","",86,null],[11,"open","","Attempts to open a file in read-only mode.",87,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Opens a file in write-only mode.",87,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"sync_all","","Attempts to sync all OS-internal metadata to disk.",87,null],[11,"sync_data","","This function is similar to `sync_all`, except that it may not\nsynchronize file metadata to the filesystem.",87,null],[11,"set_len","","Truncates or extends the underlying file, updating the size of\nthis file to become `size`.",87,null],[11,"metadata","","Queries metadata about the underlying file.",87,null],[11,"try_clone","","Creates a new independently owned handle to the underlying file.",87,null],[11,"fmt","","",87,null],[11,"read","","",87,null],[11,"read_to_end","","",87,null],[11,"write","","",87,null],[11,"flush","","",87,null],[11,"seek","","",87,null],[11,"new","","Creates a blank new set of options ready for configuration.",84,{"inputs":[],"output":{"name":"openoptions"}}],[11,"read","","Sets the option for read access.",84,null],[11,"write","","Sets the option for write access.",84,null],[11,"append","","Sets the option for the append mode.",84,null],[11,"truncate","","Sets the option for truncating a previous file.",84,null],[11,"create","","Sets the option for creating a new file.",84,null],[11,"create_new","","Sets the option to always create a new file.",84,null],[11,"open","","Opens a file at `path` with the options specified by `self`.",84,null],[11,"file_type","","Returns the file type for this metadata.",83,null],[11,"is_dir","","Returns whether this metadata is for a directory.",83,null],[11,"is_file","","Returns whether this metadata is for a regular file.",83,null],[11,"len","","Returns the size of the file, in bytes, this metadata is for.",83,null],[11,"permissions","","Returns the permissions of the file this metadata is for.",83,null],[11,"modified","","Returns the last modification time listed in this metadata.",83,null],[11,"accessed","","Returns the last access time of this metadata.",83,null],[11,"created","","Returns the creation time listed in the this metadata.",83,null],[11,"readonly","","Returns whether these permissions describe a readonly file.",85,null],[11,"set_readonly","","Modifies the readonly flag for this set of permissions.",85,null],[11,"is_dir","","Test whether this file type represents a directory.",86,null],[11,"is_file","","Test whether this file type represents a regular file.",86,null],[11,"is_symlink","","Test whether this file type represents a symbolic link.",86,null],[11,"next","","",88,null],[11,"path","","Returns the full path to the file that this entry represents.",89,null],[11,"metadata","","Return the metadata for the file that this entry points at.",89,null],[11,"file_type","","Return the file type for the file that this entry points at.",89,null],[11,"file_name","","Returns the bare file name of this directory entry without any other\nleading path component.",89,null],[11,"new","","Creates a new set of options with default mode/security settings for all\nplatforms and also non-recursive.",90,{"inputs":[],"output":{"name":"dirbuilder"}}],[11,"recursive","","Indicate that directories create should be created recursively, creating\nall parent directories if they do not exist with the same security and\npermissions settings.",90,null],[11,"create","","Create the specified directory with the options configured in this\nbuilder.",90,null],[11,"new","std::io::buffered","Creates a new `BufReader` with a default buffer capacity.",91,{"inputs":[{"name":"r"}],"output":{"name":"bufreader"}}],[11,"with_capacity","","Creates a new `BufReader` with the specified buffer capacity.",91,{"inputs":[{"name":"usize"},{"name":"r"}],"output":{"name":"bufreader"}}],[11,"get_ref","","Gets a reference to the underlying reader.",91,null],[11,"get_mut","","Gets a mutable reference to the underlying reader.",91,null],[11,"into_inner","","Unwraps this `BufReader`, returning the underlying reader.",91,null],[11,"read","","",91,null],[11,"fill_buf","","",91,null],[11,"consume","","",91,null],[11,"fmt","","",91,null],[11,"seek","","Seek to an offset, in bytes, in the underlying reader.",91,null],[11,"fmt","","",92,null],[11,"new","","Creates a new `BufWriter` with a default buffer capacity.",93,{"inputs":[{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"with_capacity","","Creates a new `BufWriter` with the specified buffer capacity.",93,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"bufwriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",93,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",93,null],[11,"into_inner","","Unwraps this `BufWriter`, returning the underlying writer.",93,null],[11,"write","","",93,null],[11,"flush","","",93,null],[11,"fmt","","",93,null],[11,"seek","","Seek to the offset, in bytes, in the underlying writer.",93,null],[11,"drop","","",93,null],[11,"error","","Returns the error which caused the call to `into_inner()` to fail.",92,null],[11,"into_inner","","Returns the buffered writer instance which generated the error.",92,null],[11,"from","std::io::error","",78,{"inputs":[{"name":"intoinnererror"}],"output":{"name":"error"}}],[11,"description","std::io::buffered","",92,null],[11,"fmt","","",92,null],[11,"new","","Creates a new `LineWriter`.",94,{"inputs":[{"name":"w"}],"output":{"name":"linewriter"}}],[11,"with_capacity","","Creates a new `LineWriter` with a specified capacity for the internal\nbuffer.",94,{"inputs":[{"name":"usize"},{"name":"w"}],"output":{"name":"linewriter"}}],[11,"get_ref","","Gets a reference to the underlying writer.",94,null],[11,"get_mut","","Gets a mutable reference to the underlying writer.",94,null],[11,"into_inner","","Unwraps this `LineWriter`, returning the underlying writer.",94,null],[11,"write","","",94,null],[11,"flush","","",94,null],[11,"fmt","","",94,null],[11,"fmt","std::io::cursor","",95,null],[11,"clone","","",95,null],[11,"new","","Creates a new cursor wrapping the provided underlying I/O object.",95,{"inputs":[{"name":"t"}],"output":{"name":"cursor"}}],[11,"into_inner","","Consumes this cursor, returning the underlying value.",95,null],[11,"get_ref","","Gets a reference to the underlying value in this cursor.",95,null],[11,"get_mut","","Gets a mutable reference to the underlying value in this cursor.",95,null],[11,"position","","Returns the current position of this cursor.",95,null],[11,"set_position","","Sets the position of this cursor.",95,null],[11,"seek","","",95,null],[11,"read","","",95,null],[11,"fill_buf","","",95,null],[11,"consume","","",95,null],[11,"write","","",95,null],[11,"flush","","",95,null],[11,"write","","",95,null],[11,"flush","","",95,null],[11,"write","","",95,null],[11,"flush","","",95,null],[11,"fmt","std::io::error","",78,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"eq","","",96,null],[11,"new","","Creates a new I/O error from a known kind of error as well as an\narbitrary error payload.",78,{"inputs":[{"name":"errorkind"},{"name":"e"}],"output":{"name":"error"}}],[11,"last_os_error","","Returns an error representing the last OS error which occurred.",78,{"inputs":[],"output":{"name":"error"}}],[11,"from_raw_os_error","","Creates a new instance of an `Error` from a particular OS error code.",78,{"inputs":[{"name":"i32"}],"output":{"name":"error"}}],[11,"raw_os_error","","Returns the OS error that this error represents (if any).",78,null],[11,"get_ref","","Returns a reference to the inner error wrapped by this error (if any).",78,null],[11,"get_mut","","Returns a mutable reference to the inner error wrapped by this error\n(if any).",78,null],[11,"into_inner","","Consumes the `Error`, returning its inner error (if any).",78,null],[11,"kind","","Returns the corresponding `ErrorKind` for this error.",78,null],[11,"fmt","","",78,null],[11,"description","","",78,null],[11,"cause","","",78,null],[11,"read","alloc::boxed","",9,null],[11,"read_to_end","","",9,null],[11,"read_to_string","","",9,null],[11,"read_exact","","",9,null],[11,"write","","",9,null],[11,"flush","","",9,null],[11,"write_all","","",9,null],[11,"write_fmt","","",9,null],[11,"seek","","",9,null],[11,"fill_buf","","",9,null],[11,"consume","","",9,null],[11,"read_until","","",9,null],[11,"read_line","","",9,null],[11,"write","collections::vec","",55,null],[11,"write_all","","",55,null],[11,"flush","","",55,null],[11,"read","std::io::util","",97,null],[11,"fill_buf","","",97,null],[11,"consume","","",97,null],[11,"read","","",98,null],[11,"write","","",99,null],[11,"flush","","",99,null],[11,"lock","std::io::stdio","Locks this handle to the standard input stream, returning a readable\nguard.",100,null],[11,"read_line","","Locks this handle and reads a line of input into the specified buffer.",100,null],[11,"read","","",100,null],[11,"read_to_end","","",100,null],[11,"read_to_string","","",100,null],[11,"read_exact","","",100,null],[11,"read","","",101,null],[11,"read_to_end","","",101,null],[11,"fill_buf","","",101,null],[11,"consume","","",101,null],[11,"lock","","Locks this handle to the standard output stream, returning a writable\nguard.",102,null],[11,"write","","",102,null],[11,"flush","","",102,null],[11,"write_all","","",102,null],[11,"write_fmt","","",102,null],[11,"write","","",103,null],[11,"flush","","",103,null],[11,"lock","","Locks this handle to the standard error stream, returning a writable\nguard.",104,null],[11,"write","","",104,null],[11,"flush","","",104,null],[11,"write_all","","",104,null],[11,"write_fmt","","",104,null],[11,"write","","",105,null],[11,"flush","","",105,null],[11,"fmt","std::io","",106,null],[11,"clone","","",106,null],[11,"eq","","",106,null],[11,"ne","","",106,null],[11,"read","","",107,null],[11,"fill_buf","","",107,null],[11,"consume","","",107,null],[11,"limit","","Returns the number of bytes that can be read before this instance will\nreturn EOF.",108,null],[11,"read","","",108,null],[11,"fill_buf","","",108,null],[11,"consume","","",108,null],[11,"next","","",109,null],[11,"fmt","","",110,null],[11,"next","","",111,null],[11,"description","","",110,null],[11,"cause","","",110,null],[11,"fmt","","",110,null],[11,"next","","",112,null],[11,"next","","",113,null],[11,"cmp","std::net::ip","",114,null],[11,"partial_cmp","","",114,null],[11,"lt","","",114,null],[11,"le","","",114,null],[11,"gt","","",114,null],[11,"ge","","",114,null],[11,"hash","","",114,null],[11,"fmt","","",114,null],[11,"eq","","",114,null],[11,"ne","","",114,null],[11,"clone","","",114,null],[11,"fmt","","",115,null],[11,"hash","","",115,null],[11,"clone","","",115,null],[11,"eq","","",115,null],[11,"new","","Creates a new IPv4 address from four eight-bit octets.",116,{"inputs":[{"name":"u8"},{"name":"u8"},{"name":"u8"},{"name":"u8"}],"output":{"name":"ipv4addr"}}],[11,"octets","","Returns the four eight-bit integers that make up this address.",116,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address 0.0.0.0.",116,null],[11,"is_loopback","","Returns true if this is a loopback address (127.0.0.0/8).",116,null],[11,"is_private","","Returns true if this is a private address.",116,null],[11,"is_link_local","","Returns true if the address is link-local (169.254.0.0/16).",116,null],[11,"is_global","","Returns true if the address appears to be globally routable.\nSee [iana-ipv4-special-registry][ipv4-sr].\n[ipv4-sr]: http://goo.gl/RaZ7lg",116,null],[11,"is_multicast","","Returns true if this is a multicast address.",116,null],[11,"is_broadcast","","Returns true if this is a broadcast address.",116,null],[11,"is_documentation","","Returns true if this address is in a range designated for documentation.",116,null],[11,"to_ipv6_compatible","","Converts this address to an IPv4-compatible IPv6 address.",116,null],[11,"to_ipv6_mapped","","Converts this address to an IPv4-mapped IPv6 address.",116,null],[11,"fmt","","",114,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"eq","","",116,null],[11,"hash","","",116,null],[11,"partial_cmp","","",116,null],[11,"cmp","","",116,null],[11,"from","","",116,{"inputs":[{"name":"u32"}],"output":{"name":"ipv4addr"}}],[11,"from","","",116,null],[11,"new","","Creates a new IPv6 address from eight 16-bit segments.",117,{"inputs":[{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"},{"name":"u16"}],"output":{"name":"ipv6addr"}}],[11,"segments","","Returns the eight 16-bit segments that make up this address.",117,null],[11,"is_unspecified","","Returns true for the special &#39;unspecified&#39; address ::.",117,null],[11,"is_loopback","","Returns true if this is a loopback address (::1).",117,null],[11,"is_global","","Returns true if the address appears to be globally routable.",117,null],[11,"is_unique_local","","Returns true if this is a unique local address (IPv6).",117,null],[11,"is_unicast_link_local","","Returns true if the address is unicast and link-local (fe80::/10).",117,null],[11,"is_unicast_site_local","","Returns true if this is a deprecated unicast site-local address (IPv6\nfec0::/10).",117,null],[11,"is_documentation","","Returns true if this is an address reserved for documentation\nThis is defined to be 2001:db8::/32 in RFC 3849.",117,null],[11,"is_unicast_global","","Returns true if the address is a globally routable unicast address.",117,null],[11,"multicast_scope","","Returns the address&#39;s multicast scope if the address is multicast.",117,null],[11,"is_multicast","","Returns true if this is a multicast address.",117,null],[11,"to_ipv4","","Converts this address to an IPv4 address. Returns None if this address is\nneither IPv4-compatible or IPv4-mapped.",117,null],[11,"octets","","Returns the sixteen eight-bit integers the IPv6 address consists of.",117,null],[11,"fmt","","",117,null],[11,"fmt","","",117,null],[11,"clone","","",117,null],[11,"eq","","",117,null],[11,"hash","","",117,null],[11,"partial_cmp","","",117,null],[11,"cmp","","",117,null],[11,"from","","",117,null],[11,"fmt","std::net::addr","",118,null],[11,"hash","","",118,null],[11,"eq","","",118,null],[11,"ne","","",118,null],[11,"clone","","",118,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",118,{"inputs":[{"name":"ipaddr"},{"name":"u16"}],"output":{"name":"socketaddr"}}],[11,"ip","","Returns the IP address associated with this socket address.",118,null],[11,"set_ip","","Change the IP address associated with this socket address.",118,null],[11,"port","","Returns the port number associated with this socket address.",118,null],[11,"set_port","","Change the port number associated with this socket address.",118,null],[11,"new","","Creates a new socket address from the (ip, port) pair.",119,{"inputs":[{"name":"ipv4addr"},{"name":"u16"}],"output":{"name":"socketaddrv4"}}],[11,"ip","","Returns the IP address associated with this socket address.",119,null],[11,"set_ip","","Change the IP address associated with this socket address.",119,null],[11,"port","","Returns the port number associated with this socket address.",119,null],[11,"set_port","","Change the port number associated with this socket address.",119,null],[11,"new","","Creates a new socket address from the ip/port/flowinfo/scope_id\ncomponents.",120,{"inputs":[{"name":"ipv6addr"},{"name":"u16"},{"name":"u32"},{"name":"u32"}],"output":{"name":"socketaddrv6"}}],[11,"ip","","Returns the IP address associated with this socket address.",120,null],[11,"set_ip","","Change the IP address associated with this socket address.",120,null],[11,"port","","Returns the port number associated with this socket address.",120,null],[11,"set_port","","Change the port number associated with this socket address.",120,null],[11,"flowinfo","","Returns the flow information associated with this address,\ncorresponding to the `sin6_flowinfo` field in C.",120,null],[11,"set_flowinfo","","Change the flow information associated with this socket address.",120,null],[11,"scope_id","","Returns the scope ID associated with this address,\ncorresponding to the `sin6_scope_id` field in C.",120,null],[11,"set_scope_id","","Change the scope ID associated with this socket address.",120,null],[11,"fmt","","",118,null],[11,"fmt","","",119,null],[11,"fmt","","",119,null],[11,"fmt","","",120,null],[11,"fmt","","",120,null],[11,"clone","","",119,null],[11,"clone","","",120,null],[11,"eq","","",119,null],[11,"eq","","",120,null],[11,"hash","","",119,null],[11,"hash","","",120,null],[11,"to_socket_addrs","","",118,null],[11,"to_socket_addrs","","",119,null],[11,"to_socket_addrs","","",120,null],[11,"connect","std::net::tcp","Opens a TCP connection to a remote host.",121,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"peer_addr","","Returns the socket address of the remote peer of this TCP connection.",121,null],[11,"local_addr","","Returns the socket address of the local half of this TCP connection.",121,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",121,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",121,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",121,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",121,null],[11,"read_timeout","","Returns the read timeout of this socket.",121,null],[11,"write_timeout","","Returns the write timeout of this socket.",121,null],[11,"set_nodelay","","Sets the value of the `TCP_NODELAY` option on this socket.",121,null],[11,"nodelay","","Gets the value of the `TCP_NODELAY` option on this socket.",121,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",121,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",121,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",121,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",121,null],[11,"read","","",121,null],[11,"read_to_end","","",121,null],[11,"write","","",121,null],[11,"flush","","",121,null],[11,"fmt","","",121,null],[11,"bind","","Creates a new `TcpListener` which will be bound to the specified\naddress.",122,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"local_addr","","Returns the local socket address of this listener.",122,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",122,null],[11,"accept","","Accept a new incoming connection from this listener.",122,null],[11,"incoming","","Returns an iterator over the connections being received on this\nlistener.",122,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",122,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",122,null],[11,"set_only_v6","","Sets the value for the `IPV6_V6ONLY` option on this socket.",122,null],[11,"only_v6","","Gets the value of the `IPV6_V6ONLY` option for this socket.",122,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",122,null],[11,"set_nonblocking","","Moves this TCP stream into or out of nonblocking mode.",122,null],[11,"next","","",123,null],[11,"fmt","","",122,null],[11,"bind","std::net::udp","Creates a UDP socket from the given address.",124,{"inputs":[{"name":"a"}],"output":{"name":"result"}}],[11,"recv_from","","Receives data from the socket. On success, returns the number of bytes\nread and the address from whence the data came.",124,null],[11,"send_to","","Sends data on the socket to the given address. On success, returns the\nnumber of bytes written.",124,null],[11,"local_addr","","Returns the socket address that this socket was created from.",124,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",124,null],[11,"set_read_timeout","","Sets the read timeout to the timeout specified.",124,null],[11,"set_write_timeout","","Sets the write timeout to the timeout specified.",124,null],[11,"read_timeout","","Returns the read timeout of this socket.",124,null],[11,"write_timeout","","Returns the write timeout of this socket.",124,null],[11,"set_broadcast","","Sets the value of the `SO_BROADCAST` option for this socket.",124,null],[11,"broadcast","","Gets the value of the `SO_BROADCAST` option for this socket.",124,null],[11,"set_multicast_loop_v4","","Sets the value of the `IP_MULTICAST_LOOP` option for this socket.",124,null],[11,"multicast_loop_v4","","Gets the value of the `IP_MULTICAST_LOOP` option for this socket.",124,null],[11,"set_multicast_ttl_v4","","Sets the value of the `IP_MULTICAST_TTL` option for this socket.",124,null],[11,"multicast_ttl_v4","","Gets the value of the `IP_MULTICAST_TTL` option for this socket.",124,null],[11,"set_multicast_loop_v6","","Sets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",124,null],[11,"multicast_loop_v6","","Gets the value of the `IPV6_MULTICAST_LOOP` option for this socket.",124,null],[11,"set_ttl","","Sets the value for the `IP_TTL` option on this socket.",124,null],[11,"ttl","","Gets the value of the `IP_TTL` option for this socket.",124,null],[11,"join_multicast_v4","","Executes an operation of the `IP_ADD_MEMBERSHIP` type.",124,null],[11,"join_multicast_v6","","Executes an operation of the `IPV6_ADD_MEMBERSHIP` type.",124,null],[11,"leave_multicast_v4","","Executes an operation of the `IP_DROP_MEMBERSHIP` type.",124,null],[11,"leave_multicast_v6","","Executes an operation of the `IPV6_DROP_MEMBERSHIP` type.",124,null],[11,"take_error","","Get the value of the `SO_ERROR` option on this socket.",124,null],[11,"connect","","Connects this UDP socket to a remote address, allowing the `send` and\n`recv` syscalls to be used to send data and also applies filters to only\nreceive data from the specified address.",124,null],[11,"send","","Sends data on the socket to the remote address to which it is connected.",124,null],[11,"recv","","Receives data on the socket from the remote address to which it is\nconnected.",124,null],[11,"set_nonblocking","","Moves this UDP socket into or out of nonblocking mode.",124,null],[11,"fmt","","",124,null],[11,"from_str","std::net::ip","",114,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",116,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",117,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","std::net::addr","",119,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",120,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"from_str","","",118,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"eq","std::net::parser","",125,null],[11,"ne","","",125,null],[11,"clone","","",125,null],[11,"fmt","","",125,null],[11,"fmt","","",125,null],[11,"description","","",125,null],[11,"fmt","std::net","",126,null],[11,"eq","","",126,null],[11,"clone","","",126,null],[11,"next","","",127,null],[11,"clone","std::os::linux::raw::arch","",128,null],[11,"as_raw_stat","std::fs","",83,null],[11,"st_dev","","",83,null],[11,"st_ino","","",83,null],[11,"st_mode","","",83,null],[11,"st_nlink","","",83,null],[11,"st_uid","","",83,null],[11,"st_gid","","",83,null],[11,"st_rdev","","",83,null],[11,"st_size","","",83,null],[11,"st_atime","","",83,null],[11,"st_atime_nsec","","",83,null],[11,"st_mtime","","",83,null],[11,"st_mtime_nsec","","",83,null],[11,"st_ctime","","",83,null],[11,"st_ctime_nsec","","",83,null],[11,"st_blksize","","",83,null],[11,"st_blocks","","",83,null],[11,"as_raw_fd","","",87,null],[11,"from_raw_fd","","",87,{"inputs":[{"name":"i32"}],"output":{"name":"file"}}],[11,"into_raw_fd","","",87,null],[11,"as_raw_fd","std::net::tcp","",121,null],[11,"as_raw_fd","","",122,null],[11,"as_raw_fd","std::net::udp","",124,null],[11,"from_raw_fd","std::net::tcp","",121,{"inputs":[{"name":"i32"}],"output":{"name":"tcpstream"}}],[11,"from_raw_fd","","",122,{"inputs":[{"name":"i32"}],"output":{"name":"tcplistener"}}],[11,"from_raw_fd","std::net::udp","",124,{"inputs":[{"name":"i32"}],"output":{"name":"udpsocket"}}],[11,"into_raw_fd","std::net::tcp","",121,null],[11,"into_raw_fd","","",122,null],[11,"into_raw_fd","std::net::udp","",124,null],[11,"from_vec","std::ffi::os_str","",79,{"inputs":[{"name":"vec"}],"output":{"name":"osstring"}}],[11,"into_vec","","",79,null],[11,"from_bytes","","",80,null],[11,"as_bytes","","",80,null],[11,"mode","std::fs","",85,null],[11,"set_mode","","",85,null],[11,"from_mode","","",85,{"inputs":[{"name":"u32"}],"output":{"name":"permissions"}}],[11,"mode","","",84,null],[11,"custom_flags","","",84,null],[11,"dev","","",83,null],[11,"ino","","",83,null],[11,"mode","","",83,null],[11,"nlink","","",83,null],[11,"uid","","",83,null],[11,"gid","","",83,null],[11,"rdev","","",83,null],[11,"size","","",83,null],[11,"atime","","",83,null],[11,"atime_nsec","","",83,null],[11,"mtime","","",83,null],[11,"mtime_nsec","","",83,null],[11,"ctime","","",83,null],[11,"ctime_nsec","","",83,null],[11,"blksize","","",83,null],[11,"blocks","","",83,null],[11,"is_block_device","","",86,null],[11,"is_char_device","","",86,null],[11,"is_fifo","","",86,null],[11,"is_socket","","",86,null],[11,"ino","","",89,null],[11,"mode","","",90,null],[11,"uid","std::process","",129,null],[11,"gid","","",129,null],[11,"session_leader","","",129,null],[11,"before_exec","","",129,null],[11,"exec","","",129,null],[11,"from_raw","","",130,{"inputs":[{"name":"i32"}],"output":{"name":"exitstatus"}}],[11,"signal","","",130,null],[11,"from_raw_fd","","",131,{"inputs":[{"name":"i32"}],"output":{"name":"stdio"}}],[11,"as_raw_fd","","",132,null],[11,"as_raw_fd","","",133,null],[11,"as_raw_fd","","",134,null],[11,"into_raw_fd","","",132,null],[11,"into_raw_fd","","",133,null],[11,"into_raw_fd","","",134,null],[11,"as_pthread_t","std::thread","",29,null],[11,"into_pthread_t","","",29,null],[11,"clone","std::sys::ext::net","",135,null],[11,"is_unnamed","","Returns true iff the address is unnamed.",135,null],[11,"as_pathname","","Returns the contents of this address if it is a `pathname` address.",135,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"connect","","Connects to the socket named by `path`.",136,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"pair","","Creates an unnamed pair of connected sockets.",136,{"inputs":[],"output":{"name":"result"}}],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",136,null],[11,"local_addr","","Returns the socket address of the local half of this connection.",136,null],[11,"peer_addr","","Returns the socket address of the remote half of this connection.",136,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",136,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",136,null],[11,"read_timeout","","Returns the read timeout of this socket.",136,null],[11,"write_timeout","","Returns the write timeout of this socket.",136,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",136,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",136,null],[11,"shutdown","","Shuts down the read, write, or both halves of this connection.",136,null],[11,"read","","",136,null],[11,"read_to_end","","",136,null],[11,"write","","",136,null],[11,"flush","","",136,null],[11,"as_raw_fd","","",136,null],[11,"from_raw_fd","","",136,{"inputs":[{"name":"i32"}],"output":{"name":"unixstream"}}],[11,"into_raw_fd","","",136,null],[11,"fmt","","",137,null],[11,"bind","","Creates a new `UnixListener` bound to the specified socket.",137,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"accept","","Accepts a new incoming connection to this listener.",137,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",137,null],[11,"local_addr","","Returns the local socket address of this listener.",137,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",137,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",137,null],[11,"incoming","","Returns an iterator over incoming connections.",137,null],[11,"as_raw_fd","","",137,null],[11,"from_raw_fd","","",137,{"inputs":[{"name":"i32"}],"output":{"name":"unixlistener"}}],[11,"into_raw_fd","","",137,null],[11,"fmt","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"fmt","","",139,null],[11,"bind","","Creates a Unix datagram socket bound to the given path.",139,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"unbound","","Creates a Unix Datagram socket which is not bound to any address.",139,{"inputs":[],"output":{"name":"result"}}],[11,"pair","","Create an unnamed pair of connected sockets.",139,{"inputs":[],"output":{"name":"result"}}],[11,"connect","","Connects the socket to the specified address.",139,null],[11,"try_clone","","Creates a new independently owned handle to the underlying socket.",139,null],[11,"local_addr","","Returns the address of this socket.",139,null],[11,"peer_addr","","Returns the address of this socket&#39;s peer.",139,null],[11,"recv_from","","Receives data from the socket.",139,null],[11,"recv","","Receives data from the socket.",139,null],[11,"send_to","","Sends data on the socket to the specified address.",139,null],[11,"send","","Sends data on the socket to the socket&#39;s peer.",139,null],[11,"set_read_timeout","","Sets the read timeout for the socket.",139,null],[11,"set_write_timeout","","Sets the write timeout for the socket.",139,null],[11,"read_timeout","","Returns the read timeout of this socket.",139,null],[11,"write_timeout","","Returns the write timeout of this socket.",139,null],[11,"set_nonblocking","","Moves the socket into or out of nonblocking mode.",139,null],[11,"take_error","","Returns the value of the `SO_ERROR` option.",139,null],[11,"shutdown","","Shut down the read, write, or both halves of this connection.",139,null],[11,"as_raw_fd","","",139,null],[11,"from_raw_fd","","",139,{"inputs":[{"name":"i32"}],"output":{"name":"unixdatagram"}}],[11,"into_raw_fd","","",139,null],[11,"deref","std::panic","",140,null],[11,"deref_mut","","",140,null],[11,"call_once","","",140,null],[11,"new","","Creates a new `AssertRecoverSafe` wrapper around the provided type.",141,{"inputs":[{"name":"t"}],"output":{"name":"assertrecoversafe"}}],[11,"into_inner","","Consumes the `AssertRecoverSafe`, returning the wrapped value.",141,null],[11,"deref","","",141,null],[11,"deref_mut","","",141,null],[11,"call_once","","",141,null],[11,"eq","std::path","",142,null],[11,"ne","","",142,null],[11,"cmp","","",142,null],[11,"partial_cmp","","",142,null],[11,"lt","","",142,null],[11,"le","","",142,null],[11,"gt","","",142,null],[11,"ge","","",142,null],[11,"hash","","",142,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"is_verbatim","","Determines if the prefix is verbatim, i.e. begins with `\\\\?\\`.",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"kind","","The parsed prefix data.",143,null],[11,"as_os_str","","The raw `OsStr` slice for this prefix.",143,null],[11,"eq","","",143,null],[11,"partial_cmp","","",143,null],[11,"cmp","","",143,null],[11,"hash","","",143,null],[11,"fmt","","",144,null],[11,"hash","","",144,null],[11,"cmp","","",144,null],[11,"partial_cmp","","",144,null],[11,"lt","","",144,null],[11,"le","","",144,null],[11,"gt","","",144,null],[11,"ge","","",144,null],[11,"eq","","",144,null],[11,"ne","","",144,null],[11,"clone","","",144,null],[11,"as_os_str","","Extracts the underlying `OsStr` slice",144,null],[11,"as_ref","","",144,null],[11,"clone","","",145,null],[11,"clone","","",146,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",145,null],[11,"as_ref","","",145,null],[11,"as_ref","","",145,null],[11,"as_path","","Extracts a slice corresponding to the portion of the path remaining for iteration.",146,null],[11,"as_ref","","",146,null],[11,"as_ref","","",146,null],[11,"next","","",146,null],[11,"next_back","","",146,null],[11,"next","","",145,null],[11,"next_back","","",145,null],[11,"eq","","",145,null],[11,"partial_cmp","","",145,null],[11,"cmp","","",145,null],[11,"clone","","",147,null],[11,"new","","Allocates an empty `PathBuf`.",147,{"inputs":[],"output":{"name":"pathbuf"}}],[11,"as_path","","Coerces to a `Path` slice.",147,null],[11,"push","","Extends `self` with `path`.",147,null],[11,"pop","","Truncate `self` to `self.parent()`.",147,null],[11,"set_file_name","","Updates `self.file_name()` to `file_name`.",147,null],[11,"set_extension","","Updates `self.extension()` to `extension`.",147,null],[11,"into_os_string","","Consumes the `PathBuf`, yielding its internal `OsString` storage.",147,null],[11,"from","","",147,{"inputs":[{"name":"t"}],"output":{"name":"pathbuf"}}],[11,"from","","",147,{"inputs":[{"name":"osstring"}],"output":{"name":"pathbuf"}}],[11,"from","","",147,{"inputs":[{"name":"string"}],"output":{"name":"pathbuf"}}],[11,"from_iter","","",147,{"inputs":[{"name":"i"}],"output":{"name":"pathbuf"}}],[11,"extend","","",147,null],[11,"fmt","","",147,null],[11,"new","","Directly wrap a string slice as a `Path` slice.",148,{"inputs":[{"name":"s"}],"output":{"name":"path"}}],[11,"as_os_str","","Yields the underlying `OsStr` slice.",148,null],[11,"to_str","","Yields a `&amp;str` slice if the `Path` is valid unicode.",148,null],[11,"to_string_lossy","","Converts a `Path` to a `Cow&lt;str&gt;`.",148,null],[11,"to_path_buf","","Converts a `Path` to an owned `PathBuf`.",148,null],[11,"is_absolute","","A path is *absolute* if it is independent of the current directory.",148,null],[11,"is_relative","","A path is *relative* if it is not absolute.",148,null],[11,"has_root","","A path has a root if the body of the path begins with the directory separator.",148,null],[11,"parent","","The path without its final component, if any.",148,null],[11,"file_name","","The final component of the path, if it is a normal file.",148,null],[11,"strip_prefix","","Returns a path that, when joined onto `base`, yields `self`.",148,null],[11,"starts_with","","Determines whether `base` is a prefix of `self`.",148,null],[11,"ends_with","","Determines whether `child` is a suffix of `self`.",148,null],[11,"file_stem","","Extracts the stem (non-extension) portion of `self.file_name()`.",148,null],[11,"extension","","Extracts the extension of `self.file_name()`, if possible.",148,null],[11,"join","","Creates an owned `PathBuf` with `path` adjoined to `self`.",148,null],[11,"with_file_name","","Creates an owned `PathBuf` like `self` but with the given file name.",148,null],[11,"with_extension","","Creates an owned `PathBuf` like `self` but with the given extension.",148,null],[11,"components","","Produce an iterator over the components of the path.",148,null],[11,"iter","","Produce an iterator over the path&#39;s components viewed as `OsStr` slices.",148,null],[11,"display","","Returns an object that implements `Display` for safely printing paths\nthat may contain non-Unicode data.",148,null],[11,"metadata","","Query the file system to get information about a file, directory, etc.",148,null],[11,"symlink_metadata","","Query the metadata about a file without following symlinks.",148,null],[11,"canonicalize","","Returns the canonical form of the path with all intermediate components\nnormalized and symbolic links resolved.",148,null],[11,"read_link","","Reads a symbolic link, returning the file that the link points to.",148,null],[11,"read_dir","","Returns an iterator over the entries within a directory.",148,null],[11,"exists","","Returns whether the path points at an existing entity.",148,null],[11,"is_file","","Returns whether the path is pointing at a regular file.",148,null],[11,"is_dir","","Returns whether the path is pointing at a directory.",148,null],[11,"deref","","",147,null],[11,"borrow","","",147,null],[11,"from","collections::borrow","",81,{"inputs":[{"name":"path"}],"output":{"name":"cow"}}],[11,"from","","",81,{"inputs":[{"name":"pathbuf"}],"output":{"name":"cow"}}],[11,"to_owned","std::path","",148,null],[11,"eq","","",147,null],[11,"hash","","",147,null],[11,"partial_cmp","","",147,null],[11,"cmp","","",147,null],[11,"as_ref","","",147,null],[11,"into","","",147,null],[11,"eq","","",149,null],[11,"ne","","",149,null],[11,"clone","","",149,null],[11,"fmt","","",149,null],[11,"as_ref","","",148,null],[11,"fmt","","",148,null],[11,"fmt","","",150,null],[11,"fmt","","",150,null],[11,"eq","","",148,null],[11,"hash","","",148,null],[11,"partial_cmp","","",148,null],[11,"cmp","","",148,null],[11,"as_ref","","",148,null],[11,"as_ref","std::ffi::os_str","",80,null],[11,"as_ref","collections::borrow","",81,null],[11,"as_ref","std::ffi::os_str","",79,null],[11,"as_ref","collections::string","",82,null],[11,"as_ref","std::path","",147,null],[11,"eq","","",147,null],[11,"eq","","",148,null],[11,"partial_cmp","","",147,null],[11,"partial_cmp","","",148,null],[11,"eq","","",147,null],[11,"partial_cmp","","",147,null],[11,"eq","collections::borrow","",81,null],[11,"eq","std::path","",148,null],[11,"partial_cmp","collections::borrow","",81,null],[11,"partial_cmp","std::path","",148,null],[11,"eq","collections::borrow","",81,null],[11,"partial_cmp","","",81,null],[11,"eq","","",81,null],[11,"eq","std::path","",147,null],[11,"partial_cmp","collections::borrow","",81,null],[11,"partial_cmp","std::path","",147,null],[11,"eq","","",147,null],[11,"eq","std::ffi::os_str","",80,null],[11,"partial_cmp","std::path","",147,null],[11,"partial_cmp","std::ffi::os_str","",80,null],[11,"eq","std::path","",147,null],[11,"partial_cmp","","",147,null],[11,"eq","","",147,null],[11,"eq","collections::borrow","",81,null],[11,"partial_cmp","std::path","",147,null],[11,"partial_cmp","collections::borrow","",81,null],[11,"eq","std::path","",147,null],[11,"eq","std::ffi::os_str","",79,null],[11,"partial_cmp","std::path","",147,null],[11,"partial_cmp","std::ffi::os_str","",79,null],[11,"eq","std::path","",148,null],[11,"eq","std::ffi::os_str","",80,null],[11,"partial_cmp","std::path","",148,null],[11,"partial_cmp","std::ffi::os_str","",80,null],[11,"eq","std::path","",148,null],[11,"partial_cmp","","",148,null],[11,"eq","","",148,null],[11,"eq","collections::borrow","",81,null],[11,"partial_cmp","std::path","",148,null],[11,"partial_cmp","collections::borrow","",81,null],[11,"eq","std::path","",148,null],[11,"eq","std::ffi::os_str","",79,null],[11,"partial_cmp","std::path","",148,null],[11,"partial_cmp","std::ffi::os_str","",79,null],[11,"eq","","",80,null],[11,"partial_cmp","","",80,null],[11,"eq","collections::borrow","",81,null],[11,"partial_cmp","","",81,null],[11,"eq","std::ffi::os_str","",79,null],[11,"partial_cmp","","",79,null],[11,"eq","collections::borrow","",81,null],[11,"eq","std::ffi::os_str","",80,null],[11,"partial_cmp","collections::borrow","",81,null],[11,"partial_cmp","std::ffi::os_str","",80,null],[11,"eq","collections::borrow","",81,null],[11,"partial_cmp","","",81,null],[11,"eq","","",81,null],[11,"eq","std::ffi::os_str","",79,null],[11,"partial_cmp","collections::borrow","",81,null],[11,"partial_cmp","std::ffi::os_str","",79,null],[11,"fmt","std::path","",149,null],[11,"description","","",149,null],[11,"write","std::process","",132,null],[11,"flush","","",132,null],[11,"read","","",133,null],[11,"read_to_end","","",133,null],[11,"read","","",134,null],[11,"read_to_end","","",134,null],[11,"new","","Constructs a new `Command` for launching the program at\npath `program`, with the following default configuration:",129,{"inputs":[{"name":"s"}],"output":{"name":"command"}}],[11,"arg","","Add an argument to pass to the program.",129,null],[11,"args","","Add multiple arguments to pass to the program.",129,null],[11,"env","","Inserts or updates an environment variable mapping.",129,null],[11,"env_remove","","Removes an environment variable mapping.",129,null],[11,"env_clear","","Clears the entire environment map for the child process.",129,null],[11,"current_dir","","Sets the working directory for the child process.",129,null],[11,"stdin","","Configuration for the child process&#39;s stdin handle (file descriptor 0).",129,null],[11,"stdout","","Configuration for the child process&#39;s stdout handle (file descriptor 1).",129,null],[11,"stderr","","Configuration for the child process&#39;s stderr handle (file descriptor 2).",129,null],[11,"spawn","","Executes the command as a child process, returning a handle to it.",129,null],[11,"output","","Executes the command as a child process, waiting for it to finish and\ncollecting all of its output.",129,null],[11,"status","","Executes a command as a child process, waiting for it to finish and\ncollecting its exit status.",129,null],[11,"fmt","","Format the program and arguments of a Command for display. Any\nnon-utf8 data is lossily converted using the utf8 replacement\ncharacter.",129,null],[11,"clone","","",151,null],[11,"eq","","",151,null],[11,"ne","","",151,null],[11,"fmt","","",151,null],[11,"piped","","A new pipe should be arranged to connect the parent and child processes.",131,{"inputs":[],"output":{"name":"stdio"}}],[11,"inherit","","The child inherits from the corresponding parent descriptor.",131,{"inputs":[],"output":{"name":"stdio"}}],[11,"null","","This stream will be ignored. This is the equivalent of attaching the\nstream to `/dev/null`",131,{"inputs":[],"output":{"name":"stdio"}}],[11,"fmt","","",130,null],[11,"clone","","",130,null],[11,"eq","","",130,null],[11,"ne","","",130,null],[11,"success","","Was termination successful? Signal termination not considered a success,\nand success is defined as a zero exit status.",130,null],[11,"code","","Returns the exit code of the process, if any.",130,null],[11,"fmt","","",130,null],[11,"kill","","Forces the child to exit. This is equivalent to sending a\nSIGKILL on unix platforms.",152,null],[11,"id","","Returns the OS-assigned process identifier associated with this child.",152,null],[11,"wait","","Waits for the child to exit completely, returning the status that it\nexited with. This function will continue to have the same return value\nafter it has been called at least once.",152,null],[11,"wait_with_output","","Simultaneously waits for the child to exit and collect all remaining\noutput on the stdout/stderr handles, returning an `Output`\ninstance.",152,null],[11,"new","std::sync::mpsc::select","Creates a new selection structure. This set is initially empty.",153,{"inputs":[],"output":{"name":"select"}}],[11,"handle","","Creates a new handle into this receiver set for a new receiver. Note\nthat this does *not* add the receiver to the receiver set, for that you\nmust call the `add` method on the handle itself.",153,null],[11,"wait","","Waits for an event on this receiver set. The returned value is *not* an\nindex, but rather an id. This id can be queried against any active\n`Handle` structures (each one has an `id` method). The handle with\nthe matching `id` will have some sort of event available on it. The\nevent could either be that data is available or the corresponding\nchannel has been closed.",153,null],[11,"id","","Retrieves the id of this handle.",154,null],[11,"recv","","Blocks to receive a value on the underlying receiver, returning `Some` on\nsuccess or `None` if the channel disconnects. This function has the same\nsemantics as `Receiver.recv`",154,null],[11,"add","","Adds this handle to the receiver set that the handle was created from. This\nmethod can be called multiple times, but it has no effect if `add` was\ncalled previously.",154,null],[11,"remove","","Removes this handle from the `Select` set. This method is unsafe because\nit has no guarantee that the `Handle` was not moved since `add` was\ncalled.",154,null],[11,"drop","","",153,null],[11,"drop","","",154,null],[11,"fmt","","",153,null],[11,"fmt","","",154,null],[11,"clone","std::sync::mpsc","",155,null],[11,"eq","","",155,null],[11,"ne","","",155,null],[11,"fmt","","",156,null],[11,"clone","","",156,null],[11,"eq","","",156,null],[11,"fmt","","",157,null],[11,"clone","","",157,null],[11,"eq","","",157,null],[11,"clone","","",158,null],[11,"eq","","",158,null],[11,"ne","","",158,null],[11,"send","","Attempts to send a value on this channel, returning it back if it could\nnot be sent.",159,null],[11,"clone","","",159,null],[11,"drop","","",159,null],[11,"fmt","","",159,null],[11,"send","","Sends a value on this synchronous channel.",160,null],[11,"try_send","","Attempts to send a value on this channel without blocking.",160,null],[11,"clone","","",160,null],[11,"drop","","",160,null],[11,"fmt","","",160,null],[11,"try_recv","","Attempts to return a pending value on this receiver without blocking",161,null],[11,"recv","","Attempts to wait for a value on this receiver, returning an error if the\ncorresponding channel has hung up.",161,null],[11,"iter","","Returns an iterator that will block waiting for messages, but never\n`panic!`. It will return `None` when the channel has hung up.",161,null],[11,"next","","",162,null],[11,"next","","",163,null],[11,"into_iter","","",161,null],[11,"drop","","",161,null],[11,"fmt","","",161,null],[11,"fmt","","",155,null],[11,"fmt","","",155,null],[11,"description","","",155,null],[11,"cause","","",155,null],[11,"fmt","","",158,null],[11,"fmt","","",158,null],[11,"description","","",158,null],[11,"cause","","",158,null],[11,"fmt","","",156,null],[11,"description","","",156,null],[11,"cause","","",156,null],[11,"fmt","","",157,null],[11,"description","","",157,null],[11,"cause","","",157,null],[11,"new","std::sync::barrier","Creates a new barrier that can block a given number of threads.",164,{"inputs":[{"name":"usize"}],"output":{"name":"barrier"}}],[11,"wait","","Blocks the current thread until all threads have rendezvoused here.",164,null],[11,"is_leader","","Returns whether this thread from `wait` is the &quot;leader thread&quot;.",165,null],[11,"clone","std::sync::condvar","",166,null],[11,"eq","","",166,null],[11,"ne","","",166,null],[11,"fmt","","",166,null],[11,"timed_out","","Returns whether the wait was known to have timed out.",166,null],[11,"new","","Creates a new condition variable which is ready to be waited on and\nnotified.",167,{"inputs":[],"output":{"name":"condvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",167,null],[11,"wait_timeout_ms","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",167,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",167,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",167,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",167,null],[11,"default","","",167,{"inputs":[],"output":{"name":"condvar"}}],[11,"drop","","",167,null],[11,"new","","Creates a new condition variable",168,{"inputs":[],"output":{"name":"staticcondvar"}}],[11,"wait","","Blocks the current thread until this condition variable receives a\nnotification.",168,null],[11,"wait_timeout","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",168,null],[11,"wait_timeout_with","","Waits on this condition variable for a notification, timing out after a\nspecified duration.",168,null],[11,"notify_one","","Wakes up one blocked thread on this condvar.",168,null],[11,"notify_all","","Wakes up all blocked threads on this condvar.",168,null],[11,"destroy","","Deallocates all resources associated with this static condvar.",168,null],[11,"new","std::sync::mutex","Creates a new mutex in an unlocked state ready for use.",169,{"inputs":[{"name":"t"}],"output":{"name":"mutex"}}],[11,"lock","","Acquires a mutex, blocking the current thread until it is able to do so.",169,null],[11,"try_lock","","Attempts to acquire this lock.",169,null],[11,"is_poisoned","","Determines whether the lock is poisoned.",169,null],[11,"into_inner","","Consumes this mutex, returning the underlying data.",169,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",169,null],[11,"drop","","",169,null],[11,"default","","",169,{"inputs":[],"output":{"name":"mutex"}}],[11,"fmt","","",169,null],[11,"new","","Creates a new mutex in an unlocked state ready for use.",170,{"inputs":[],"output":{"name":"staticmutex"}}],[11,"lock","","Acquires this lock, see `Mutex::lock`",170,null],[11,"try_lock","","Attempts to grab this lock, see `Mutex::try_lock`",170,null],[11,"destroy","","Deallocates resources associated with this static mutex.",170,null],[11,"deref","","",171,null],[11,"deref_mut","","",171,null],[11,"drop","","",171,null],[11,"new","std::sync::once","Creates a new `Once` value.",172,{"inputs":[],"output":{"name":"once"}}],[11,"call_once","","Performs an initialization routine once and only once. The given closure\nwill be executed if this is the first time `call_once` has been called,\nand otherwise the routine will *not* be invoked.",172,null],[11,"call_once_force","","Performs the same function as `call_once` except ignores poisoning.",172,null],[11,"poisoned","","Returns whether the associated `Once` has been poisoned.",173,null],[11,"drop","std::sync::rwlock","",8,null],[11,"fmt","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"rwlock"}}],[11,"new","","Creates a new rwlock.",174,{"inputs":[],"output":{"name":"staticrwlock"}}],[11,"read","","Locks this rwlock with shared read access, blocking the current thread\nuntil it can be acquired.",174,null],[11,"try_read","","Attempts to acquire this lock with shared read access.",174,null],[11,"write","","Locks this rwlock with exclusive write access, blocking the current\nthread until it can be acquired.",174,null],[11,"try_write","","Attempts to lock this rwlock with exclusive write access.",174,null],[11,"destroy","","Deallocates all resources associated with this static lock.",174,null],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",175,{"inputs":[{"name":"rwlockreadguard"},{"name":"f"}],"output":{"name":"rwlockreadguard"}}],[11,"map","","Transform this guard to hold a sub-borrow of the original data.",176,{"inputs":[{"name":"rwlockwriteguard"},{"name":"f"}],"output":{"name":"rwlockwriteguard"}}],[11,"deref","","",175,null],[11,"deref","","",176,null],[11,"deref_mut","","",176,null],[11,"drop","","",175,null],[11,"drop","","",176,null],[11,"default","core::sync::atomic","",177,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",178,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",179,null],[11,"clone","","",179,null],[11,"new","","Creates a new `AtomicBool`.",177,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",177,null],[11,"store","","Stores a value into the bool.",177,null],[11,"swap","","Stores a value into the bool, returning the old value.",177,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",177,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",177,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",177,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",177,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",177,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",177,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",177,null],[11,"new","","Creates a new `AtomicPtr`.",178,null],[11,"load","","Loads a value from the pointer.",178,null],[11,"store","","Stores a value into the pointer.",178,null],[11,"swap","","Stores a value into the pointer, returning the old value.",178,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",178,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",178,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",178,null],[11,"default","","",180,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",180,null],[11,"new","","Creates a new atomic integer.",180,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",180,null],[11,"store","","Stores a value into the atomic integer.",180,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",180,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",180,null],[11,"fetch_add","","Add to the current value, returning the previous value.",180,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",180,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",180,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",180,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",180,null],[11,"default","","",181,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",181,null],[11,"new","","Creates a new atomic integer.",181,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",181,null],[11,"store","","Stores a value into the atomic integer.",181,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",181,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",181,null],[11,"fetch_add","","Add to the current value, returning the previous value.",181,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",181,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",181,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",181,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",181,null],[11,"default","","",182,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",182,null],[11,"new","","Creates a new atomic integer.",182,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",182,null],[11,"store","","Stores a value into the atomic integer.",182,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",182,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",182,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",182,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",182,null],[11,"fetch_add","","Add to the current value, returning the previous value.",182,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",182,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",182,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",182,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",182,null],[11,"default","","",183,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",183,null],[11,"new","","Creates a new atomic integer.",183,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",183,null],[11,"store","","Stores a value into the atomic integer.",183,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",183,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",183,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",183,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",183,null],[11,"fetch_add","","Add to the current value, returning the previous value.",183,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",183,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",183,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",183,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",183,null],[11,"default","","",184,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",184,null],[11,"new","","Creates a new atomic integer.",184,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",184,null],[11,"store","","Stores a value into the atomic integer.",184,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",184,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",184,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",184,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",184,null],[11,"fetch_add","","Add to the current value, returning the previous value.",184,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",184,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",184,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",184,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",184,null],[11,"default","","",185,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",185,null],[11,"new","","Creates a new atomic integer.",185,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",185,null],[11,"store","","Stores a value into the atomic integer.",185,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",185,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",185,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",185,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",185,null],[11,"fetch_add","","Add to the current value, returning the previous value.",185,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",185,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",185,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",185,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",185,null],[11,"default","","",186,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",186,null],[11,"new","","Creates a new atomic integer.",186,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",186,null],[11,"store","","Stores a value into the atomic integer.",186,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",186,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",186,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",186,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",186,null],[11,"fetch_add","","Add to the current value, returning the previous value.",186,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",186,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",186,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",186,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",186,null],[11,"default","","",187,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",187,null],[11,"new","","Creates a new atomic integer.",187,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",187,null],[11,"store","","Stores a value into the atomic integer.",187,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",187,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",187,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",187,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",187,null],[11,"fetch_add","","Add to the current value, returning the previous value.",187,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",187,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",187,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",187,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",187,null],[11,"default","","",188,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",188,null],[11,"new","","Creates a new atomic integer.",188,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",188,null],[11,"store","","Stores a value into the atomic integer.",188,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",188,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",188,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",188,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",188,null],[11,"fetch_add","","Add to the current value, returning the previous value.",188,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",188,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",188,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",188,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",188,null],[11,"default","","",189,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",189,null],[11,"new","","Creates a new atomic integer.",189,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",189,null],[11,"store","","Stores a value into the atomic integer.",189,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",189,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",189,null],[11,"fetch_add","","Add to the current value, returning the previous value.",189,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",189,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",189,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",189,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",189,null],[11,"fmt","","",177,null],[11,"fmt","","",178,null],[11,"hash","std::time::duration","",190,null],[11,"fmt","","",190,null],[11,"cmp","","",190,null],[11,"partial_cmp","","",190,null],[11,"lt","","",190,null],[11,"le","","",190,null],[11,"gt","","",190,null],[11,"ge","","",190,null],[11,"eq","","",190,null],[11,"ne","","",190,null],[11,"clone","","",190,null],[11,"new","","Creates a new `Duration` from the specified number of seconds and\nadditional nanosecond precision.",190,{"inputs":[{"name":"u64"},{"name":"u32"}],"output":{"name":"duration"}}],[11,"from_secs","","Creates a new `Duration` from the specified number of seconds.",190,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"from_millis","","Creates a new `Duration` from the specified number of milliseconds.",190,{"inputs":[{"name":"u64"}],"output":{"name":"duration"}}],[11,"as_secs","","Returns the number of whole seconds represented by this duration.",190,null],[11,"subsec_nanos","","Returns the nanosecond precision represented by this duration.",190,null],[11,"add","","",190,null],[11,"add_assign","","",190,null],[11,"sub","","",190,null],[11,"sub_assign","","",190,null],[11,"mul","","",190,null],[11,"mul_assign","","",190,null],[11,"div","","",190,null],[11,"div_assign","","",190,null],[11,"cmp","std::time","",191,null],[11,"partial_cmp","","",191,null],[11,"lt","","",191,null],[11,"le","","",191,null],[11,"gt","","",191,null],[11,"ge","","",191,null],[11,"eq","","",191,null],[11,"ne","","",191,null],[11,"clone","","",191,null],[11,"cmp","","",192,null],[11,"partial_cmp","","",192,null],[11,"lt","","",192,null],[11,"le","","",192,null],[11,"gt","","",192,null],[11,"ge","","",192,null],[11,"eq","","",192,null],[11,"ne","","",192,null],[11,"clone","","",192,null],[11,"fmt","","",193,null],[11,"clone","","",193,null],[11,"now","","Returns an instant corresponding to &quot;now&quot;.",191,{"inputs":[],"output":{"name":"instant"}}],[11,"duration_since","","Returns the amount of time elapsed from another instant to this one.",191,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",191,null],[11,"elapsed","","Returns the amount of time elapsed since this instant was created.",191,null],[11,"add","","",191,null],[11,"add_assign","","",191,null],[11,"sub","","",191,null],[11,"sub_assign","","",191,null],[11,"sub","","",191,null],[11,"fmt","","",191,null],[11,"now","","Returns the system time corresponding to &quot;now&quot;.",192,{"inputs":[],"output":{"name":"systemtime"}}],[11,"duration_since","","Returns the amount of time elapsed from an earlier point in time.",192,null],[11,"duration_from_earlier","","Deprecated, renamed to `duration_since`",192,null],[11,"elapsed","","Returns the amount of time elapsed since this system time was created.",192,null],[11,"add","","",192,null],[11,"add_assign","","",192,null],[11,"sub","","",192,null],[11,"sub_assign","","",192,null],[11,"fmt","","",192,null],[11,"duration","","Returns the positive duration which represents how far forward the\nsecond system time was from the first.",193,null],[11,"description","","",193,null],[11,"fmt","","",193,null],[11,"fmt","std::sys_common::poison","",194,null],[11,"fmt","","",194,null],[11,"description","","",194,null],[11,"new","","Creates a `PoisonError`.",194,{"inputs":[{"name":"t"}],"output":{"name":"poisonerror"}}],[11,"into_inner","","Consumes this error indicating that a lock is poisoned, returning the\nunderlying guard to allow access regardless.",194,null],[11,"get_ref","","Reaches into this error indicating that a lock is poisoned, returning a\nreference to the underlying guard to allow access regardless.",194,null],[11,"get_mut","","Reaches into this error indicating that a lock is poisoned, returning a\nmutable reference to the underlying guard to allow access regardless.",194,null],[11,"from","","",195,{"inputs":[{"name":"poisonerror"}],"output":{"name":"trylockerror"}}],[11,"fmt","","",195,null],[11,"fmt","","",195,null],[11,"description","","",195,null],[11,"cause","","",195,null],[11,"clone","libc::unix","",196,null],[11,"clone","","",197,null],[11,"clone","","",198,null],[11,"clone","","",199,null],[11,"clone","","",200,null],[11,"clone","","",201,null],[11,"clone","","",202,null],[11,"clone","","",203,null],[11,"clone","","",204,null],[11,"clone","","",205,null],[11,"clone","","",206,null],[11,"clone","","",207,null],[11,"clone","","",208,null],[11,"clone","libc::unix::notbsd","",209,null],[11,"clone","","",210,null],[11,"clone","","",211,null],[11,"clone","","",212,null],[11,"clone","","",213,null],[11,"clone","","",214,null],[11,"clone","","",215,null],[11,"clone","","",216,null],[11,"clone","","",217,null],[11,"clone","","",218,null],[11,"clone","","",219,null],[11,"clone","","",220,null],[11,"clone","","",221,null],[11,"clone","","",222,null],[11,"clone","","",223,null],[11,"clone","libc::unix::notbsd::linux","",224,null],[11,"clone","","",225,null],[11,"clone","","",226,null],[11,"clone","","",227,null],[11,"clone","","",228,null],[11,"clone","","",229,null],[11,"clone","","",230,null],[11,"clone","","",231,null],[11,"clone","","",232,null],[11,"clone","","",233,null],[11,"clone","","",234,null],[11,"clone","","",235,null],[11,"clone","","",236,null],[11,"clone","","",237,null],[11,"clone","","",238,null],[11,"clone","","",239,null],[11,"clone","libc::unix::notbsd::linux::other","",240,null],[11,"clone","","",241,null],[11,"clone","","",242,null],[11,"clone","","",243,null],[11,"clone","","",244,null],[11,"clone","","",245,null],[11,"clone","","",246,null],[11,"clone","","",247,null],[11,"clone","","",248,null],[11,"clone","","",249,null],[11,"clone","","",250,null],[11,"clone","libc::unix::notbsd::linux::other::b64","",251,null],[11,"clone","libc::unix::notbsd::linux::other::b64::x86_64","",252,null],[11,"clone","","",253,null],[11,"clone","","",254,null],[11,"clone","","",255,null],[11,"clone","","",256,null],[11,"clone","","",257,null],[11,"clone","","",258,null],[11,"clone","","",259,null],[11,"payload","std::panicking","Returns the payload associated with the panic.",260,null],[11,"location","","Returns information about the location from which the panic originated,\nif available.",260,null],[11,"file","","Returns the name of the source file from which the panic originated.",261,null],[11,"line","","Returns the line number from which the panic originated.",261,null],[11,"clone","alloc::boxed","",262,null],[11,"pointer","","",263,null],[11,"make_place","","",263,{"inputs":[],"output":{"name":"intermediatebox"}}],[11,"finalize","","",263,null],[11,"finalize","","",9,{"inputs":[{"name":"intermediatebox"}],"output":{"name":"box"}}],[11,"make_place","","",262,null],[11,"drop","","",263,null],[11,"new","","Allocates memory on the heap and then places `x` into it.",9,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"from_raw","","Constructs a box from a raw pointer.",9,null],[11,"into_raw","","Consumes the `Box`, returning the wrapped raw pointer.",9,null],[11,"default","","",9,{"inputs":[],"output":{"name":"box"}}],[11,"default","","",9,{"inputs":[],"output":{"name":"box"}}],[11,"clone","","Returns a new box with a `clone()` of this box&#39;s contents.",9,null],[11,"clone_from","","Copies `source`&#39;s contents into `self` without creating a new allocation.",9,null],[11,"clone","","",9,null],[11,"eq","","",9,null],[11,"ne","","",9,null],[11,"partial_cmp","","",9,null],[11,"lt","","",9,null],[11,"le","","",9,null],[11,"ge","","",9,null],[11,"gt","","",9,null],[11,"cmp","","",9,null],[11,"hash","","",9,null],[11,"from","","",9,{"inputs":[{"name":"t"}],"output":{"name":"box"}}],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,null],[11,"downcast","","Attempt to downcast the box to a concrete type.",9,null],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"fmt","","",9,null],[11,"deref","","",9,null],[11,"deref_mut","","",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next_back","","",9,null],[11,"call_once","","",9,null],[11,"call_once","","",9,null],[11,"clone","","",9,null],[11,"borrow","","",9,null],[11,"borrow_mut","","",9,null],[11,"as_ref","","",9,null],[11,"as_mut","","",9,null],[11,"borrow","collections::borrow","",81,null],[11,"clone","","",81,null],[11,"to_mut","","Acquires a mutable reference to the owned form of the data.",81,null],[11,"into_owned","","Extracts the owned data.",81,null],[11,"deref","","",81,null],[11,"cmp","","",81,null],[11,"eq","","",81,null],[11,"partial_cmp","","",81,null],[11,"fmt","","",81,null],[11,"fmt","","",81,null],[11,"hash","","",81,null],[11,"as_ref","","",81,null],[11,"cmp","collections::string","",82,null],[11,"partial_cmp","","",82,null],[11,"lt","","",82,null],[11,"le","","",82,null],[11,"gt","","",82,null],[11,"ge","","",82,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[11,"new","","Creates a new empty `String`.",82,{"inputs":[],"output":{"name":"string"}}],[11,"with_capacity","","Creates a new empty `String` with a particular capacity.",82,{"inputs":[{"name":"usize"}],"output":{"name":"string"}}],[11,"from_utf8","","Converts a vector of bytes to a `String`.",82,{"inputs":[{"name":"vec"}],"output":{"name":"result"}}],[11,"from_utf8_lossy","","Converts a slice of bytes to a string, including invalid characters.",82,null],[11,"from_utf16","","Decode a UTF-16 encoded vector `v` into a `String`, returning `Err`\nif `v` contains any invalid data.",82,null],[11,"from_utf16_lossy","","Decode a UTF-16 encoded vector `v` into a string, replacing\ninvalid data with the replacement character (U+FFFD).",82,null],[11,"from_raw_parts","","Creates a new `String` from a length, capacity, and pointer.",82,null],[11,"from_utf8_unchecked","","Converts a vector of bytes to a `String` without checking that the\nstring contains valid UTF-8.",82,{"inputs":[{"name":"vec"}],"output":{"name":"string"}}],[11,"into_bytes","","Converts a `String` into a byte vector.",82,null],[11,"as_str","","Extracts a string slice containing the entire string.",82,null],[11,"as_mut_str","","Extracts a string slice containing the entire string.",82,null],[11,"push_str","","Appends a given string slice onto the end of this `String`.",82,null],[11,"capacity","","Returns this `String`&#39;s capacity, in bytes.",82,null],[11,"reserve","","Ensures that this `String`&#39;s capacity is at least `additional` bytes\nlarger than its length.",82,null],[11,"reserve_exact","","Ensures that this `String`&#39;s capacity is `additional` bytes\nlarger than its length.",82,null],[11,"shrink_to_fit","","Shrinks the capacity of this `String` to match its length.",82,null],[11,"push","","Appends the given `char` to the end of this `String`.",82,null],[11,"as_bytes","","Returns a byte slice of this `String`&#39;s contents.",82,null],[11,"truncate","","Shortens this `String` to the specified length.",82,null],[11,"pop","","Removes the last character from the string buffer and returns it.",82,null],[11,"remove","","Removes a `char` from this `String` at a byte position and returns it.",82,null],[11,"insert","","Inserts a character into this `String` at a byte position.",82,null],[11,"as_mut_vec","","Returns a mutable reference to the contents of this `String`.",82,null],[11,"len","","Returns the length of this `String`, in bytes.",82,null],[11,"is_empty","","Returns `true` if this `String` has a length of zero.",82,null],[11,"clear","","Truncates this `String`, removing all contents.",82,null],[11,"drain","","Create a draining iterator that removes the specified range in the string\nand yields the removed chars.",82,null],[11,"into_boxed_str","","Converts this `String` into a `Box&lt;str&gt;`.",82,null],[11,"into_bytes","","Returns the bytes that were attempted to convert to a `String`.",15,null],[11,"utf8_error","","Fetch a `Utf8Error` to get more details about the conversion failure.",15,null],[11,"fmt","","",15,null],[11,"fmt","","",16,null],[11,"clone","","",82,null],[11,"clone_from","","",82,null],[11,"from_iter","","",82,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",82,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"from_iter","","",82,{"inputs":[{"name":"i"}],"output":{"name":"string"}}],[11,"extend","","",82,null],[11,"extend","","",82,null],[11,"extend","","",82,null],[11,"extend","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"eq","","",82,null],[11,"ne","","",82,null],[11,"eq","collections::borrow","",81,null],[11,"ne","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"eq","collections::string","",82,null],[11,"ne","","",82,null],[11,"default","","",82,{"inputs":[],"output":{"name":"string"}}],[11,"fmt","","",82,null],[11,"fmt","","",82,null],[11,"hash","","",82,null],[11,"add","","",82,null],[11,"index","","",82,null],[11,"index","","",82,null],[11,"index","","",82,null],[11,"index","","",82,null],[11,"index","","",82,null],[11,"index","","",82,null],[11,"index_mut","","",82,null],[11,"index_mut","","",82,null],[11,"index_mut","","",82,null],[11,"index_mut","","",82,null],[11,"index_mut","","",82,null],[11,"index_mut","","",82,null],[11,"deref","","",82,null],[11,"deref_mut","","",82,null],[11,"from_str","","",82,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"clone","","",17,null],[11,"fmt","","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"as_ref","","",82,null],[11,"as_ref","","",82,null],[11,"from","","",82,{"inputs":[{"name":"str"}],"output":{"name":"string"}}],[11,"from","collections::borrow","",81,{"inputs":[{"name":"str"}],"output":{"name":"cow"}}],[11,"from","","",81,{"inputs":[{"name":"string"}],"output":{"name":"cow"}}],[11,"into","collections::string","",82,null],[11,"write_str","","",82,null],[11,"write_char","","",82,null],[11,"drop","","",264,null],[11,"next","","",264,null],[11,"size_hint","","",264,null],[11,"next_back","","",264,null],[11,"borrow","collections::vec","",55,null],[11,"borrow_mut","","",55,null],[11,"fmt","core::hash::sip","",265,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",265,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",265,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",265,null],[11,"finish","","",265,null],[11,"clone","","",265,null],[11,"default","","",265,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",266,null],[11,"build_hasher","","",266,null],[11,"clone","","",266,null],[11,"default","","",266,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"hash","core::option","",267,null],[11,"fmt","","",267,null],[11,"cmp","","",267,null],[11,"partial_cmp","","",267,null],[11,"lt","","",267,null],[11,"le","","",267,null],[11,"gt","","",267,null],[11,"ge","","",267,null],[11,"eq","","",267,null],[11,"ne","","",267,null],[11,"clone","","",267,null],[11,"is_some","","Returns `true` if the option is a `Some` value",267,null],[11,"is_none","","Returns `true` if the option is a `None` value",267,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",267,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",267,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",267,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",267,null],[11,"unwrap_or","","Returns the contained value or a default.",267,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",267,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",267,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",267,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",267,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",267,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",267,null],[11,"iter","","Returns an iterator over the possibly contained value.",267,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",267,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",267,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",267,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",267,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",267,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",267,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",267,null],[11,"unwrap_or_default","","Returns the contained value or a default",267,null],[11,"default","","",267,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",267,null],[11,"fmt","","",268,null],[11,"next","","",268,null],[11,"size_hint","","",268,null],[11,"next_back","","",268,null],[11,"clone","","",268,null],[11,"fmt","","",269,null],[11,"next","","",269,null],[11,"size_hint","","",269,null],[11,"next_back","","",269,null],[11,"fmt","","",270,null],[11,"clone","","",270,null],[11,"next","","",270,null],[11,"size_hint","","",270,null],[11,"next_back","","",270,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",267,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"new","alloc::rc","Constructs a new `Rc&lt;T&gt;`.",271,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"try_unwrap","","Unwraps the contained value if the `Rc&lt;T&gt;` has exactly one strong reference.",271,{"inputs":[{"name":"rc"}],"output":{"name":"result"}}],[11,"would_unwrap","","Checks if `Rc::try_unwrap` would return `Ok`.",271,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"downgrade","","Downgrades the `Rc&lt;T&gt;` to a `Weak&lt;T&gt;` reference.",271,{"inputs":[{"name":"rc"}],"output":{"name":"weak"}}],[11,"weak_count","","Get the number of weak references to this value.",271,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"strong_count","","Get the number of strong references to this value.",271,{"inputs":[{"name":"rc"}],"output":{"name":"usize"}}],[11,"is_unique","","Returns true if there are no other `Rc` or `Weak&lt;T&gt;` values that share\nthe same inner value.",271,{"inputs":[{"name":"rc"}],"output":{"name":"bool"}}],[11,"get_mut","","Returns a mutable reference to the contained value if the `Rc&lt;T&gt;` has\none strong reference and no weak references.",271,{"inputs":[{"name":"rc"}],"output":{"name":"option"}}],[11,"make_mut","","Make a mutable reference into the given `Rc&lt;T&gt;` by cloning the inner\ndata if the `Rc&lt;T&gt;` doesn&#39;t have one strong reference and no weak\nreferences.",271,{"inputs":[{"name":"rc"}],"output":{"name":"t"}}],[11,"deref","","",271,null],[11,"drop","","Drops the `Rc&lt;T&gt;`.",271,null],[11,"clone","","Makes a clone of the `Rc&lt;T&gt;`.",271,null],[11,"default","","Creates a new `Rc&lt;T&gt;`, with the `Default` value for `T`.",271,{"inputs":[],"output":{"name":"rc"}}],[11,"eq","","Equality for two `Rc&lt;T&gt;`s.",271,null],[11,"ne","","Inequality for two `Rc&lt;T&gt;`s.",271,null],[11,"partial_cmp","","Partial comparison for two `Rc&lt;T&gt;`s.",271,null],[11,"lt","","Less-than comparison for two `Rc&lt;T&gt;`s.",271,null],[11,"le","","&#39;Less-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",271,null],[11,"gt","","Greater-than comparison for two `Rc&lt;T&gt;`s.",271,null],[11,"ge","","&#39;Greater-than or equal to&#39; comparison for two `Rc&lt;T&gt;`s.",271,null],[11,"cmp","","Comparison for two `Rc&lt;T&gt;`s.",271,null],[11,"hash","","",271,null],[11,"fmt","","",271,null],[11,"fmt","","",271,null],[11,"fmt","","",271,null],[11,"from","","",271,{"inputs":[{"name":"t"}],"output":{"name":"rc"}}],[11,"new","","Constructs a new `Weak&lt;T&gt;` without an accompanying instance of T.",272,{"inputs":[],"output":{"name":"weak"}}],[11,"upgrade","","Upgrades a weak reference to a strong reference.",272,null],[11,"drop","","Drops the `Weak&lt;T&gt;`.",272,null],[11,"clone","","Makes a clone of the `Weak&lt;T&gt;`.",272,null],[11,"fmt","","",272,null],[11,"default","","",272,{"inputs":[],"output":{"name":"weak"}}],[11,"borrow","","",271,null],[11,"as_ref","","",271,null],[11,"new","core::ptr","Creates a new `Unique`.",273,null],[11,"get","","Dereferences the content.",273,null],[11,"get_mut","","Mutably dereferences the content.",273,null],[11,"deref","","",273,null],[11,"fmt","","",273,null],[11,"new","","Creates a new `Shared`.",274,null],[11,"clone","","",274,null],[11,"deref","","",274,null],[11,"fmt","","",274,null],[11,"new","collections::vec","Constructs a new, empty `Vec&lt;T&gt;`.",55,{"inputs":[],"output":{"name":"vec"}}],[11,"with_capacity","","Constructs a new, empty `Vec&lt;T&gt;` with the specified capacity.",55,{"inputs":[{"name":"usize"}],"output":{"name":"vec"}}],[11,"from_raw_parts","","Creates a `Vec&lt;T&gt;` directly from the raw components of another vector.",55,null],[11,"capacity","","Returns the number of elements the vector can hold without\nreallocating.",55,null],[11,"reserve","","Reserves capacity for at least `additional` more elements to be inserted\nin the given `Vec&lt;T&gt;`. The collection may reserve more space to avoid\nfrequent reallocations.",55,null],[11,"reserve_exact","","Reserves the minimum capacity for exactly `additional` more elements to\nbe inserted in the given `Vec&lt;T&gt;`. Does nothing if the capacity is already\nsufficient.",55,null],[11,"shrink_to_fit","","Shrinks the capacity of the vector as much as possible.",55,null],[11,"into_boxed_slice","","Converts the vector into Box&lt;[T]&gt;.",55,null],[11,"truncate","","Shorten a vector to be `len` elements long, dropping excess elements.",55,null],[11,"as_slice","","Extracts a slice containing the entire vector.",55,null],[11,"as_mut_slice","","Extracts a mutable slice of the entire vector.",55,null],[11,"set_len","","Sets the length of a vector.",55,null],[11,"swap_remove","","Removes an element from anywhere in the vector and return it, replacing\nit with the last element.",55,null],[11,"insert","","Inserts an element at position `index` within the vector, shifting all\nelements after it to the right.",55,null],[11,"remove","","Removes and returns the element at position `index` within the vector,\nshifting all elements after it to the left.",55,null],[11,"retain","","Retains only the elements specified by the predicate.",55,null],[11,"push","","Appends an element to the back of a collection.",55,null],[11,"pop","","Removes the last element from a vector and returns it, or `None` if it\nis empty.",55,null],[11,"append","","Moves all the elements of `other` into `Self`, leaving `other` empty.",55,null],[11,"drain","","Create a draining iterator that removes the specified range in the vector\nand yields the removed items.",55,null],[11,"clear","","Clears the vector, removing all values.",55,null],[11,"len","","Returns the number of elements in the vector.",55,null],[11,"is_empty","","Returns `true` if the vector contains no elements.",55,null],[11,"split_off","","Splits the collection into two at the given index.",55,null],[11,"resize","","Resizes the `Vec` in-place so that `len()` is equal to `new_len`.",55,null],[11,"extend_from_slice","","Appends all elements in a slice to the `Vec`.",55,null],[11,"dedup","","Removes consecutive repeated elements in the vector.",55,null],[11,"clone","","",55,null],[11,"clone_from","","",55,null],[11,"hash","","",55,null],[11,"index","","",55,null],[11,"index_mut","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"index_mut","","",55,null],[11,"deref","","",55,null],[11,"deref_mut","","",55,null],[11,"from_iter","","",55,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"into_iter","","Creates a consuming iterator, that is, one that moves each value out of\nthe vector (from start to end). The vector cannot be used after calling\nthis.",55,null],[11,"extend","","",55,null],[11,"extend","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","collections::borrow","",81,null],[11,"ne","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"eq","","",81,null],[11,"ne","","",81,null],[11,"eq","collections::vec","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"eq","","",55,null],[11,"ne","","",55,null],[11,"partial_cmp","","",55,null],[11,"cmp","","",55,null],[11,"drop","","",55,null],[11,"default","","",55,{"inputs":[],"output":{"name":"vec"}}],[11,"fmt","","",55,null],[11,"as_ref","","",55,null],[11,"as_mut","","",55,null],[11,"as_ref","","",55,null],[11,"as_mut","","",55,null],[11,"from","","",55,null],[11,"from","","",55,{"inputs":[{"name":"str"}],"output":{"name":"vec"}}],[11,"from","collections::borrow","",81,null],[11,"from","","",81,{"inputs":[{"name":"vec"}],"output":{"name":"cow"}}],[11,"from_iter","","",81,{"inputs":[{"name":"i"}],"output":{"name":"cow"}}],[11,"next","collections::vec","",275,null],[11,"size_hint","","",275,null],[11,"count","","",275,null],[11,"next_back","","",275,null],[11,"clone","","",275,null],[11,"drop","","",275,null],[11,"next","","",276,null],[11,"size_hint","","",276,null],[11,"next_back","","",276,null],[11,"drop","","",276,null],[11,"clone","core::raw","",277,null],[11,"clone","","",278,null],[11,"eq","core::ops","",279,null],[11,"clone","","",279,null],[11,"fmt","","",279,null],[11,"eq","","",280,null],[11,"ne","","",280,null],[11,"clone","","",280,null],[11,"fmt","","",280,null],[11,"contains","","# Examples",280,null],[11,"eq","","",281,null],[11,"ne","","",281,null],[11,"clone","","",281,null],[11,"fmt","","",281,null],[11,"contains","","# Examples",281,null],[11,"eq","","",282,null],[11,"ne","","",282,null],[11,"clone","","",282,null],[11,"fmt","","",282,null],[11,"contains","","# Examples",282,null],[11,"eq","","",283,null],[11,"ne","","",283,null],[11,"clone","","",283,null],[11,"fmt","","",283,null],[11,"from","","",283,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",283,null],[11,"eq","","",284,null],[11,"ne","","",284,null],[11,"clone","","",284,null],[11,"fmt","","",284,null],[11,"contains","","# Examples",284,null],[11,"fmt","cymbalum","",285,null],[11,"fmt","","",285,null],[11,"is","","Returns true if the boxed type is the same as `T`",285,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",285,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",285,null],[11,"is","","Forwards to the method defined on the type `Any`.",285,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",285,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",285,null],[11,"hash","core::any","",286,null],[11,"fmt","","",286,null],[11,"eq","","",286,null],[11,"ne","","",286,null],[11,"clone","","",286,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",286,{"inputs":[],"output":{"name":"typeid"}}],[11,"hash","core::result","",287,null],[11,"fmt","","",287,null],[11,"cmp","","",287,null],[11,"partial_cmp","","",287,null],[11,"lt","","",287,null],[11,"le","","",287,null],[11,"gt","","",287,null],[11,"ge","","",287,null],[11,"eq","","",287,null],[11,"ne","","",287,null],[11,"clone","","",287,null],[11,"is_ok","","Returns true if the result is `Ok`",287,null],[11,"is_err","","Returns true if the result is `Err`",287,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",287,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",287,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",287,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",287,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",287,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",287,null],[11,"iter","","Returns an iterator over the possibly contained value.",287,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",287,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",287,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",287,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",287,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",287,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",287,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",287,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",287,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",287,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",287,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",287,null],[11,"fmt","","",288,null],[11,"next","","",288,null],[11,"size_hint","","",288,null],[11,"next_back","","",288,null],[11,"clone","","",288,null],[11,"fmt","","",289,null],[11,"next","","",289,null],[11,"size_hint","","",289,null],[11,"next_back","","",289,null],[11,"fmt","","",290,null],[11,"next","","",290,null],[11,"size_hint","","",290,null],[11,"next_back","","",290,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",287,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"next","rustc_unicode::char","",291,null],[11,"next","","",292,null],[11,"clone","","",293,null],[11,"eq","","",18,null],[11,"ne","","",18,null],[11,"clone","","",18,null],[11,"fmt","","",18,null],[11,"next","","",293,null],[11,"size_hint","","",293,null],[11,"unpaired_surrogate","","Returns the unpaired surrogate which caused this error.",18,null],[11,"fmt","","",18,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",294,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",294,null],[11,"set","","Sets the contained value.",294,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",294,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",294,null],[11,"clone","","",294,null],[11,"default","","",294,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",294,null],[11,"partial_cmp","","",294,null],[11,"lt","","",294,null],[11,"le","","",294,null],[11,"gt","","",294,null],[11,"ge","","",294,null],[11,"cmp","","",294,null],[11,"fmt","","",295,null],[11,"eq","","",295,null],[11,"clone","","",295,null],[11,"new","","Creates a new `RefCell` containing `value`.",296,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",296,null],[11,"borrow_state","","Query the current state of this `RefCell`",296,null],[11,"borrow","","Immutably borrows the wrapped value.",296,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",296,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",296,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",296,null],[11,"clone","","",296,null],[11,"default","","",296,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",296,null],[11,"partial_cmp","","",296,null],[11,"lt","","",296,null],[11,"le","","",296,null],[11,"gt","","",296,null],[11,"ge","","",296,null],[11,"cmp","","",296,null],[11,"deref","","",297,null],[11,"clone","","Copies a `Ref`.",297,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",297,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",297,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",298,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",298,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",298,null],[11,"deref_mut","","",298,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",299,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",299,null],[11,"get","","Gets a mutable pointer to the wrapped value.",299,null],[11,"default","","",299,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::iter::range","",300,null],[11,"clone","","",300,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",281,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",280,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",283,null],[11,"next","core::iter::range","",300,null],[11,"size_hint","","",300,null],[11,"next","","",300,null],[11,"size_hint","","",300,null],[11,"next","","",300,null],[11,"size_hint","","",300,null],[11,"next","core::ops","",280,null],[11,"size_hint","","",280,null],[11,"next_back","","",280,null],[11,"next","","",281,null],[11,"next","","",283,null],[11,"size_hint","","",283,null],[11,"next_back","","",283,null],[11,"fmt","core::iter::sources","",301,null],[11,"clone","","",301,null],[11,"next","","",301,null],[11,"size_hint","","",301,null],[11,"next_back","","",301,null],[11,"fmt","","",302,null],[11,"next","","",302,null],[11,"size_hint","","",302,null],[11,"next_back","","",302,null],[11,"len","","",302,null],[11,"clone","","",302,null],[11,"default","","",302,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",303,null],[11,"clone","","",303,null],[11,"next","","",303,null],[11,"size_hint","","",303,null],[11,"next_back","","",303,null],[11,"len","","",303,null],[11,"fmt","core::iter","",304,null],[11,"clone","","",304,null],[11,"next","","",304,null],[11,"size_hint","","",304,null],[11,"next_back","","",304,null],[11,"fmt","","",305,null],[11,"clone","","",305,null],[11,"next","","",305,null],[11,"size_hint","","",305,null],[11,"next_back","","",305,null],[11,"fmt","","",306,null],[11,"clone","","",306,null],[11,"next","","",306,null],[11,"size_hint","","",306,null],[11,"fmt","","",307,null],[11,"clone","","",307,null],[11,"next","","",307,null],[11,"count","","",307,null],[11,"nth","","",307,null],[11,"find","","",307,null],[11,"last","","",307,null],[11,"size_hint","","",307,null],[11,"next_back","","",307,null],[11,"fmt","","",308,null],[11,"clone","","",308,null],[11,"next","","",308,null],[11,"size_hint","","",308,null],[11,"next_back","","",308,null],[11,"clone","","",309,null],[11,"fmt","","",309,null],[11,"next","","",309,null],[11,"size_hint","","",309,null],[11,"next_back","","",309,null],[11,"clone","","",310,null],[11,"fmt","","",310,null],[11,"next","","",310,null],[11,"size_hint","","",310,null],[11,"next_back","","",310,null],[11,"clone","","",311,null],[11,"fmt","","",311,null],[11,"next","","",311,null],[11,"size_hint","","",311,null],[11,"next_back","","",311,null],[11,"fmt","","",312,null],[11,"clone","","",312,null],[11,"next","","# Overflow Behavior",312,null],[11,"size_hint","","",312,null],[11,"nth","","",312,null],[11,"count","","",312,null],[11,"next_back","","",312,null],[11,"fmt","","",313,null],[11,"clone","","",313,null],[11,"next","","",313,null],[11,"count","","",313,null],[11,"nth","","",313,null],[11,"last","","",313,null],[11,"size_hint","","",313,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",313,null],[11,"is_empty","","Checks if the iterator has finished iterating.",313,null],[11,"clone","","",314,null],[11,"fmt","","",314,null],[11,"next","","",314,null],[11,"size_hint","","",314,null],[11,"clone","","",315,null],[11,"fmt","","",315,null],[11,"next","","",315,null],[11,"size_hint","","",315,null],[11,"fmt","","",316,null],[11,"clone","","",316,null],[11,"next","","",316,null],[11,"nth","","",316,null],[11,"count","","",316,null],[11,"last","","",316,null],[11,"size_hint","","",316,null],[11,"next_back","","",316,null],[11,"fmt","","",317,null],[11,"clone","","",317,null],[11,"next","","",317,null],[11,"nth","","",317,null],[11,"size_hint","","",317,null],[11,"clone","","",318,null],[11,"fmt","","",318,null],[11,"next","","",318,null],[11,"size_hint","","",318,null],[11,"clone","","",319,null],[11,"fmt","","",319,null],[11,"next","","",319,null],[11,"size_hint","","",319,null],[11,"next_back","","",319,null],[11,"fmt","","",320,null],[11,"clone","","",320,null],[11,"next","","",320,null],[11,"nth","","",320,null],[11,"last","","",320,null],[11,"count","","",320,null],[11,"size_hint","","",320,null],[11,"next_back","","",320,null],[11,"clone","","",321,null],[11,"fmt","","",321,null],[11,"next","","",321,null],[11,"size_hint","","",321,null],[11,"next_back","","",321,null],[11,"hash","core::marker","",322,null],[11,"eq","","",322,null],[11,"partial_cmp","","",322,null],[11,"cmp","","",322,null],[11,"clone","","",322,null],[11,"default","","",322,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"clone","collections::str","",323,null],[11,"next","","",323,null],[11,"size_hint","","",323,null],[11,"borrow","collections::string","",82,null],[11,"fmt","core::str::pattern","",324,null],[11,"eq","","",324,null],[11,"ne","","",324,null],[11,"clone","","",324,null],[11,"fmt","","",325,null],[11,"clone","","",325,null],[11,"haystack","","",325,null],[11,"next","","",325,null],[11,"next_match","","",325,null],[11,"next_reject","","",325,null],[11,"next_back","","",325,null],[11,"next_match_back","","",325,null],[11,"next_reject_back","","",325,null],[11,"fmt","","",326,null],[11,"clone","","",326,null],[11,"haystack","","",326,null],[11,"next","","",326,null],[11,"next_match","","",326,null],[11,"next_reject","","",326,null],[11,"next_back","","",326,null],[11,"next_match_back","","",326,null],[11,"next_reject_back","","",326,null],[11,"clone","","",327,null],[11,"fmt","","",327,null],[11,"haystack","","",327,null],[11,"next","","",327,null],[11,"next_match","","",327,null],[11,"next_reject","","",327,null],[11,"next_back","","",327,null],[11,"next_match_back","","",327,null],[11,"next_reject_back","","",327,null],[11,"fmt","","",328,null],[11,"clone","","",328,null],[11,"haystack","","",328,null],[11,"next","","",328,null],[11,"next_match","","",328,null],[11,"next_back","","",328,null],[11,"next_match_back","","",328,null],[11,"hash","core::cmp","",329,null],[11,"fmt","","",329,null],[11,"eq","","",329,null],[11,"clone","","",329,null],[11,"reverse","","Reverse the `Ordering`.",329,null],[11,"cmp","","",329,null],[11,"partial_cmp","","",329,null],[11,"stdout","cymbalum","Initialize the global logger to use the standard output stream.",330,{"inputs":[],"output":null}],[11,"stdout_at_level","","Initialize the global logger to use the standard output stream, with\nthe maximum log level of `level`",330,{"inputs":[{"name":"loglevel"}],"output":null}],[11,"stderr","","Initialize the global logger to use the standard error stream.",330,{"inputs":[],"output":null}],[11,"stderr_at_level","","Initialize the global logger to use the standard error stream, with\nthe maximum log level of `level`",330,{"inputs":[{"name":"loglevel"}],"output":null}],[11,"file","","Initialize the global logger to write to the file at `path`, creating\nthe file if needed. If the file already exists, it is not removed.",330,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"file_at_level","","Initialize the global logger to write to the file at `path`, creating\nthe file if needed. If the file already exists, it is not removed. The\nmaximum log level is set to `level`.",330,{"inputs":[{"name":"p"},{"name":"loglevel"}],"output":{"name":"result"}}],[11,"target","","Get the target for log events",330,{"inputs":[],"output":{"name":"target"}}],[11,"is_screen","","Is the log events target the screen?",330,{"inputs":[],"output":{"name":"bool"}}],[11,"is_file","","Is the log events target a file?",330,{"inputs":[],"output":{"name":"bool"}}],[11,"enabled","","",330,null],[11,"log","","",330,null],[0,"units","","This module allow to convert from and to the internal unit system.",null,null],[4,"ParseError","cymbalum::units","Possible error causes when parsing an unit string.",null,null],[13,"Power","","Error while parsing a power in `x^y` expressions",331,null],[13,"Value","","Error while parsing the value part of an unit string",331,null],[13,"ParenthesesMismatch","","Parentheses are not balanced in this unit",331,null],[13,"NotFound","","This unit was not found",331,null],[12,"unit","cymbalum::units::ParseError","The unit that created this error",331,null],[13,"MalformedExpr","cymbalum::units","Any other error",331,null],[5,"from","","Convert the numeric value `val` from the unit `unit` to the internal unit.",null,{"inputs":[{"name":"f64"},{"name":"str"}],"output":{"name":"result"}}],[5,"from_str","","Parse the string `val` and convert it to the corresponding internal unit",null,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[5,"to","","Convert the numeric value `val` (in internal units) to the unit `unit`.",null,{"inputs":[{"name":"f64"},{"name":"str"}],"output":{"name":"result"}}],[11,"new","collections::btree::map","Makes a new empty BTreeMap with a reasonable choice for B.",332,{"inputs":[],"output":{"name":"btreemap"}}],[11,"clear","","Clears the map, removing all values.",332,null],[11,"get","","Returns a reference to the value corresponding to the key.",332,null],[11,"contains_key","","Returns true if the map contains a value for the specified key.",332,null],[11,"get_mut","","Returns a mutable reference to the value corresponding to the key.",332,null],[11,"insert","","Inserts a key-value pair into the map.",332,null],[11,"remove","","Removes a key from the map, returning the value at the key if the key\nwas previously in the map.",332,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",332,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",332,null],[11,"range_mut","","Constructs a mutable double-ended iterator over a sub-range of elements in the map, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",332,null],[11,"entry","","Gets the given key&#39;s corresponding entry in the map for in-place manipulation.",332,null],[11,"iter","","Gets an iterator over the entries of the map, sorted by key.",332,null],[11,"iter_mut","","Gets a mutable iterator over the entries of the map, sorted by key.",332,null],[11,"keys","","Gets an iterator over the keys of the map, in sorted order.",332,null],[11,"values","","Gets an iterator over the values of the map, in order by key.",332,null],[11,"values_mut","","Gets a mutable iterator over the values of the map, in order by key.",332,null],[11,"len","","Returns the number of elements in the map.",332,null],[11,"is_empty","","Returns true if the map contains no elements.",332,null],[11,"drop","","",332,null],[11,"clone","","",332,null],[11,"next","","",333,null],[11,"size_hint","","",333,null],[11,"next_back","","",333,null],[11,"len","","",333,null],[11,"clone","","",333,null],[11,"next","","",334,null],[11,"size_hint","","",334,null],[11,"next_back","","",334,null],[11,"len","","",334,null],[11,"into_iter","","",332,null],[11,"drop","","",335,null],[11,"next","","",335,null],[11,"size_hint","","",335,null],[11,"next_back","","",335,null],[11,"len","","",335,null],[11,"next","","",336,null],[11,"size_hint","","",336,null],[11,"next_back","","",336,null],[11,"len","","",336,null],[11,"clone","","",336,null],[11,"next","","",337,null],[11,"size_hint","","",337,null],[11,"next_back","","",337,null],[11,"len","","",337,null],[11,"clone","","",337,null],[11,"next","","",338,null],[11,"next","","",339,null],[11,"size_hint","","",339,null],[11,"next_back","","",339,null],[11,"len","","",339,null],[11,"next_back","","",338,null],[11,"clone","","",338,null],[11,"next","","",340,null],[11,"next_back","","",340,null],[11,"from_iter","","",332,{"inputs":[{"name":"t"}],"output":{"name":"btreemap"}}],[11,"extend","","",332,null],[11,"extend","","",332,null],[11,"hash","","",332,null],[11,"default","","",332,{"inputs":[],"output":{"name":"btreemap"}}],[11,"eq","","",332,null],[11,"partial_cmp","","",332,null],[11,"cmp","","",332,null],[11,"fmt","","",332,null],[11,"index","","",332,null],[11,"or_insert","","Ensures a value is in the entry by inserting the default if empty, and returns\na mutable reference to the value in the entry.",341,null],[11,"or_insert_with","","Ensures a value is in the entry by inserting the result of the default function if empty,\nand returns a mutable reference to the value in the entry.",341,null],[11,"key","","Returns a reference to this entry&#39;s key.",341,null],[11,"key","","Gets a reference to the key that would be used when inserting a value\nthrough the VacantEntry.",342,null],[11,"insert","","Sets the value of the entry with the VacantEntry&#39;s key,\nand returns a mutable reference to it.",342,null],[11,"key","","Gets a reference to the key in the entry.",343,null],[11,"get","","Gets a reference to the value in the entry.",343,null],[11,"get_mut","","Gets a mutable reference to the value in the entry.",343,null],[11,"into_mut","","Converts the entry into a mutable reference to its value.",343,null],[11,"insert","","Sets the value of the entry with the OccupiedEntry&#39;s key,\nand returns the entry&#39;s old value.",343,null],[11,"remove","","Takes the value of the entry out of the map, and returns it.",343,null],[11,"partial_cmp","collections::btree::set","",344,null],[11,"lt","","",344,null],[11,"le","","",344,null],[11,"gt","","",344,null],[11,"ge","","",344,null],[11,"cmp","","",344,null],[11,"eq","","",344,null],[11,"ne","","",344,null],[11,"hash","","",344,null],[11,"clone","","",344,null],[11,"new","","Makes a new BTreeSet with a reasonable choice of B.",344,{"inputs":[],"output":{"name":"btreeset"}}],[11,"iter","","Gets an iterator over the BTreeSet&#39;s contents.",344,null],[11,"range","","Constructs a double-ended iterator over a sub-range of elements in the set, starting\nat min, and ending at max. If min is `Unbounded`, then it will be treated as &quot;negative\ninfinity&quot;, and if max is `Unbounded`, then it will be treated as &quot;positive infinity&quot;.\nThus range(Unbounded, Unbounded) will yield the whole collection.",344,null],[11,"difference","","Visits the values representing the difference, in ascending order.",344,null],[11,"symmetric_difference","","Visits the values representing the symmetric difference, in ascending order.",344,null],[11,"intersection","","Visits the values representing the intersection, in ascending order.",344,null],[11,"union","","Visits the values representing the union, in ascending order.",344,null],[11,"len","","Returns the number of elements in the set.",344,null],[11,"is_empty","","Returns true if the set contains no elements.",344,null],[11,"clear","","Clears the set, removing all values.",344,null],[11,"contains","","Returns `true` if the set contains a value.",344,null],[11,"get","","Returns a reference to the value in the set, if any, that is equal to the given value.",344,null],[11,"is_disjoint","","Returns `true` if the set has no elements in common with `other`.\nThis is equivalent to checking for an empty intersection.",344,null],[11,"is_subset","","Returns `true` if the set is a subset of another.",344,null],[11,"is_superset","","Returns `true` if the set is a superset of another.",344,null],[11,"insert","","Adds a value to the set.",344,null],[11,"replace","","Adds a value to the set, replacing the existing value, if any, that is equal to the given\none. Returns the replaced value.",344,null],[11,"remove","","Removes a value from the set. Returns `true` if the value was\npresent in the set.",344,null],[11,"take","","Removes and returns the value in the set, if any, that is equal to the given one.",344,null],[11,"append","","Moves all elements from `other` into `Self`, leaving `other` empty.",344,null],[11,"from_iter","","",344,{"inputs":[{"name":"i"}],"output":{"name":"btreeset"}}],[11,"into_iter","","Gets an iterator for moving out the BtreeSet&#39;s contents.",344,null],[11,"extend","","",344,null],[11,"extend","","",344,null],[11,"default","","",344,{"inputs":[],"output":{"name":"btreeset"}}],[11,"fmt","","",344,null],[11,"clone","","",345,null],[11,"next","","",345,null],[11,"size_hint","","",345,null],[11,"next_back","","",345,null],[11,"len","","",345,null],[11,"next","","",346,null],[11,"size_hint","","",346,null],[11,"next_back","","",346,null],[11,"len","","",346,null],[11,"clone","","",347,null],[11,"next","","",347,null],[11,"next_back","","",347,null],[11,"clone","","",348,null],[11,"next","","",348,null],[11,"size_hint","","",348,null],[11,"clone","","",349,null],[11,"next","","",349,null],[11,"size_hint","","",349,null],[11,"clone","","",350,null],[11,"next","","",350,null],[11,"size_hint","","",350,null],[11,"clone","","",351,null],[11,"next","","",351,null],[11,"size_hint","","",351,null],[11,"hash","collections::enum_set","",352,null],[11,"cmp","","",352,null],[11,"partial_cmp","","",352,null],[11,"lt","","",352,null],[11,"le","","",352,null],[11,"gt","","",352,null],[11,"ge","","",352,null],[11,"eq","","",352,null],[11,"ne","","",352,null],[11,"clone","","",352,null],[11,"fmt","","",352,null],[11,"new","","Returns an empty `EnumSet`.",352,{"inputs":[],"output":{"name":"enumset"}}],[11,"len","","Returns the number of elements in the given `EnumSet`.",352,null],[11,"is_empty","","Returns true if the `EnumSet` is empty.",352,null],[11,"clear","","",352,null],[11,"is_disjoint","","Returns `false` if the `EnumSet` contains any enum of the given `EnumSet`.",352,null],[11,"is_superset","","Returns `true` if a given `EnumSet` is included in this `EnumSet`.",352,null],[11,"is_subset","","Returns `true` if this `EnumSet` is included in the given `EnumSet`.",352,null],[11,"union","","Returns the union of both `EnumSets`.",352,null],[11,"intersection","","Returns the intersection of both `EnumSets`.",352,null],[11,"insert","","Adds an enum to the `EnumSet`, and returns `true` if it wasn&#39;t there before",352,null],[11,"remove","","Removes an enum from the EnumSet",352,null],[11,"contains","","Returns `true` if an `EnumSet` contains a given enum.",352,null],[11,"iter","","Returns an iterator over an `EnumSet`.",352,null],[11,"sub","","",352,null],[11,"bitor","","",352,null],[11,"bitand","","",352,null],[11,"bitxor","","",352,null],[11,"clone","","",353,null],[11,"next","","",353,null],[11,"size_hint","","",353,null],[11,"from_iter","","",352,{"inputs":[{"name":"i"}],"output":{"name":"enumset"}}],[11,"extend","","",352,null],[11,"extend","","",352,null],[11,"start","core::ops","",281,null],[11,"end","","",282,null],[11,"start","","",280,null],[11,"end","","",280,null],[11,"eq","collections","",354,null],[11,"ne","","",354,null],[11,"hash","","",354,null],[11,"fmt","","",354,null],[11,"clone","","",354,null],[11,"fmt","cymbalum::units","",331,null],[11,"from","","",331,{"inputs":[{"name":"parseinterror"}],"output":{"name":"parseerror"}}],[11,"from","","",331,{"inputs":[{"name":"parsefloaterror"}],"output":{"name":"parseerror"}}],[11,"fmt","","",331,null],[11,"description","","",331,null],[0,"constants","cymbalum","Usefull physical constants, expressed in the internal unit system.",null,null],[17,"K_BOLTZMANN","cymbalum::constants","Boltzmann constant",null,null],[17,"BOHR_RADIUS","","Bohr radius",null,null],[17,"NA","","Avogadro number",null,null],[17,"ELCC","","4*pi*epsilon0",null,null],[0,"types","cymbalum","Some basic types used in all the other modules",null,null],[11,"fmt","num_traits","",355,null],[11,"fmt","","",356,null],[8,"One","cymbalum::types","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",357,{"inputs":[],"output":{"name":"self"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",358,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",358,null],[3,"Vector3D","","A simple 3-dimensional vector type, storing three `f64`.",null,null],[3,"Matrix3","","3x3 dimensional matrix type, implementing all usual operations",null,null],[3,"Complex","","Complex number, only implemented for f64 real and imag parts",null,null],[3,"Array2","","Two dimmensional array, based on ndarray.",null,null],[3,"Array3","","Three dimmensional array, based on ndarray",null,null],[11,"fmt","","",359,null],[11,"clone","","",359,null],[11,"new","","Create a new `Vector3D` with components `x`, `y`, `z`",359,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"vector3d"}}],[11,"norm2","","Return the squared euclidean norm of a Vector3D",359,null],[11,"norm","","Return the euclidean norm of a Vector3D",359,null],[11,"normalized","","Normalize a Vector3D",359,null],[11,"tensorial","","Tensorial product between vectors",359,null],[11,"add","","",359,null],[11,"add","","",359,null],[11,"add","","",359,null],[11,"add_assign","","",359,null],[11,"add_assign","","",359,null],[11,"add_assign","","",359,null],[11,"sub","","",359,null],[11,"sub","","",359,null],[11,"sub","","",359,null],[11,"sub_assign","","",359,null],[11,"sub_assign","","",359,null],[11,"sub_assign","","",359,null],[11,"mul","","",359,null],[11,"mul","","",359,null],[11,"mul","","",359,null],[11,"bitxor","","",359,null],[11,"bitxor","","",359,null],[11,"bitxor","","",359,null],[11,"mul","","",359,null],[11,"mul_assign","","",359,null],[11,"mul_assign","","",359,null],[11,"mul_assign","","",359,null],[11,"div","","",359,null],[11,"div_assign","","",359,null],[11,"div_assign","","",359,null],[11,"div_assign","","",359,null],[11,"neg","","",359,null],[11,"eq","","",359,null],[11,"index","","",359,null],[11,"index_mut","","",359,null],[11,"zero","","",359,{"inputs":[],"output":{"name":"vector3d"}}],[11,"is_zero","","",359,null],[11,"eq","","",360,null],[11,"ne","","",360,null],[11,"fmt","","",360,null],[11,"clone","","",360,null],[11,"new","","Create a new `Matrix3` specifying all its components",360,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"matrix3"}}],[11,"trace","","Compute the trace of the matrix",360,null],[11,"inverse","","Computes the inverse of a matrix, which is assumed to exist",360,null],[11,"index","","",360,null],[11,"index","","",360,null],[11,"index_mut","","",360,null],[11,"index_mut","","",360,null],[11,"add","","",360,null],[11,"add","","",360,null],[11,"add","","",360,null],[11,"add_assign","","",360,null],[11,"add_assign","","",360,null],[11,"add_assign","","",360,null],[11,"sub","","",360,null],[11,"sub","","",360,null],[11,"sub","","",360,null],[11,"sub_assign","","",360,null],[11,"sub_assign","","",360,null],[11,"sub_assign","","",360,null],[11,"mul","","",360,null],[11,"mul","","",360,null],[11,"mul","","",360,null],[11,"mul_assign","","",360,null],[11,"mul_assign","","",360,null],[11,"mul_assign","","",360,null],[11,"mul","","",360,null],[11,"mul","","",360,null],[11,"mul","","",360,null],[11,"mul","","",360,null],[11,"mul_assign","","",360,null],[11,"mul_assign","","",360,null],[11,"mul_assign","","",360,null],[11,"div","","",360,null],[11,"div_assign","","",360,null],[11,"div_assign","","",360,null],[11,"div_assign","","",360,null],[11,"zero","","",360,{"inputs":[],"output":{"name":"matrix3"}}],[11,"is_zero","","",360,null],[11,"one","","Create an identity matrix",360,{"inputs":[],"output":{"name":"matrix3"}}],[11,"default","","",361,{"inputs":[],"output":{"name":"complex"}}],[11,"eq","","",361,null],[11,"ne","","",361,null],[11,"clone","","",361,null],[11,"fmt","","",361,null],[11,"polar","","Create a new `Complex` from a norm `r` and a phase `phi` in radians.",361,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"complex"}}],[11,"cartesian","","Create a complex from cartesian coordinates",361,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"complex"}}],[11,"real","","Get the real part of the complex",361,null],[11,"imag","","Get the imaginary part of the complex",361,null],[11,"phase","","Get the phase of the complex in the [-π, π) interval",361,null],[11,"norm","","Get the norm of the complex",361,null],[11,"norm2","","Get the square of the norm if this complex",361,null],[11,"conj","","Get the conjugate of the complex",361,null],[11,"add","","",361,null],[11,"sub","","",361,null],[11,"neg","","",361,null],[11,"mul","","",361,null],[11,"mul","","",361,null],[11,"div","","",361,null],[11,"div","","",361,null],[11,"zero","","",361,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",361,null],[11,"one","","",361,{"inputs":[],"output":{"name":"complex"}}],[11,"clone","","",362,null],[11,"fmt","","",362,null],[11,"zeros","","Create a new `Array2` of the specified `size` filled with the\n`Zero::zero` return value.",362,null],[11,"resize_if_different","","Resize the array if the current size is not `size`, and fill the\nnew array with zeros.",362,null],[11,"shape","","Get the shape of the array",362,null],[11,"assign","","Assign the given scalar to all entry in this array",362,null],[11,"default","","Create a new `Array2` of the specified `size` filled with the\n`Default::default` return value.",362,null],[11,"eq","","",362,null],[11,"index","","",362,null],[11,"index_mut","","",362,null],[11,"clone","","",363,null],[11,"fmt","","",363,null],[11,"zeros","","Create a new `Array3` of the specified `size` filled with the\n`Zero::zero` return value.",363,null],[11,"resize_if_different","","Resize the array if the current size is not `size`, and fill the\nnew array with zeros.",363,null],[11,"shape","","Get the shape of the array",363,null],[11,"assign","","Assign the given scalar to all entry in this array",363,null],[11,"default","","Create a new `Array3` of the specified `size` filled with the\n`Default::default` return value.",363,null],[11,"index","","",363,null],[11,"index_mut","","",363,null],[0,"potentials","cymbalum","Interaction potentials for energy and forces computations",null,null],[3,"NullPotential","cymbalum::potentials","The `NullPotential` always returns 0 as energy and force.",null,null],[3,"LennardJones","","Lennard-Jones potential.",null,null],[12,"sigma","","Distance constant of the Lennard-Jones potential",364,null],[12,"epsilon","","Energy constant of the Lennard-Jones potential",364,null],[3,"Harmonic","","Harmonic potential.",null,null],[12,"k","","Spring constant",365,null],[12,"x0","","Equilibrium value",365,null],[3,"CosineHarmonic","","Cosine harmonic potential.",null,null],[3,"Torsion","","Torsion potential.",null,null],[12,"k","","Force constant",366,null],[12,"delta","","Equilibrium value",366,null],[12,"n","","Multiplicity of the potential",366,null],[3,"TableComputation","","Computation of a potential using tabulated values.",null,null],[3,"CutoffComputation","","Computation of a potential with a cutoff.",null,null],[3,"RestrictionInfo","","Restriction information attached to a pair of Particles in a System",null,null],[12,"excluded","","Is this pair excluded",367,null],[12,"scaling","","Scaling for this restrictions",367,null],[3,"Wolf","","Wolf summation for coulombic interactions.",null,null],[3,"Ewald","","Ewald summation of the coulombic interactions.",null,null],[4,"PairRestriction","","Possible restrictions on the pair interactions.",null,null],[13,"None","","No pair should be excluded",368,null],[13,"IntraMolecular","","Only apply the interaction to intra-molecular pairs",368,null],[13,"InterMolecular","","Only apply the interaction to inter-molecular pairs",368,null],[13,"Exclude12","","Only apply the interaction to pairs which are not in 1-2 position",368,null],[13,"Exclude13","","Only apply the interaction to pairs which are not in 1-2 or 1-3 position",368,null],[13,"Exclude14","","Only apply the interaction to pairs which are not in 1-2, 1-3 or 1-4 position",368,null],[13,"Scale14","","Only apply the interaction to pairs which are not in 1-2 or 1-3 position,\nand scale the interaction for pairs in 1-4 position",368,null],[12,"scaling","cymbalum::potentials::PairRestriction","The scaling factor for interactions in 1-4 position",368,null],[11,"clone","alloc::boxed","",9,null],[11,"clone","","",9,null],[11,"clone","","",9,null],[11,"clone","","",9,null],[11,"clone","cymbalum::potentials","",369,null],[11,"energy","","",369,null],[11,"force","","",369,null],[11,"clone","","",364,null],[11,"energy","","",364,null],[11,"force","","",364,null],[11,"clone","","",365,null],[11,"energy","","",365,null],[11,"force","","",365,null],[11,"clone","","",370,null],[11,"new","","Create a new `CosineHarmonic` potentials, with elastic constant of `k`\nand equilibrium value of `x0`",370,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"cosineharmonic"}}],[11,"energy","","",370,null],[11,"force","","",370,null],[11,"clone","","",366,null],[11,"energy","","",366,null],[11,"force","","",366,null],[11,"clone","","",371,null],[11,"new","","Create a new `CutoffComputation` for `potential`, with cutoff distance\nof `cutoff`.",371,{"inputs":[{"name":"box"},{"name":"f64"}],"output":{"name":"cutoffcomputation"}}],[11,"compute_energy","","",371,null],[11,"compute_force","","",371,null],[11,"clone","","",372,null],[11,"new","","Create a new `TableComputation` for `potential`, with `size` points and\na maximum value of `max`.",372,{"inputs":[{"name":"box"},{"name":"usize"},{"name":"f64"}],"output":{"name":"tablecomputation"}}],[11,"compute_energy","","",372,null],[11,"compute_force","","",372,null],[11,"fmt","","",368,null],[11,"clone","","",368,null],[11,"fmt","","",367,null],[11,"clone","","",367,null],[11,"informations","","Get the restrictions information for the pair `(i, j)` in the `system`",368,null],[11,"clone","","",373,null],[11,"new","","Create a new Wolf summation, using a real-space cutoff of `cutoff`.",373,{"inputs":[{"name":"f64"}],"output":{"name":"wolf"}}],[11,"energy","","",373,null],[11,"forces","","",373,null],[11,"virial","","",373,null],[11,"set_restriction","","",373,null],[11,"fmt","","",374,null],[11,"clone","","",374,null],[11,"new","","Create an Ewald summation using the `rc` cutoff radius in real space,\nand `kmax` points in k-space (Fourier space).",374,{"inputs":[{"name":"f64"},{"name":"usize"}],"output":{"name":"ewald"}}],[11,"energy","","",374,null],[11,"forces","","",374,null],[11,"virial","","",374,null],[11,"set_restriction","","",374,null],[11,"clone","alloc::boxed","",9,null],[11,"clone","","",9,null],[8,"PotentialFunction","cymbalum::potentials","A set of two parametric functions which takes a single scalar variable and\nreturn the corresponding energy or norm of the force.",null,null],[10,"energy","","Get the energy corresponding to the variable `x`",375,null],[10,"force","","Get the force norm corresponding to the variable `x`",375,null],[8,"PairPotential","","Potential that can be used for two body interactions, either covalent or\nnon-covalent.",null,null],[11,"virial","","Compute the virial contribution corresponding to the distance `r`\nbetween the particles",376,null],[8,"AnglePotential","","Potential that can be used for molecular angles.",null,null],[8,"DihedralPotential","","Potential that can be used for molecular dihedral angles.",null,null],[8,"Computation","","Methods for energy and forces computation.",null,null],[10,"compute_energy","","Compute the energy value at `r`",377,null],[10,"compute_force","","Compute the force value at `r`",377,null],[8,"GlobalPotential","","Potential acting on the whole system at once.",null,null],[10,"energy","","Compute the energetic contribution of this potential",378,null],[10,"forces","","Compute the force contribution of this potential. This function should\nreturn a vector containing the force acting on each particle in the\nsystem.",378,null],[10,"virial","","Compute the virial contribution of this potential",378,null],[8,"CoulombicPotential","","Electrostatic potential solver.",null,null],[10,"set_restriction","","Set the restriction scheme to use to `restriction`. All future call to\n`energy`, `force` or `virial` should use this restriction.",379,null],[0,"system","cymbalum","The `system` module provide a way to store data about a simulated system.\nThese systems are represented by an `System` instance, made of a list of\n`Particle`, an enclosing `UnitCell` and some interactions.",null,null],[3,"PeriodicTable","cymbalum::system","The `PeriodicTable` struct give access to elements information, and give a\nway to register new elements in the list.",null,null],[3,"ElementData","","Data about one &quot;extended&quot; chemical element.",null,null],[12,"symbol","","The symbol is used to identify the element",380,null],[12,"name","","The element full name",380,null],[12,"mass","","The element mass, in internal units",380,null],[12,"covalent","","The covalent radius, in internal units",380,null],[12,"vdw","","The Van der Waals radius, in internal units",380,null],[3,"Particle","","The Particle type hold basic data about a particle in the system. It is self\ncontained, so that it will be easy to send data between parrallels\nprocesses.",null,null],[12,"kind","","Particle kind, an index for potentials lookup",381,null],[12,"mass","","Particle mass",381,null],[12,"charge","","Particle charge",381,null],[12,"position","","Particle positions",381,null],[12,"velocity","","Particle velocity, if needed",381,null],[3,"ParticleKind","","A particle kind. Particles with the same name will have the same kind. This\nis used for faster potential lookup.",null,null],[12,"0","","",382,null],[3,"UnitCell","","The System type hold all the data about a system.",null,null],[3,"Bond","","A `Bond` between the atoms at indexes `i` and `j`",null,null],[3,"Angle","","An `Angle` formed by the atoms at indexes `i`, `j` and `k`",null,null],[3,"Dihedral","","A `Dihedral` angle formed by the atoms at indexes `i`, `j`, `k` and `m`",null,null],[3,"Connectivity","","The `Connectivity` bitflag encode the topological distance between\ntwo particles in the molecule, i.e. the number of bonds between the\nparticles.",null,null],[3,"Molecule","","A molecule is the basic building block for a topology. It contains data\nabout the connectivity (bonds, angles, dihedrals) in the system.",null,null],[3,"EnergyEvaluator","","An helper struct to evaluate energy components of a system.",null,null],[3,"EnergyCache","","This is a cache for energy computation.",null,null],[3,"System","","The System type hold all the data about a simulated system.",null,null],[4,"CellType","","The type of a cell determine how we will be able to compute the periodic\nboundaries condition.",null,null],[13,"Infinite","","Infinite unit cell, with no boundaries",383,null],[13,"Orthorombic","","Orthorombic unit cell, with cuboide shape",383,null],[13,"Triclinic","","Triclinic unit cell, with arbitrary parallelepipedic shape",383,null],[5,"moltype","","Get the molecule type of the given `molecule` containing the `particles`.\nThis type can be used to identify all the molecules containing the same\nbonds and particles (see `System::moltype` for more information).",null,null],[11,"add_element","","Add a new element in the elements list. The additional list is searched\nbefore the `PERIODIC_TABLE` array, so adding a new element here will\nmake it overwrite the real one.",384,{"inputs":[{"name":"elementdata"}],"output":null}],[11,"name","","Get the name of an element from it&#39;s symbol.",384,{"inputs":[{"name":"s"}],"output":{"name":"option"}}],[11,"mass","","Get the mass of an element from it&#39;s symbol.",384,{"inputs":[{"name":"s"}],"output":{"name":"option"}}],[11,"covalent","","Get the covalent radius of an element from it&#39;s symbol.",384,{"inputs":[{"name":"s"}],"output":{"name":"option"}}],[11,"vdw","","Get the Van der Waals radius of an element from it&#39;s symbol.",384,{"inputs":[{"name":"s"}],"output":{"name":"option"}}],[11,"fmt","","",382,null],[11,"eq","","",382,null],[11,"ne","","",382,null],[11,"cmp","","",382,null],[11,"partial_cmp","","",382,null],[11,"lt","","",382,null],[11,"le","","",382,null],[11,"gt","","",382,null],[11,"ge","","",382,null],[11,"hash","","",382,null],[11,"clone","","",382,null],[11,"default","","",382,{"inputs":[],"output":{"name":"particlekind"}}],[11,"fmt","","",382,null],[11,"fmt","","",381,null],[11,"clone","","",381,null],[11,"new","","Create a new `Particle` from a name",381,{"inputs":[{"name":"s"}],"output":{"name":"particle"}}],[11,"name","","Get the particle name",381,null],[11,"set_name","","Set the particle name to `name`",381,null],[11,"eq","","",383,null],[11,"clone","","",383,null],[11,"fmt","","",383,null],[11,"eq","","",385,null],[11,"ne","","",385,null],[11,"clone","","",385,null],[11,"fmt","","",385,null],[11,"default","","",385,{"inputs":[],"output":{"name":"unitcell"}}],[11,"new","","Create an infinite unit cell",385,{"inputs":[],"output":{"name":"unitcell"}}],[11,"ortho","","Create an orthorombic unit cell, with side lengths `a, b, c`.",385,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"unitcell"}}],[11,"cubic","","Create a cubic unit cell, with side lengths `length, length, length`.",385,{"inputs":[{"name":"f64"}],"output":{"name":"unitcell"}}],[11,"triclinic","","Create a triclinic unit cell, with side lengths `a, b, c` and angles\n`alpha, beta, gamma`.",385,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"unitcell"}}],[11,"celltype","","Get the cell type",385,null],[11,"vect_a","","Get the first vector of the cell",385,null],[11,"a","","Get the first length of the cell (i.e. the norm of the first vector of\nthe cell)",385,null],[11,"vect_b","","Get the second vector of the cell",385,null],[11,"b","","Get the second length of the cell (i.e. the norm of the second vector of\nthe cell)",385,null],[11,"vect_c","","Get the third vector of the cell",385,null],[11,"c","","Get the third length of the cell (i.e. the norm of the third vector of\nthe cell)",385,null],[11,"lengths","","Get the distances between faces of the unit cell",385,null],[11,"alpha","","Get the first angle of the cell",385,null],[11,"beta","","Get the second angle of the cell",385,null],[11,"gamma","","Get the third angle of the cell",385,null],[11,"volume","","Get the volume angle of the cell",385,null],[11,"scale_mut","","Scale this unit cell in-place by multiplying the cell matrix by `factor`.",385,null],[11,"scale","","Scale this unit cell by multiplying the cell matrix by `s`, and return a\nnew scaled unit cell",385,null],[11,"reciprocal_vectors","","Get the reciprocal vectors of this unit cell",385,null],[11,"wrap_vector","","Wrap a vector in the unit cell, obeying the periodic boundary conditions.\nFor a cubic cell of side lenght `L`, this produce a vector with all\ncomponents in `[0, L)`.",385,null],[11,"vector_image","","Find the image of a vector in the unit cell, obeying the periodic\nboundary conditions. For a cubic cell of side lenght `L`, this produce a\nvector with all components in `[-L/2, L/2)`.",385,null],[11,"fractional","","Get the fractional representation of the `v` vector in this cell",385,null],[11,"cartesian","","Get the cartesian representation of the fractional `v` vector in this cell",385,null],[11,"distance","","Periodic boundary conditions distance between the point `u` and the point `v`",385,null],[11,"angle","","Get the angle formed by the points at `a`, `b` and `c` using periodic\nboundary conditions.",385,null],[11,"angle_and_derivatives","","Get the angle formed by the points at `a`, `b` and `c` using periodic\nboundary conditions and its derivatives.",385,null],[11,"dihedral","","Get the dihedral angle formed by the points at `a`, `b`, `c`, `d` using\nperiodic boundary conditions.",385,null],[11,"dihedral_and_derivatives","","Get the dihedral angle and and its derivatives defined by the points at\n`a`, `b`, `c` and `d` using periodic boundary conditions.",385,null],[0,"velocities","","This module provides some ways to initialize the velocities in a `System`",null,null],[3,"BoltzmannVelocities","cymbalum::system::velocities","Initialize the velocities from a Boltzman distribution.",null,null],[3,"UniformVelocities","","Initialize the velocities from an uniform distribution.",null,null],[5,"scale","","Scale all velocities in the `System` such that the `system` temperature\nis `temperature`.",null,{"inputs":[{"name":"system"},{"name":"f64"}],"output":null}],[8,"InitVelocities","","Random initializer for the velocities of a system.",null,null],[10,"init","","Initialize the velocities of the system.",386,null],[10,"seed","","Set the seed of the random number generator. The default seed is 42.",386,null],[11,"new","","This `BoltzmannVelocities` initializer will initialize velocities at\ntemperature `temperature`.",387,{"inputs":[{"name":"f64"}],"output":{"name":"boltzmannvelocities"}}],[11,"init","","",387,null],[11,"seed","","",387,null],[11,"new","","This `UniformVelocities` initializer will initialize velocities at\ntemperature `temperature`.",388,{"inputs":[{"name":"f64"}],"output":{"name":"uniformvelocities"}}],[11,"init","","",388,null],[11,"seed","","",388,null],[11,"hash","cymbalum::system","",389,null],[11,"cmp","","",389,null],[11,"partial_cmp","","",389,null],[11,"lt","","",389,null],[11,"le","","",389,null],[11,"gt","","",389,null],[11,"ge","","",389,null],[11,"clone","","",389,null],[11,"eq","","",389,null],[11,"ne","","",389,null],[11,"fmt","","",389,null],[11,"empty","","Returns an empty set of flags.",389,{"inputs":[],"output":{"name":"connectivity"}}],[11,"all","","Returns the set containing all flags.",389,{"inputs":[],"output":{"name":"connectivity"}}],[11,"bits","","Returns the raw value of the flags currently stored.",389,null],[11,"from_bits","","Convert from underlying bit representation, unless that\nrepresentation contains bits that do not correspond to a flag.",389,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_bits_truncate","","Convert from underlying bit representation, dropping any bits\nthat do not correspond to flags.",389,{"inputs":[{"name":"u8"}],"output":{"name":"connectivity"}}],[11,"is_empty","","Returns `true` if no flags are currently stored.",389,null],[11,"is_all","","Returns `true` if all flags are currently set.",389,null],[11,"intersects","","Returns `true` if there are flags common to both `self` and `other`.",389,null],[11,"contains","","Returns `true` all of the flags in `other` are contained within `self`.",389,null],[11,"insert","","Inserts the specified flags in-place.",389,null],[11,"remove","","Removes the specified flags in-place.",389,null],[11,"toggle","","Toggles the specified flags in-place.",389,null],[11,"bitor","","Returns the union of the two sets of flags.",389,null],[11,"bitor_assign","","Adds the set of flags.",389,null],[11,"bitxor","","Returns the left flags, but with all the right flags toggled.",389,null],[11,"bitxor_assign","","Toggles the set of flags.",389,null],[11,"bitand","","Returns the intersection between the two sets of flags.",389,null],[11,"bitand_assign","","Disables all flags disabled in the set.",389,null],[11,"sub","","Returns the set difference of the two sets of flags.",389,null],[11,"sub_assign","","Disables all flags enabled in the set.",389,null],[11,"not","","Returns the complement of this set of flags.",389,null],[11,"extend","","",389,null],[11,"from_iter","","",389,{"inputs":[{"name":"t"}],"output":{"name":"connectivity"}}],[11,"default","","",389,{"inputs":[],"output":{"name":"connectivity"}}],[11,"hash","","",390,null],[11,"cmp","","",390,null],[11,"partial_cmp","","",390,null],[11,"lt","","",390,null],[11,"le","","",390,null],[11,"gt","","",390,null],[11,"ge","","",390,null],[11,"eq","","",390,null],[11,"ne","","",390,null],[11,"fmt","","",390,null],[11,"clone","","",390,null],[11,"new","","Create a new Bond between the atoms at indexes `first` and `second`",390,{"inputs":[{"name":"usize"},{"name":"usize"}],"output":{"name":"bond"}}],[11,"i","","Get the first particle in the bond",390,null],[11,"j","","Get the second particle in the bond",390,null],[11,"hash","","",391,null],[11,"eq","","",391,null],[11,"ne","","",391,null],[11,"fmt","","",391,null],[11,"clone","","",391,null],[11,"new","","Create a new Angle between the atoms at indexes `first`, `second` and `third`",391,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"angle"}}],[11,"i","","Get the first particle in the angle",391,null],[11,"j","","Get the second particle in the angle",391,null],[11,"k","","Get the third particle in the angle",391,null],[11,"hash","","",392,null],[11,"eq","","",392,null],[11,"ne","","",392,null],[11,"fmt","","",392,null],[11,"clone","","",392,null],[11,"new","","Create a new Dihedral between the atoms at indexes `first`, `second`, `third` and `fourth`",392,{"inputs":[{"name":"usize"},{"name":"usize"},{"name":"usize"},{"name":"usize"}],"output":{"name":"dihedral"}}],[11,"i","","Get the first particle in the dihedral angle",392,null],[11,"j","","Get the second particle in the dihedral angle",392,null],[11,"k","","Get the third particle in the dihedral angle",392,null],[11,"m","","Get the fourth particle in the dihedral angle",392,null],[11,"clone","","",393,null],[11,"fmt","","",393,null],[11,"hash","","",393,null],[11,"new","","Create a new `Molecule` containing only the atom i",393,{"inputs":[{"name":"usize"}],"output":{"name":"molecule"}}],[11,"size","","Get the number of atoms in the molecule",393,null],[11,"first","","Get the first atom of this molecule",393,null],[11,"last","","Get the last atom of this molecule",393,null],[11,"contains","","Does this molecule contains the particle `i`",393,null],[11,"merge_with","","Merge this molecule with `other`. The first particle in `other` should\nbe the particle just after the last one in `self`.",393,null],[11,"translate_by","","Translate all indexes in this molecule by `delta`.",393,null],[11,"add_bond","","Add a bond between the particles at indexes `i` and `j`. These particles\nare assumed to be in the molecule",393,null],[11,"remove_particle","","Removes particle at index `i` and any associated bonds, angle or\ndihedral. This function also update the indexes for the\nbonds/angles/dihedral by remove 1 to all the values `&gt; i`",393,null],[11,"bonds","","Get the internal list of bonds",393,null],[11,"angles","","Get the internal list of angles",393,null],[11,"dihedrals","","Get the internal list of dihedrals",393,null],[11,"connectivity","","Get the connectivity betweent the particles `i` and `j`",393,null],[11,"iter","","Get an iterator over the particles in the molecule",393,null],[11,"into_iter","","",393,null],[11,"new","","Create a new energy evaluator acting on the given `system`.",394,{"inputs":[{"name":"system"}],"output":{"name":"energyevaluator"}}],[11,"pair","","Compute the energy associated with the pair of particles `i, j` at\ndistance `r`",394,null],[11,"pairs","","Compute the energy of all the pairs in the system",394,null],[11,"bond","","Compute the energy associated with the bonded particles `i, j` at\ndistance `r`",394,null],[11,"bonds","","Compute the energy of all the bonds in the system",394,null],[11,"angle","","Compute the energy associated with the angle `i, j, k` at angle `theta`",394,null],[11,"angles","","Compute the energy of all the angles in the system",394,null],[11,"dihedral","","Compute the energy associated with the dihedral angle `i, j, k, m` at\nangle `phi`",394,null],[11,"dihedrals","","Compute the energy of all the dihedral angles in the system",394,null],[11,"coulomb","","Compute the energy of the electrostatic interactions",394,null],[11,"global","","Compute the energy of the global potentials",394,null],[11,"default","","",395,{"inputs":[],"output":{"name":"energycache"}}],[11,"new","","Create a new empty energy cache.",395,{"inputs":[],"output":{"name":"energycache"}}],[11,"init","","Initialize the cache to be used with `system`. After a call to this\nfunction, the cache is only usable with the same system. To change\nthe associated system, one must call this function again.",395,null],[11,"energy","","Get the cached energy",395,null],[11,"update","","Update the cache after a call to a `EnergyCache::*_cost` function or\n`EnergyCache::unused`.",395,null],[11,"unused","","This function should be called whenever the cache is not used, but one\nstill want it to be updated. Future call to `EnergyCache::update` will\nrecompute the full cache.",395,null],[11,"move_particles_cost","","Get the cost of moving the set of particles with indexes in `idxes` to\n`newpos`. This function DO NOT update the cache, the\n`update_particles_moved` function MUST be called if the particles are\neffectively moved.",395,null],[11,"clone","","",396,null],[11,"default","","",396,{"inputs":[],"output":{"name":"system"}}],[11,"new","","Create a new empty System",396,{"inputs":[],"output":{"name":"system"}}],[11,"from_cell","","Create an empty system with a specific UnitCell",396,{"inputs":[{"name":"unitcell"}],"output":{"name":"system"}}],[11,"step","","Get the current step of the system",396,null],[11,"increment_step","","Increment the system step",396,null],[11,"moltype","","Get the type of the molecule at index `molid`. This type is a hash of\nthe atoms names, and the set of bonds in the molecule. This means that\ntwo molecules will have the same type if and only if they contains the\nsame atoms and the same bonds, **in the same order**.",396,null],[11,"molecules_with_moltype","","Get a list of molecules with `moltype` molecule type.",396,null],[11,"are_in_same_molecule","","Check if the particles at indexes `i` and `j` are in the same molecule",396,null],[11,"molecules","","Get the list of molecules in the system.",396,null],[11,"molecule","","Get the molecule at index `id`",396,null],[11,"molid","","Get the index of the molecule containing the particle `i`",396,null],[11,"bond_distance","","Get the length of the shortest bond path to go from the particle `i` to\nthe particle `j`. If the particles are not in the same molecule, the\nlength is -1. Else, this length is 0 if `i == j`, 1 if there is a bond\nbetween `i` and `j`, etc.",396,null],[11,"remove_molecule","","Remove the molecule at index `i`",396,null],[11,"add_bond","","Add a bond between the particles at indexes `i` and `j`. The particles\nshould have been added to the system before calling this.",396,null],[11,"remove_particle","","Removes particle at index `i` and any associated bonds, angle or dihedral",396,null],[11,"add_particle","","Insert a particle at the end of the internal list",396,null],[11,"size","","Get the number of particles in this system",396,null],[11,"iter","","Get an iterator over the `Particle` in this system",396,null],[11,"iter_mut","","Get a mutable iterator over the `Particle` in this system",396,null],[11,"energy_evaluator","","Get an helper struct to evaluate the energy of this system.",396,null],[11,"interactions","","Access the interactions for this system",396,null],[11,"interactions_mut","","Access the interactions for this system in a mutable way",396,null],[11,"pair_potentials","","Get the list of pair potential acting between the particles at indexes\n`i` and `j`.",396,null],[11,"bond_potentials","","Get the list of bonded potential acting between the particles at indexes\n`i` and `j`.",396,null],[11,"angle_potentials","","Get the list of angle interaction acting between the particles at\nindexes `i`, `j` and `k`.",396,null],[11,"dihedral_potentials","","Get the list of dihedral angles interaction acting between the particles\nat indexes `i`, `j`, `k` and `m`.",396,null],[11,"cell","","Get a reference to  the system unit cell",396,null],[11,"cell_mut","","Get a mutable reference to  the system unit cell",396,null],[11,"set_cell","","Set the system unit cell",396,null],[11,"distance","","Get the distance between the particles at indexes `i` and `j`",396,null],[11,"nearest_image","","Get the vector between the nearest image of particle `j` with respect to\nparticle `i`.",396,null],[11,"angle","","Get the angle between the particles `i`, `j` and `k`",396,null],[11,"angle_and_derivatives","","Get the angle and the derivatives of the angle between the particles\n`i`, `j` and `k`",396,null],[11,"dihedral","","Get the dihedral angle between the particles `i`, `j`, `k` and `m`",396,null],[11,"dihedral_and_derivatives","","Get the dihedral angle and the derivatives of the dihedral angle\nbetween the particles `i`, `j`, `k` and `m`",396,null],[11,"kinetic_energy","","Get the kinetic energy of the system.",396,null],[11,"potential_energy","","Get the potential energy of the system.",396,null],[11,"total_energy","","Get the total energy of the system.",396,null],[11,"temperature","","Get the temperature of the system.",396,null],[11,"volume","","Get the volume of the system.",396,null],[11,"virial","","Get the tensorial virial of the system.",396,null],[11,"pressure","","Get the pressure of the system from the virial equation, at the system\ninstananeous temperature.",396,null],[11,"stress","","Get the stress tensor of the system from the virial equation, at the\nsystem instananeous temperature.",396,null],[11,"pressure_at_temperature","","Get the pressure of the system from the virial equation, at the given\n`temperature`.",396,null],[11,"stress_at_temperature","","Get the stress tensor of the system from the virial equation, at the\ngiven `temperature`.",396,null],[11,"forces","","Get the forces acting on all the particles in the system",396,null],[11,"index","","",396,null],[11,"index_mut","","",396,null],[0,"compute","","Computing properties of a system",null,null],[3,"Forces","cymbalum::system::compute","Compute all the forces acting on the system, and return a vector of\nforce acting on each particles",null,null],[3,"PotentialEnergy","","Compute the potential energy of the system",null,null],[3,"KineticEnergy","","Compute the kinetic energy of the system",null,null],[3,"TotalEnergy","","Compute the total energy of the system",null,null],[3,"Temperature","","Compute the instananeous temperature of the system",null,null],[3,"Volume","","Compute the volume of the system",null,null],[3,"Virial","","Compute the virial tensor of the system, defined by\n$$ W = \\sum_i \\sum_{j &gt; i} \\vec r_{ij} \\otimes \\vec f_{ij} $$",null,null],[3,"PressureAtTemperature","","Compute the pressure of the system from the virial equation, at the given\ntemperature. This pressure is given by the following formula:\n$$ p = \\frac{N k_B T}{V} + \\frac{1}{3V} \\sum_i \\vec f_i \\cdot \\vec r_i $$",null,null],[12,"temperature","","Temperature for the pressure computation",397,null],[3,"StressAtTemperature","","Compute the stress tensor of the system from the virial equation, at the\ngiven temperature. The stress tensor is defined by\n$$ \\sigma = \\sigma = \\frac{1}{V} (\\sum_i m_i v_i \\otimes v_i + \\sum_i \\sum_{j &gt; i} \\vec r_{ij} \\otimes \\vec f_{ij}) $$\nbut here the kinetic energy term is replaced by it average at the given\ntemperature.",null,null],[12,"temperature","","Temperature for the stress tensor computation",398,null],[3,"Stress","","Compute the stress tensor of the system, defined by:\n$$ \\sigma = \\frac{1}{V} (\\sum_i m_i v_i \\otimes v_i + \\sum_i \\sum_{j &gt; i} \\vec r_{ij} \\otimes \\vec f_{ij}) $$",null,null],[3,"Pressure","","Compute the virial pressure of the system. This pressure is given by the\nfollowing formula:\n$$ p = \\frac{N k_B T}{V} + \\frac{1}{3V} \\sum_i \\vec f_i \\cdot \\vec r_i $$",null,null],[8,"Compute","","The compute trait allow to compute properties of a system, whithout\nmodifying this system. The Output type is the type of the computed\nproperty.",null,null],[16,"Output","","The data type of the property",399,null],[10,"compute","","Compute the property",399,null],[11,"compute","","",400,null],[11,"compute","","",401,null],[11,"compute","","",402,null],[11,"compute","","",403,null],[11,"compute","","",404,null],[11,"compute","","",405,null],[11,"compute","","",406,null],[11,"compute","","",397,null],[11,"compute","","",398,null],[11,"compute","","",407,null],[11,"compute","","",408,null],[6,"PairInteraction","cymbalum::system","Type associating a potential and a pair restriction",null,null],[6,"Permutations","","Particles permutations:. Indexes are given in the `(old, new)` form.",null,null],[17,"CONNECT_12","","The particles are separated by one bond",null,null],[17,"CONNECT_13","","The particles are separated by two bonds",null,null],[17,"CONNECT_14","","The particles are separated by three bonds",null,null],[17,"CONNECT_FAR","","The particles are separated by more than three bonds",null,null],[0,"simulation","cymbalum","Types and traits for representing simulation algorithms",null,null],[3,"Simulation","cymbalum::simulation","The Simulation struct holds all the needed algorithms for running the\nsimulation. It should be use together with a `System` to perform the\nsimulation.",null,null],[0,"propagator","","A propagator is responsible for updating the system during a simulation",null,null],[8,"Propagator","cymbalum::simulation::propagator","The propagator trait is the main algorithm of a simulation, i.e. the one\nwhich update the system. The main function here is `propagate`, which\nshould propagate the simulation for one step.",null,null],[11,"setup","","Setup code, preparing all the meta-informations needed about the\nsimulation",409,null],[10,"propagate","","Propagate the system for one simulation step.",409,null],[11,"finish","","Finish the simulation, and maybe output some informations about it",409,null],[11,"new","cymbalum::simulation","Create a new Simulation from a Propagator.",410,{"inputs":[{"name":"box"}],"output":{"name":"simulation"}}],[11,"run","","Run the simulation on System for `nsteps` steps.",410,null],[11,"add_output","","Add a new `Output` algorithm in the outputs list",410,null],[11,"add_output_with_frequency","","Add a new `Output` algorithm in the outputs list, which will be used\nat the given frequency. The output will be used everytime the system\n step matches this frequency.",410,null],[0,"md","","Molecular dynamics algorithms.",null,null],[3,"VelocityVerlet","cymbalum::simulation::md","Velocity-Verlet integrator. This one is reversible and symplectic.",null,null],[3,"Verlet","","Verlet integrator. This one is reversible and symplectic.",null,null],[3,"LeapFrog","","Leap-frog integrator. This one is reversible and symplectic.",null,null],[3,"BerendsenBarostat","","Berendsen barostat integrator based on velocity-Verlet. This one neither\nreversible nor symplectic.",null,null],[3,"AnisoBerendsenBarostat","","Anisotropic Berendsen barostat integrator based on velocity-Verlet. This one\nneither reversible nor symplectic.",null,null],[3,"RescaleThermostat","","Velocity rescaling thermostat.",null,null],[3,"BerendsenThermostat","","Berendsen thermostat.",null,null],[3,"RemoveTranslation","","Remove global translation from the system",null,null],[3,"RemoveRotation","","Remove global rotation from the system",null,null],[3,"MolecularDynamics","","Molecular Dynamics propagator for the simulation.",null,null],[11,"new","","Create a new integrator with a timestep of `timestep`.",411,{"inputs":[{"name":"f64"}],"output":{"name":"velocityverlet"}}],[11,"setup","","",411,null],[11,"integrate","","",411,null],[11,"new","","Create a new integrator with a timestep of `timestep`.",412,{"inputs":[{"name":"f64"}],"output":{"name":"verlet"}}],[11,"setup","","",412,null],[11,"integrate","","",412,null],[11,"new","","Create a new integrator with a timestep of `timestep`.",413,{"inputs":[{"name":"f64"}],"output":{"name":"leapfrog"}}],[11,"setup","","",413,null],[11,"integrate","","",413,null],[11,"new","","Create a new Berendsen barostat with an integration timestep of\n`timestep`, and a target pressure of `pressure` and the barostat time\nscale `tau`.",414,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"berendsenbarostat"}}],[11,"setup","","",414,null],[11,"integrate","","",414,null],[11,"new","","Create a new anisotropic Berendsen barostat with an integration timestep\nof `timestep`, and a target stress matrix of `stress` and the barostat\ntime scale `tau`.",415,{"inputs":[{"name":"f64"},{"name":"matrix3"},{"name":"f64"}],"output":{"name":"anisoberendsenbarostat"}}],[11,"hydrostatic","","Create a new anisotropic Berendsen barostat with an integration timestep\nof `timestep`, using an hydrostatic stress matrix corresponding to the\npressure `pressure` and the barostat time scale `tau`.",415,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"anisoberendsenbarostat"}}],[11,"setup","","",415,null],[11,"integrate","","",415,null],[11,"new","","Create a new `RescaleThermostat` acting at temperature `temperature`, with a\ntolerance of `5% * temperature`.",416,{"inputs":[{"name":"f64"}],"output":{"name":"rescalethermostat"}}],[11,"with_tolerance","","Create a new `RescaleThermostat` acting at temperature `T`, with a\ntolerance of `tol`. For rescaling all the steps, use `tol = 0`.",416,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"rescalethermostat"}}],[11,"control","","",416,null],[11,"new","","Create a new `BerendsenThermostat` acting at temperature `T`, with a\ntimestep of `tau` times the integrator timestep.",417,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"berendsenthermostat"}}],[11,"control","","",417,null],[11,"control","","",418,null],[11,"control","","",419,null],[11,"new","","Create a new `MolecularDynamics` propagator using a `VelocityVerlet`\nintegrator.",420,{"inputs":[{"name":"f64"}],"output":{"name":"moleculardynamics"}}],[11,"from_integrator","","Create a new `MolecularDynamics` propagator using the specified\n`integrator`.",420,{"inputs":[{"name":"box"}],"output":{"name":"moleculardynamics"}}],[11,"add_control","","Add a control algorithm to the internal list of controls.",420,null],[11,"set_thermostat","","Set the thermostat to use with this simulation",420,null],[11,"setup","","",420,null],[11,"propagate","","",420,null],[11,"finish","","",420,null],[8,"Integrator","","The `Integrator` trait define integrators interface for molecular dynamics.\nAn integrator is an algorithm responsible for propagating the equations of\nmotion in the system.",null,null],[11,"setup","","Setup the integrator. This function is called once by every simulation\nrun.",421,null],[10,"integrate","","Integrate the equations of motion. This is called at every step of the\nsimulation.",421,null],[8,"Control","","Trait for controling some parameters in a system during a simulation.",null,null],[11,"setup","","Function called once at the beggining of the simulation, which allow\nfor some setup of the control algorithm if needed.",422,null],[10,"control","","Do your job, control algorithm!",422,null],[11,"finish","","Function called once at the end of the simulation.",422,null],[8,"Thermostat","","Trait for controls usables as thermostats",null,null],[0,"mc","cymbalum::simulation","Monte-Carlo Metropolis algorithms",null,null],[3,"MonteCarlo","cymbalum::simulation::mc","Metropolis Monte-Carlo propagator",null,null],[3,"Translate","","Monte-Carlo move for translating a molecule",null,null],[3,"Rotate","","Monte-Carlo move for rotating a rigid molecule",null,null],[11,"new","","Create a new Monte-Carlo propagator at temperature `T`.",423,{"inputs":[{"name":"f64"}],"output":{"name":"montecarlo"}}],[11,"from_rng","","Create a Monte-Carlo propagator at temperature `T`, using the `rng`\nrandom number generator.",423,{"inputs":[{"name":"f64"},{"name":"box"}],"output":{"name":"montecarlo"}}],[11,"add","","Add a the `mcmove` Monte-Carlo move to this propagator, with frequency\n`frequency`. All calls to this function should happen before any\nsimulation run.",423,null],[11,"temperature","","Get the temperature of the simulation",423,null],[11,"set_temperature","","Set the temperature of the simulation",423,null],[11,"setup","","",423,null],[11,"propagate","","",423,null],[11,"new","","Create a new `Translate` move, with maximum displacement of `dr`,\ntranslating all the molecules in the system.",424,{"inputs":[{"name":"f64"}],"output":{"name":"translate"}}],[11,"with_moltype","","Create a new `Translate` move, with maximum displacement of `dr`,\ntranslating only molecules with `moltype` type.",424,{"inputs":[{"name":"f64"},{"name":"u64"}],"output":{"name":"translate"}}],[11,"default","","",424,{"inputs":[],"output":{"name":"translate"}}],[11,"describe","","",424,null],[11,"prepare","","",424,null],[11,"cost","","",424,null],[11,"apply","","",424,null],[11,"restore","","",424,null],[11,"new","","Create a new `Rotate` move, with maximum angular displacement of `theta`,\nrotating all the molecules in the system.",425,{"inputs":[{"name":"f64"}],"output":{"name":"rotate"}}],[11,"with_moltype","","Create a new `Rotate` move, with maximum angular displacement of `theta`,\nrotating only molecules with `moltype` type.",425,{"inputs":[{"name":"f64"},{"name":"u64"}],"output":{"name":"rotate"}}],[11,"default","","",425,{"inputs":[],"output":{"name":"rotate"}}],[11,"describe","","",425,null],[11,"prepare","","",425,null],[11,"cost","","",425,null],[11,"apply","","",425,null],[11,"restore","","",425,null],[8,"MCMove","","The `MCMove` trait correspond to the set of methods used in Monte-Carlo\nsimulations.",null,null],[10,"describe","","Give a short description of this move",426,null],[10,"prepare","","Prepare the move, by selecting the particles to move, and the parameters\nof the move. The `rng` random number generator should be used to\ngenerate the parameters of the move.",426,null],[10,"cost","","Get the cost of performing this move on `system`. For example in\nsimple NVT simulations, this cost is the energetic difference over\n`beta`. The cost must be dimmensionless, and will be placed in an\nexponential. The `cache` should be used to compute the cost, or the\n`cache.unused` function should be used to ensure that the cache is\nupdated  as needed after this move.",426,null],[10,"apply","","Effectivelly apply the move, if it has not already been done in\n`prepare`.",426,null],[10,"restore","","Restore the system to it&#39;s initial state, if it has been changed in\n`prepare`.",426,null],[0,"minimization","cymbalum::simulation","Energy minization algorithms",null,null],[3,"SteepestDescent","cymbalum::simulation::minimization","Steepest gradient descent for energy minization.",null,null],[11,"default","","",427,{"inputs":[],"output":{"name":"steepestdescent"}}],[11,"new","","Create a GradientDescent with sensible default values for energy and\nforce convergence criteria.",427,{"inputs":[],"output":{"name":"steepestdescent"}}],[11,"with_criteria","","Create a new `GradientDescent` with the force convergence criterium of\n`force`, and the energy convergence criterium of `energy`.",427,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"steepestdescent"}}],[11,"converged","","Has the minization converged so far ?",427,null],[11,"setup","","",427,null],[11,"propagate","","",427,null],[0,"outputs","cymbalum::simulation","Saving properties of the simulation to some stream (file or stdout mainly)",null,null],[3,"TrajectoryOutput","cymbalum::simulation::outputs","The `TrajectoryOutput` allow to write the trajectory of the system to a\nfile, using any format supported by the\n[Chemfiles](http://chemfiles.readthedocs.org/en/latest/formats.html) library.",null,null],[3,"CellOutput","","The `CellOutput` write all the components of a cell to a file . The columns\nin the file contains the following values: `A B C α β γ`.",null,null],[3,"EnergyOutput","","The `EnergyOutput` write the energy of the system to a text file, organized\nas: `PotentialEnergy     KineticEnergy     TotalEnergy`.",null,null],[3,"PropertiesOutput","","The `PropertiesOutput` write various physical properties of the system to\na file. These properties are:",null,null],[8,"Output","","The `Output` trait define the interface for all the quantities outputed by\nthe simulation during the run. An Output can be a text or a binary data\nfile, an image, a text log, …",null,null],[11,"setup","","Function called once at the beggining of the simulation, which allow\nfor some setup of the output if needed.",428,null],[10,"write","","Write the output from the system.",428,null],[11,"finish","","Function called once at the end of the simulation.",428,null],[11,"new","","Create a new `TrajectoryOutput` writing to `filename`. The file is\nreplaced if it already exists.",429,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"write","","",429,null],[11,"new","","Create a new `CellOutput` writing to `filename`. The file is replaced if\nit already exists.",430,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"setup","","",430,null],[11,"write","","",430,null],[11,"new","","Create a new `EnergyOutput` writing to `filename`. The file is replaced\nif it already exists.",431,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"setup","","",431,null],[11,"write","","",431,null],[11,"new","","Create a new `PropertiesOutput` writing to `filename`. The file is replaced\nif it already exists.",432,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"setup","","",432,null],[11,"write","","",432,null],[0,"input","cymbalum","Input capacities for cymbalum",null,null],[3,"TrajectoryError","cymbalum::input","Possible error when reading and wrinting to trajectories",null,null],[3,"Trajectory","","A Trajectory is a file containing one or more successives simulation steps",null,null],[4,"Error","","Possible causes of error when reading input files",null,null],[13,"TOML","","Error in the TOML input file",433,null],[13,"File","","IO error",433,null],[13,"Trajectory","","Trajectory creation error",433,null],[13,"Config","","File content error: missing sections, bad data types",433,null],[13,"Unit","","Unit parsing error",433,null],[5,"read_interactions","","Read interactions from the TOML file at `path`, and add them to the\n`system`. For a full documentation of the input files syntax, see the user\nmanual.",null,{"inputs":[{"name":"system"},{"name":"p"}],"output":{"name":"result"}}],[5,"read_config","","Read a whole simulation input file.",null,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[5,"guess_bonds","","Guess the bonds in a system",null,{"inputs":[{"name":"system"}],"output":{"name":"trajectoryresult"}}],[5,"read_molecule","","Read a the first molecule from the file at `path`. If no bond information\nexists in the file, bonds are guessed.",null,{"inputs":[{"name":"p"}],"output":{"name":"trajectoryresult"}}],[11,"fmt","","",433,null],[11,"from","","",433,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",433,{"inputs":[{"name":"trajectoryerror"}],"output":{"name":"error"}}],[11,"from","","",433,{"inputs":[{"name":"error"}],"output":{"name":"error"}}],[11,"from","","",433,{"inputs":[{"name":"str"}],"output":{"name":"error"}}],[11,"from","","",433,{"inputs":[{"name":"string"}],"output":{"name":"error"}}],[11,"from","","",433,{"inputs":[{"name":"parseerror"}],"output":{"name":"error"}}],[11,"fmt","","",433,null],[11,"description","","",433,null],[11,"cause","","",433,null],[11,"fmt","","",434,null],[11,"from","","",434,{"inputs":[{"name":"error"}],"output":{"name":"trajectoryerror"}}],[11,"fmt","","",434,null],[11,"description","","",434,null],[11,"from_toml","cymbalum::potentials","",369,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",365,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",364,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",370,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",366,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",371,{"inputs":[{"name":"table"},{"name":"box"}],"output":{"name":"result"}}],[11,"from_toml","","",372,{"inputs":[{"name":"table"},{"name":"box"}],"output":{"name":"result"}}],[11,"from_toml","","",373,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",374,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","cymbalum::simulation::outputs","",429,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",430,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",431,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",432,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","cymbalum::simulation::md","",420,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",412,{"inputs":[{"name":"table"},{"name":"f64"}],"output":{"name":"result"}}],[11,"from_toml","","",411,{"inputs":[{"name":"table"},{"name":"f64"}],"output":{"name":"result"}}],[11,"from_toml","","",413,{"inputs":[{"name":"table"},{"name":"f64"}],"output":{"name":"result"}}],[11,"from_toml","","",414,{"inputs":[{"name":"table"},{"name":"f64"}],"output":{"name":"result"}}],[11,"from_toml","","",415,{"inputs":[{"name":"table"},{"name":"f64"}],"output":{"name":"result"}}],[11,"from_toml","","",417,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",416,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",418,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",419,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","cymbalum::simulation::mc","",423,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",424,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"from_toml","","",425,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[11,"open","cymbalum::input","Open an existing file at `path` for reading.",435,{"inputs":[{"name":"p"}],"output":{"name":"trajectoryresult"}}],[11,"create","","Create a new file at `path` for writing, and overwrite any existing file.",435,{"inputs":[{"name":"p"}],"output":{"name":"trajectoryresult"}}],[11,"read","","Read the next step of the trajectory",435,null],[11,"read_guess_bonds","","Read the next step of the trajectory, and guess the bonds of the\nresulting System.",435,null],[11,"write","","Write the system to the trajectory.",435,null],[11,"as_chemfiles","","Get access to the chemfiles trajectory, and the associated features",435,null],[6,"Result","","Custom `Result` type for input files",null,null],[8,"FromTomlWithPairs","","Convert a TOML table and a `PairPotential` to a Rust type. This is intended\nto be used by potential computation mainly.",null,null],[10,"from_toml","","Do the conversion from `table` and `potential` to Self.",436,{"inputs":[{"name":"table"},{"name":"box"}],"output":{"name":"result"}}],[8,"FromToml","","Convert a TOML table to a Rust type.",null,null],[10,"from_toml","","Do the conversion from `table` to Self.",437,{"inputs":[{"name":"table"}],"output":{"name":"result"}}],[8,"FromTomlWithData","","Convert a TOML table and some additional data to a Rust type.",null,null],[16,"Data","","The type of the additional data needed.",438,null],[10,"from_toml","","Do the conversion from `table` and `data` to Self.",438,{"inputs":[{"name":"table"},{"name":"data"}],"output":{"name":"result"}}],[11,"virial","cymbalum::potentials","Compute the virial contribution corresponding to the distance `r`\nbetween the particles",376,null],[11,"setup","cymbalum::simulation::md","Setup the integrator. This function is called once by every simulation\nrun.",421,null],[11,"setup","","Function called once at the beggining of the simulation, which allow\nfor some setup of the control algorithm if needed.",422,null],[11,"finish","","Function called once at the end of the simulation.",422,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"],[3,"RwLock"],[3,"Box"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"ParseIntError"],[3,"TryFromIntError"],[3,"ParseFloatError"],[3,"FromUtf8Error"],[3,"FromUtf16Error"],[4,"ParseError"],[3,"DecodeUtf16Error"],[8,"Error"],[3,"EscapeDefault"],[4,"LocalKeyState"],[3,"LocalKey"],[3,"Key"],[3,"Key"],[3,"ScopedKey"],[3,"KeyInner"],[3,"Builder"],[3,"Thread"],[3,"JoinHandle"],[3,"HashMap"],[3,"Iter"],[3,"Keys"],[3,"Values"],[3,"IterMut"],[3,"IntoIter"],[3,"ValuesMut"],[3,"Drain"],[4,"Entry"],[3,"OccupiedEntry"],[3,"VacantEntry"],[3,"RandomState"],[3,"HashSet"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Intersection"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Union"],[3,"VecDeque"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Drain"],[3,"Vec"],[3,"BinaryHeap"],[3,"Iter"],[3,"IntoIter"],[3,"Drain"],[3,"Iter"],[3,"IntoIter"],[3,"LinkedList"],[3,"IterMut"],[3,"FrontPlace"],[3,"BackPlace"],[3,"Vars"],[3,"VarsOs"],[4,"VarError"],[3,"SplitPaths"],[3,"JoinPathsError"],[3,"Args"],[3,"ArgsOs"],[3,"CString"],[3,"CStr"],[3,"NulError"],[3,"FromBytesWithNulError"],[3,"IntoStringError"],[3,"Error"],[3,"OsString"],[3,"OsStr"],[4,"Cow"],[3,"String"],[3,"Metadata"],[3,"OpenOptions"],[3,"Permissions"],[3,"FileType"],[3,"File"],[3,"ReadDir"],[3,"DirEntry"],[3,"DirBuilder"],[3,"BufReader"],[3,"IntoInnerError"],[3,"BufWriter"],[3,"LineWriter"],[3,"Cursor"],[4,"ErrorKind"],[3,"Empty"],[3,"Repeat"],[3,"Sink"],[3,"Stdin"],[3,"StdinLock"],[3,"Stdout"],[3,"StdoutLock"],[3,"Stderr"],[3,"StderrLock"],[4,"SeekFrom"],[3,"Chain"],[3,"Take"],[3,"Bytes"],[4,"CharsError"],[3,"Chars"],[3,"Split"],[3,"Lines"],[4,"IpAddr"],[4,"Ipv6MulticastScope"],[3,"Ipv4Addr"],[3,"Ipv6Addr"],[4,"SocketAddr"],[3,"SocketAddrV4"],[3,"SocketAddrV6"],[3,"TcpStream"],[3,"TcpListener"],[3,"Incoming"],[3,"UdpSocket"],[3,"AddrParseError"],[4,"Shutdown"],[3,"LookupHost"],[3,"stat"],[3,"Command"],[3,"ExitStatus"],[3,"Stdio"],[3,"ChildStdin"],[3,"ChildStdout"],[3,"ChildStderr"],[3,"SocketAddr"],[3,"UnixStream"],[3,"UnixListener"],[3,"Incoming"],[3,"UnixDatagram"],[3,"AssertUnwindSafe"],[3,"AssertRecoverSafe"],[4,"Prefix"],[3,"PrefixComponent"],[4,"Component"],[3,"Components"],[3,"Iter"],[3,"PathBuf"],[3,"Path"],[3,"StripPrefixError"],[3,"Display"],[3,"Output"],[3,"Child"],[3,"Select"],[3,"Handle"],[3,"SendError"],[3,"RecvError"],[4,"TryRecvError"],[4,"TrySendError"],[3,"Sender"],[3,"SyncSender"],[3,"Receiver"],[3,"Iter"],[3,"IntoIter"],[3,"Barrier"],[3,"BarrierWaitResult"],[3,"WaitTimeoutResult"],[3,"Condvar"],[3,"StaticCondvar"],[3,"Mutex"],[3,"StaticMutex"],[3,"MutexGuard"],[3,"Once"],[3,"OnceState"],[3,"StaticRwLock"],[3,"RwLockReadGuard"],[3,"RwLockWriteGuard"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Duration"],[3,"Instant"],[3,"SystemTime"],[3,"SystemTimeError"],[3,"PoisonError"],[4,"TryLockError"],[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"fd_set"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"fsid_t"],[3,"mq_attr"],[3,"cpu_set_t"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sigset_t"],[3,"stat"],[3,"stat64"],[3,"pthread_attr_t"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[3,"PanicInfo"],[3,"Location"],[3,"ExchangeHeapSingleton"],[3,"IntermediateBox"],[3,"Drain"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Rc"],[3,"Weak"],[3,"Unique"],[3,"Shared"],[3,"IntoIter"],[3,"Drain"],[3,"Slice"],[3,"TraitObject"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[8,"Any"],[3,"TypeId"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"ToLowercase"],[3,"ToUppercase"],[3,"DecodeUtf16"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"PhantomData"],[3,"EncodeUtf16"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[4,"Ordering"],[3,"Logger"],[4,"ParseError"],[3,"BTreeMap"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Keys"],[3,"Values"],[3,"Range"],[3,"ValuesMut"],[3,"RangeMut"],[4,"Entry"],[3,"VacantEntry"],[3,"OccupiedEntry"],[3,"BTreeSet"],[3,"Iter"],[3,"IntoIter"],[3,"Range"],[3,"Difference"],[3,"SymmetricDifference"],[3,"Intersection"],[3,"Union"],[3,"EnumSet"],[3,"Iter"],[4,"Bound"],[4,"FloatErrorKind"],[3,"ParseFloatError"],[8,"One"],[8,"Zero"],[3,"Vector3D"],[3,"Matrix3"],[3,"Complex"],[3,"Array2"],[3,"Array3"],[3,"LennardJones"],[3,"Harmonic"],[3,"Torsion"],[3,"RestrictionInfo"],[4,"PairRestriction"],[3,"NullPotential"],[3,"CosineHarmonic"],[3,"CutoffComputation"],[3,"TableComputation"],[3,"Wolf"],[3,"Ewald"],[8,"PotentialFunction"],[8,"PairPotential"],[8,"Computation"],[8,"GlobalPotential"],[8,"CoulombicPotential"],[3,"ElementData"],[3,"Particle"],[3,"ParticleKind"],[4,"CellType"],[3,"PeriodicTable"],[3,"UnitCell"],[8,"InitVelocities"],[3,"BoltzmannVelocities"],[3,"UniformVelocities"],[3,"Connectivity"],[3,"Bond"],[3,"Angle"],[3,"Dihedral"],[3,"Molecule"],[3,"EnergyEvaluator"],[3,"EnergyCache"],[3,"System"],[3,"PressureAtTemperature"],[3,"StressAtTemperature"],[8,"Compute"],[3,"Forces"],[3,"PotentialEnergy"],[3,"KineticEnergy"],[3,"TotalEnergy"],[3,"Temperature"],[3,"Volume"],[3,"Virial"],[3,"Stress"],[3,"Pressure"],[8,"Propagator"],[3,"Simulation"],[3,"VelocityVerlet"],[3,"Verlet"],[3,"LeapFrog"],[3,"BerendsenBarostat"],[3,"AnisoBerendsenBarostat"],[3,"RescaleThermostat"],[3,"BerendsenThermostat"],[3,"RemoveTranslation"],[3,"RemoveRotation"],[3,"MolecularDynamics"],[8,"Integrator"],[8,"Control"],[3,"MonteCarlo"],[3,"Translate"],[3,"Rotate"],[8,"MCMove"],[3,"SteepestDescent"],[8,"Output"],[3,"TrajectoryOutput"],[3,"CellOutput"],[3,"EnergyOutput"],[3,"PropertiesOutput"],[4,"Error"],[3,"TrajectoryError"],[3,"Trajectory"],[8,"FromTomlWithPairs"],[8,"FromToml"],[8,"FromTomlWithData"]]};
searchIndex["cymba"] = {"doc":"","items":[],"paths":[]};
searchIndex["ndarray"] = {"doc":"The `ndarray` crate provides an N-dimensional container for general elements\nand for numerics.","items":[[3,"Axis","ndarray","An axis index.",null,null],[12,"0","","",0,null],[3,"Indexes","","An iterator over the indexes of an array shape.",null,null],[3,"ShapeError","","An error related to array shape or layout.",null,null],[3,"Si","","A slice, a description of a range of an array axis.",null,null],[12,"0","","",1,null],[12,"1","","",1,null],[12,"2","","",1,null],[3,"InnerIter","","An iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",null,null],[3,"InnerIterMut","","An iterator that traverses over all dimensions but the innermost,\nand yields each inner row (mutable).",null,null],[3,"AxisIter","","An iterator that traverses over an axis and\nand yields each subview.",null,null],[3,"AxisIterMut","","An iterator that traverses over an axis and\nand yields each subview (mutable)",null,null],[3,"AxisChunksIter","","An iterator that traverses over the specified axis\nand yields views of the specified size on this axis.",null,null],[3,"AxisChunksIterMut","","An iterator that traverses over the specified axis\nand yields mutable views of the specified size on this axis.",null,null],[3,"ArrayBase","","An *N*-dimensional array.",null,null],[3,"ViewRepr","","Array view’s representation.",null,null],[3,"Elements","","An iterator over the elements of an array.",null,null],[3,"ElementsMut","","An iterator over the elements of an array (mutable).",null,null],[3,"Indexed","","An iterator over the indexes and elements of an array.",null,null],[3,"IndexedMut","","An iterator over the indexes and elements of an array (mutable).",null,null],[3,"Shape","","A contiguous array shape of n dimensions.",null,null],[3,"StrideShape","","An array shape of n dimensions c-order, f-order or custom strides.",null,null],[4,"ErrorKind","","Error code for an error related to array shape or layout.",null,null],[13,"IncompatibleShape","","incompatible shape",2,null],[13,"IncompatibleLayout","","incompatible memory layout",2,null],[13,"RangeLimited","","the shape does not fit inside type limits",2,null],[13,"OutOfBounds","","out of bounds indexing",2,null],[13,"Unsupported","","aliasing array elements",2,null],[5,"stack","","Stack arrays along the given axis.",null,null],[5,"arr0","","Create a zero-dimensional array with the element `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"array"}}],[5,"arr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"rcarr1","","Create a one-dimensional array with elements from `xs`.",null,null],[5,"aview0","","Create a zero-dimensional array view borrowing `x`.",null,{"inputs":[{"name":"a"}],"output":{"name":"arrayview"}}],[5,"aview1","","Create a one-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview2","","Create a two-dimensional array view with elements borrowing `xs`.",null,null],[5,"aview_mut1","","Create a one-dimensional read-write array view with elements borrowing `xs`.",null,null],[5,"arr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"rcarr2","","Create a two-dimensional array with elements from `xs`.",null,null],[5,"arr3","","Create a three-dimensional array with elements from `xs`.",null,null],[5,"rcarr3","","Create a three-dimensional array with elements from `xs`.",null,null],[11,"index","","",3,null],[11,"index_mut","","",3,null],[11,"eq","","",3,null],[11,"from_iter","","",3,{"inputs":[{"name":"i"}],"output":{"name":"arraybase"}}],[11,"hash","","",3,null],[11,"from","","",3,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"slice"}],"output":{"name":"self"}}],[11,"from","","",3,{"inputs":[{"name":"arraybase"}],"output":{"name":"self"}}],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"_data_slice","alloc::rc","",4,null],[11,"ensure_unique","","",4,{"inputs":[{"name":"arraybase"}],"output":null}],[11,"is_unique","","",4,null],[11,"clone_with_ptr","","",4,null],[11,"_data_slice","collections::vec","",5,null],[11,"clone_with_ptr","","",5,null],[11,"_data_slice","ndarray","",6,null],[11,"clone_with_ptr","","",6,null],[11,"_data_slice","","",6,null],[11,"new","collections::vec","",5,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",5,null],[11,"new","alloc::rc","",4,{"inputs":[{"name":"vec"}],"output":{"name":"self"}}],[11,"into_shared","","",4,null],[11,"ndim","collections::vec","",5,null],[11,"slice","","",5,null],[11,"slice_mut","","",5,null],[11,"remove_axis","","",5,null],[11,"fmt","ndarray","",0,null],[11,"hash","","",0,null],[11,"cmp","","",0,null],[11,"axis","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"clone","","",0,null],[11,"clone","","",7,null],[11,"new","","Create an iterator over the array shape `dim`.",7,{"inputs":[{"name":"d"}],"output":{"name":"indexes"}}],[11,"next","","",7,null],[11,"size_hint","","",7,null],[11,"clone","","",8,null],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"next_back","","",8,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",14,null],[11,"clone","","",14,null],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"next_back","","",14,null],[11,"split_at","","Split the iterator at index, yielding two disjoint iterators.",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"next_back","","",15,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"next_back","","",16,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"next_back","","",17,null],[11,"fmt","","",1,null],[11,"hash","","",1,null],[11,"eq","","",1,null],[11,"ne","","",1,null],[11,"from","","",1,{"inputs":[{"name":"range"}],"output":{"name":"si"}}],[11,"from","","",1,{"inputs":[{"name":"rangefrom"}],"output":{"name":"si"}}],[11,"from","","",1,{"inputs":[{"name":"rangeto"}],"output":{"name":"si"}}],[11,"from","","",1,{"inputs":[{"name":"rangefull"}],"output":{"name":"si"}}],[11,"step","","",1,null],[11,"clone","","",1,null],[11,"clone","","",18,null],[11,"kind","","Return the `ErrorKind` of this error.",18,null],[11,"from_kind","","Create a new `ShapeError`",18,{"inputs":[{"name":"errorkind"}],"output":{"name":"self"}}],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"eq","","",2,null],[11,"eq","","",18,null],[11,"description","","",18,null],[11,"fmt","","",18,null],[11,"fmt","","",18,null],[11,"from","","",19,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"d"}],"output":{"name":"self"}}],[11,"from","","",20,{"inputs":[{"name":"shape"}],"output":{"name":"self"}}],[11,"f","","",19,null],[11,"set_f","","",19,null],[11,"strides","","",19,null],[0,"prelude","","ndarray prelude.",null,null],[11,"clone","","",3,null],[11,"from_vec","","Create a one-dimensional array from a vector (no copying needed).",3,{"inputs":[{"name":"vec"}],"output":{"name":"arraybase"}}],[11,"from_iter","","Create a one-dimensional array from an iterable.",3,{"inputs":[{"name":"i"}],"output":{"name":"arraybase"}}],[11,"linspace","","Create a one-dimensional array from the inclusive interval\n`[start, end]` with `n` elements. `F` must be a floating point type.",3,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"arraybase"}}],[11,"range","","Create a one-dimensional array from the half-open interval\n`[start, end)` with elements spaced by `step`. `F` must be a floating point type.",3,{"inputs":[{"name":"f"},{"name":"f"},{"name":"f"}],"output":{"name":"arraybase"}}],[11,"eye","","Create an identity matrix of size `n` (square 2D array).",3,{"inputs":[{"name":"ix"}],"output":{"name":"arraybase"}}],[11,"from_elem","","Create an array with copies of `elem`, shape `shape`.",3,{"inputs":[{"name":"sh"},{"name":"a"}],"output":{"name":"arraybase"}}],[11,"zeros","","Create an array with zeros, shape `shape`.",3,{"inputs":[{"name":"sh"}],"output":{"name":"arraybase"}}],[11,"default","","Create an array with default values, shape `shape`",3,{"inputs":[{"name":"sh"}],"output":{"name":"arraybase"}}],[11,"from_shape_vec","","Create an array with the given shape from a vector. (No cloning of\nelements needed.)",3,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"name":"result"}}],[11,"from_shape_vec_unchecked","","Create an array from a vector and interpret it according to the\nprovided dimensions and strides. (No cloning of elements needed.)",3,{"inputs":[{"name":"sh"},{"name":"vec"}],"output":{"name":"arraybase"}}],[11,"len","","Return the total number of elements in the array.",3,null],[11,"dim","","Return the shape of the array.",3,null],[11,"shape","","Return the shape of the array as a slice.",3,null],[11,"strides","","Return the strides of the array",3,null],[11,"ndim","","Return the number of dimensions (axes) in the array",3,null],[11,"view","","Return a read-only view of the array",3,null],[11,"view_mut","","Return a read-write view of the array",3,null],[11,"to_owned","","Return an uniquely owned copy of the array",3,null],[11,"to_shared","","Return a shared ownership (copy on write) array.",3,null],[11,"into_shared","","Turn the array into a shared ownership (copy on write) array,\nwithout any copying.",3,null],[11,"iter","","Return an iterator of references to the elements of the array.",3,null],[11,"iter_mut","","Return an iterator of mutable references to the elements of the array.",3,null],[11,"indexed_iter","","Return an iterator of indexes and references to the elements of the array.",3,null],[11,"indexed_iter_mut","","Return an iterator of indexes and mutable references to the elements of the array.",3,null],[11,"slice","","Return a sliced array.",3,null],[11,"slice_mut","","Return a sliced read-write view of the array.",3,null],[11,"islice","","Slice the array’s view in place.",3,null],[11,"get","","Return a reference to the element at `index`, or return `None`\nif the index is out of bounds.",3,null],[11,"get_mut","","Return a mutable reference to the element at `index`, or return `None`\nif the index is out of bounds.",3,null],[11,"uget","","Perform *unchecked* array indexing.",3,null],[11,"uget_mut","","Perform *unchecked* array indexing.",3,null],[11,"swap","","Swap elements at indices `index1` and `index2`.",3,null],[11,"subview","","Along `axis`, select the subview `index` and return a\nview with that axis removed.",3,null],[11,"subview_mut","","Along `axis`, select the subview `index` and return a read-write view\nwith the axis removed.",3,null],[11,"isubview","","Collapse dimension `axis` into length one,\nand select the subview of `index` along that axis.",3,null],[11,"into_subview","","Along `axis`, select the subview `index` and return `self`\nwith that axis removed.",3,null],[11,"select","","Along `axis`, select arbitrary subviews corresponding to `indices`\n and and copy them into a new array.",3,null],[11,"inner_iter","","Return an iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",3,null],[11,"inner_iter_mut","","Return an iterator that traverses over all dimensions but the innermost,\nand yields each inner row.",3,null],[11,"outer_iter","","Return an iterator that traverses over the outermost dimension\nand yields each subview.",3,null],[11,"outer_iter_mut","","Return an iterator that traverses over the outermost dimension\nand yields each subview.",3,null],[11,"axis_iter","","Return an iterator that traverses over `axis`\nand yields each subview along it.",3,null],[11,"axis_iter_mut","","Return an iterator that traverses over `axis`\nand yields each mutable subview along it.",3,null],[11,"axis_chunks_iter","","Return an iterator that traverses over `axis` by chunks of `size`,\nyielding non-overlapping views along that axis.",3,null],[11,"axis_chunks_iter_mut","","Return an iterator that traverses over `axis` by chunks of `size`,\nyielding non-overlapping read-write views along that axis.",3,null],[11,"diag","","Return an view of the diagonal elements of the array.",3,null],[11,"diag_mut","","Return a read-write view over the diagonal elements of the array.",3,null],[11,"into_diag","","Return the diagonal as a one-dimensional array.",3,null],[11,"is_standard_layout","","Return `true` if the array data is laid out in contiguous “C order” in\nmemory (where the last index is the most rapidly varying).",3,null],[11,"as_ptr","","Return a pointer to the first element in the array.",3,null],[11,"as_mut_ptr","","Return a mutable pointer to the first element in the array.",3,null],[11,"as_slice","","Return the array’s data as a slice, if it is contiguous and in standard order.\nReturn `None` otherwise.",3,null],[11,"as_slice_mut","","Return the array’s data as a slice, if it is contiguous and in standard order.\nReturn `None` otherwise.",3,null],[11,"as_slice_memory_order","","Return the array’s data as a slice if it is contiguous,\nreturn `None` otherwise.",3,null],[11,"as_slice_memory_order_mut","","Return the array’s data as a slice if it is contiguous,\nreturn `None` otherwise.",3,null],[11,"reshape","","Transform the array into `shape`; any shape with the same number of\nelements is accepted.",3,null],[11,"into_shape","","Transform the array into `shape`; any shape with the same number of\nelements is accepted, but the source array or view must be\ncontiguous, otherwise we cannot rearrange the dimension.",3,null],[11,"broadcast","","Act like a larger size and/or shape array by *broadcasting*\ninto a larger shape, if possible.",3,null],[11,"swap_axes","","Swap axes `ax` and `bx`.",3,null],[11,"reversed_axes","","Transpose the array by reversing axes.",3,null],[11,"t","","Return a transposed view of the array.",3,null],[11,"assign","","Perform an elementwise assigment to `self` from `rhs`.",3,null],[11,"assign_scalar","","Perform an elementwise assigment to `self` from scalar `x`.",3,null],[11,"zip_mut_with","","Traverse two arrays in unspecified order, in lock step,\ncalling the closure `f` on each element pair.",3,null],[11,"fold","","Traverse the array elements and apply a fold,\nreturning the resulting value.",3,null],[11,"map","","Call `f` by reference on each element and create a new array\nwith the new values.",3,null],[11,"mapv","","Call `f` by **v**alue on each element and create a new array\nwith the new values.",3,null],[11,"mapv_into","","Call `f` by **v**alue on each element, update the array with the new values\nand return it.",3,null],[11,"map_inplace","","Modify the array in place by calling `f` by mutable reference on each element.",3,null],[11,"mapv_inplace","","Modify the array in place by calling `f` by **v**alue on each element.\nThe array is updated with the new values.",3,null],[11,"visit","","Visit each element in the array by calling `f` by reference\non each element.",3,null],[11,"fold_axis","","Fold along an axis.",3,null],[11,"row","","Return an array view of row `index`.",3,null],[11,"row_mut","","Return a mutable array view of row `index`.",3,null],[11,"rows","","Return the number of rows (length of `Axis(0)`) in the two-dimensional array.",3,null],[11,"column","","Return an array view of column `index`.",3,null],[11,"column_mut","","Return a mutable array view of column `index`.",3,null],[11,"cols","","Return the number of columns (length of `Axis(1)`) in the two-dimensional array.",3,null],[11,"scalar_sum","","Return the sum of all elements in the array.",3,null],[11,"sum","","Return sum along `axis`.",3,null],[11,"mean","","Return mean along `axis`.",3,null],[11,"all_close","","Return `true` if the arrays&#39; elementwise differences are all within\nthe given absolute tolerance, `false` otherwise.",3,null],[0,"linalg","","Linear algebra.",null,null],[5,"general_mat_mul","ndarray::linalg","General matrix multiplication.",null,{"inputs":[{"name":"a"},{"name":"arraybase"},{"name":"arraybase"},{"name":"a"},{"name":"arraybase"}],"output":null}],[11,"dot","ndarray","Compute the dot product of one-dimensional arrays.",3,null],[11,"dot","","Perform matrix multiplication of rectangular arrays `self` and `rhs`.",3,null],[11,"dot","","",3,null],[11,"dot","","",3,null],[11,"scaled_add","","Perform the operation `self += alpha * rhs` efficiently, where\n`alpha` is a scalar and `rhs` is another array. This operation is\nalso known as `axpy` in BLAS.",3,null],[8,"Dot","ndarray::linalg","Matrix Multiplication",null,null],[16,"Output","","The result of the operation.",21,null],[10,"dot","","",21,null],[11,"add","ndarray","",3,null],[11,"add","","",3,null],[11,"add","","",3,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"sub","","",3,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"mul","","",3,null],[11,"div","","",3,null],[11,"div","","",3,null],[11,"div","","",3,null],[11,"rem","","",3,null],[11,"rem","","",3,null],[11,"rem","","",3,null],[11,"bitand","","",3,null],[11,"bitand","","",3,null],[11,"bitand","","",3,null],[11,"bitor","","",3,null],[11,"bitor","","",3,null],[11,"bitor","","",3,null],[11,"bitxor","","",3,null],[11,"bitxor","","",3,null],[11,"bitxor","","",3,null],[11,"shl","","",3,null],[11,"shl","","",3,null],[11,"shl","","",3,null],[11,"shr","","",3,null],[11,"shr","","",3,null],[11,"shr","","",3,null],[11,"add","num_complex","",22,null],[11,"add","","",22,null],[11,"sub","","",22,null],[11,"sub","","",22,null],[11,"mul","","",22,null],[11,"mul","","",22,null],[11,"div","","",22,null],[11,"div","","",22,null],[11,"add","","",22,null],[11,"add","","",22,null],[11,"sub","","",22,null],[11,"sub","","",22,null],[11,"mul","","",22,null],[11,"mul","","",22,null],[11,"div","","",22,null],[11,"div","","",22,null],[11,"neg","ndarray","Perform an elementwise negation of `self` and return the result.",3,null],[11,"not","","Perform an elementwise unary not of `self` and return the result.",3,null],[11,"add_assign","","",3,null],[11,"add_assign","","",3,null],[11,"sub_assign","","",3,null],[11,"sub_assign","","",3,null],[11,"mul_assign","","",3,null],[11,"mul_assign","","",3,null],[11,"div_assign","","",3,null],[11,"div_assign","","",3,null],[11,"rem_assign","","",3,null],[11,"rem_assign","","",3,null],[11,"bitand_assign","","",3,null],[11,"bitand_assign","","",3,null],[11,"bitor_assign","","",3,null],[11,"bitor_assign","","",3,null],[11,"bitxor_assign","","",3,null],[11,"bitxor_assign","","",3,null],[11,"shl_assign","","",3,null],[11,"shl_assign","","",3,null],[11,"shr_assign","","",3,null],[11,"shr_assign","","",3,null],[11,"from_shape","","Create a read-only array view borrowing its data from a slice.",3,null],[11,"split_at","","Split the array along `axis` and return one view strictly before the\nsplit and one view after the split.",3,null],[11,"from_shape","","Create a read-write array view borrowing its data from a slice.",3,null],[11,"split_at","","Split the array along `axis` and return one mutable view strictly\nbefore the split and one mutable view after the split.",3,null],[6,"Ix","","Array index type",null,null],[6,"Ixs","","Array index type (signed)",null,null],[6,"RcArray","","Array where the data is reference counted and copy on write, it\ncan act as both an owner as the data as well as a lightweight view.",null,null],[6,"Array","","Array where the data is owned uniquely.",null,null],[6,"OwnedArray","","Array where the data is owned uniquely.",null,null],[6,"ArrayView","","A lightweight array view.",null,null],[6,"ArrayViewMut","","A lightweight read-write array view.",null,null],[17,"S","","Slice value for the full range of an axis.",null,null],[8,"Dimension","","Array shape and index trait.",null,null],[16,"SliceArg","","`SliceArg` is the type which is used to specify slicing for this\ndimension.",23,null],[8,"RemoveAxis","","Array shape with a next smaller dimension.",null,null],[16,"Smaller","","",24,null],[10,"remove_axis","","",24,null],[8,"NdIndex","","Tuple or fixed size arrays that can be used to index an array.",null,null],[16,"Dim","","",25,null],[8,"AsArray","","Argument conversion into an array view",null,null],[8,"LinalgScalar","","Elements that support linear algebra operations.",null,null],[8,"NdFloat","","Floating-point element types `f32` and `f64`.",null,null],[8,"ShapeBuilder","","A trait for `Shape` and `D where D: Dimension` that allows\ncustomizing the memory layout (strides) of an array shape.",null,null],[16,"Dim","","",26,null],[10,"f","","",26,null],[10,"set_f","","",26,null],[10,"strides","","",26,null],[8,"Data","","Array representation trait.",null,null],[16,"Elem","","The array element type.",27,null],[8,"DataMut","","Array representation trait.",null,null],[8,"DataOwned","","Array representation trait.",null,null],[8,"DataShared","","Array representation trait.",null,null],[8,"DataClone","","Array representation trait.",null,null],[8,"FixedInitializer","","Fixed-size array used for array initialization",null,null],[16,"Elem","","",28,null],[10,"as_init_slice","","",28,null],[10,"len","","",28,{"inputs":[],"output":{"name":"usize"}}],[8,"ScalarOperand","","Elements that can be used as direct operands in arithmetic with arrays.",null,null],[11,"clone","","",6,null],[11,"clone","","",9,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[14,"s!","","Slice argument constructor.",null,null],[14,"stack!","","Stack arrays along the given axis.",null,null],[11,"into_iter","","",29,null],[11,"into_iter","","",30,null],[11,"ndim","","",31,null],[11,"size","","",31,null],[11,"size_checked","","",31,null],[11,"default_strides","","",31,null],[11,"first_index","","",31,null],[11,"next_for","","",31,null],[11,"stride_offset","","Self is an index, return the stride offset",31,{"inputs":[{"name":"ix"},{"name":"ix"}],"output":{"name":"isize"}}],[11,"stride_offset_checked","","Return stride offset for this dimension and index.",31,null],[11,"remove_axis","","",31,null]],"paths":[[3,"Axis"],[3,"Si"],[4,"ErrorKind"],[3,"ArrayBase"],[3,"Rc"],[3,"Vec"],[3,"ViewRepr"],[3,"Indexes"],[3,"Elements"],[3,"Indexed"],[3,"ElementsMut"],[3,"IndexedMut"],[3,"InnerIter"],[3,"InnerIterMut"],[3,"AxisIter"],[3,"AxisIterMut"],[3,"AxisChunksIter"],[3,"AxisChunksIterMut"],[3,"ShapeError"],[3,"Shape"],[3,"StrideShape"],[8,"Dot"],[3,"Complex"],[8,"Dimension"],[8,"RemoveAxis"],[8,"NdIndex"],[8,"ShapeBuilder"],[8,"Data"],[8,"FixedInitializer"],[6,"ArrayView"],[6,"ArrayViewMut"],[6,"Ix"]]};
searchIndex["itertools"] = {"doc":"Itertools — extra iterator adaptors, functions and macros.","items":[[3,"Dedup","itertools","An iterator adaptor that removes repeated duplicates.",null,null],[3,"Interleave","","An iterator adaptor that alternates elements from two iterators until both\nrun out.",null,null],[3,"InterleaveShortest","","An iterator adaptor that alternates elements from the two iterators until\none of them runs out.",null,null],[3,"Product","","An iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `I` and `J`.",null,null],[3,"PutBack","","An iterator adaptor that allows putting back a single\nitem to the front of the iterator.",null,null],[3,"PutBackN","","An iterator adaptor that allows putting multiple\nitems in front of the iterator.",null,null],[3,"Batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",null,null],[3,"GroupBy","","An iterator adaptor that groups iterator elements. Consecutive elements\nthat map to the same key (“runs”), are returned as the iterator elements.",null,null],[3,"Step","","An iterator adaptor that steps a number elements in the base iterator\nfor each iteration.",null,null],[3,"Merge","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MergeBy","","An iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",null,null],[3,"MultiPeek","","An iterator adaptor that allows the user to peek at multiple *.next()*\nvalues without advancing itself.",null,null],[3,"TakeWhileRef","","An iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate returns `true`.",null,null],[3,"WhileSome","","An iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",null,null],[3,"Coalesce","","An iterator adaptor that may join together adjacent elements.",null,null],[3,"MendSlices","","An iterator adaptor that glues together adjacent contiguous slices.",null,null],[3,"Combinations","","An iterator to iterate through all the combinations of pairs in a `Clone`-able iterator.",null,null],[3,"CombinationsN","","An iterator to iterate through all the `n`-length combinations in an iterator.",null,null],[3,"Unique","","An iterator adapter to filter out duplicate elements.",null,null],[3,"UniqueBy","","An iterator adapter to filter out duplicate elements.",null,null],[3,"Flatten","","An iterator adapter to simply flatten a structure.",null,null],[3,"Format","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"FormatDefault","","Format all iterator elements lazily, separated by `sep`.",null,null],[3,"ChunksLazy","","`ChunkLazy` is the storage for a lazy chunking operation.",null,null],[3,"Chunk","","An iterator for the elements in a single chunk.",null,null],[3,"Chunks","","An iterator that yields the Chunk iterators.",null,null],[3,"GroupByLazy","","`GroupByLazy` is the storage for the lazy grouping operation.",null,null],[3,"Group","","An iterator for the elements in a single group.",null,null],[3,"Groups","","An iterator that yields the Group iterators.",null,null],[3,"Intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",null,null],[3,"ISlice","","An iterator adaptor that yields a subset (a slice) of the base iterator.",null,null],[3,"KMerge","","An iterator adaptor that merges an abitrary number of base iterators in ascending order.\nIf all base iterators are sorted (ascending), the result is sorted.",null,null],[3,"Linspace","","An iterator of a sequence of evenly spaced floats.",null,null],[3,"PadUsing","","An iterator adaptor that pads a sequence to a minimum length by filling\nmissing elements using a closure.",null,null],[3,"RcIter","","A wrapper for `Rc&lt;RefCell&lt;I&gt;&gt;`, that implements the `Iterator` trait.",null,null],[12,"rciter","","The boxed iterator.",0,null],[3,"RepeatN","","An iterator that repeats an element exactly *n* times.",null,null],[3,"RepeatCall","","An iterator source that produces elements indefinitely by calling\na given closure.",null,null],[3,"Unfold","","`Unfold` is a general iterator builder: it has a mutable state value,\nand a closure with access to the state that produces the next value.",null,null],[12,"state","","Internal state that will be passed to the closure on the next iteration",1,null],[3,"Stride","","An iterator similar to the slice iterator, but with a certain number of steps\n(the stride) skipped per iteration.",null,null],[3,"StrideMut","","The mutable equivalent of Stride.",null,null],[3,"Tee","","One half of an iterator pair where both return the same elements.",null,null],[3,"ZipEq","","An iterator which iterates two other iterators simultaneously",null,null],[3,"ZipLongest","","An iterator which iterates two other iterators simultaneously",null,null],[3,"Zip","","An iterator that generalizes *.zip()* and allows running multiple iterators in lockstep.",null,null],[3,"ZipSlices","","An iterator which iterates two slices simultaneously.",null,null],[4,"Diff","","A type returned by the [`diff_with`](./fn.diff_with.html) function.",null,null],[13,"FirstMismatch","","The index of the first non-matching element along with both iterator&#39;s remaining elements\nstarting with the first mis-match.",2,null],[13,"Shorter","","The total number of elements that were in `J` along with the remaining elements of `I`.",2,null],[13,"Longer","","The total number of elements that were in `I` along with the remaining elements of `J`.",2,null],[4,"MinMaxResult","","`MinMaxResult` is an enum returned by `minmax`. See `Itertools::minmax()` for\nmore detail.",null,null],[13,"NoElements","","Empty iterator",3,null],[13,"OneElement","","Iterator with one element, so the minimum and maximum are the same",3,null],[13,"MinMax","","More than one element in the iterator, the first element is not larger\nthan the second",3,null],[4,"EitherOrBoth","","A value yielded by `ZipLongest`.\nContains one or two values, depending on which of the input iterators are exhausted.",null,null],[13,"Both","","Neither input iterator is exhausted yet, yielding two values.",4,null],[13,"Left","","The parameter iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the `self` iterator.",4,null],[13,"Right","","The `self` iterator of `.zip_longest()` is exhausted,\nonly yielding a value from the parameter iterator.",4,null],[4,"Partition","","Classifies the result of the `.partition_map()` closure into a\npartition.",null,null],[13,"Left","","Classify into the left partition.",5,null],[13,"Right","","Classify into the right partition.",5,null],[4,"FoldWhile","","An enum used for controlling the execution of `.fold_while()`.",null,null],[13,"Continue","","Continue folding with this value",6,null],[13,"Done","","Fold is complete and will return this value",6,null],[5,"diff_with","","Compares every element yielded by both `i` and `j` with the given function in lock-step and\nreturns a `Diff` which describes how `j` differs from `i`.",null,{"inputs":[{"name":"i"},{"name":"j"},{"name":"f"}],"output":{"name":"option"}}],[5,"linspace","","Return an iterator of evenly spaced floats.",null,{"inputs":[{"name":"f"},{"name":"f"},{"name":"usize"}],"output":{"name":"linspace"}}],[5,"equal","","Return `true` if both iterators produce equal sequences\n(elements pairwise equal and sequences of the same length),\n`false` otherwise.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"bool"}}],[5,"assert_equal","","Assert that two iterators produce equal sequences, with the same\nsemantics as *equal(a, b)*.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":null}],[5,"partition","","Partition a sequence using predicate `pred` so that elements\nthat map to `true` are placed before elements which map to `false`.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"usize"}}],[11,"clone","","",7,null],[11,"new","","Creat a new `Interleave` iterator.",7,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[11,"next","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new `InterleaveShortest` iterator.",8,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleaveshortest"}}],[11,"next","","",8,null],[11,"size_hint","","",8,null],[11,"clone","","",9,null],[11,"new","","Iterator element type is `A`",9,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"with_value","","Create a `PutBack` along with the `value` to put back.",9,{"inputs":[{"name":"item"},{"name":"i"}],"output":{"name":"self"}}],[11,"into_parts","","Split the `PutBack` into its parts.",9,null],[11,"put_back","","Put back a single value to the front of the iterator.",9,null],[11,"next","","",9,null],[11,"size_hint","","",9,null],[11,"new","","Iterator element type is `A`",10,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"put_back","","Puts x in front of the iterator.\nThe values are yielded in order.",10,null],[11,"next","","",10,null],[11,"size_hint","","",10,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"new","","Create a new cartesian product iterator",11,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"self"}}],[11,"next","","",11,null],[11,"size_hint","","",11,null],[11,"clone","","",12,null],[11,"new","","Create a new Batching iterator.",12,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"batching"}}],[11,"next","","",12,null],[11,"size_hint","","",12,null],[11,"clone","","",13,null],[11,"new","","Create a new `GroupBy` iterator.",13,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"clone","","",14,null],[11,"new","","Create a `Step` iterator.",14,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",14,null],[11,"size_hint","","",14,null],[11,"clone","","",15,null],[11,"next","","",15,null],[11,"size_hint","","",15,null],[11,"clone","","",16,null],[11,"next","","",16,null],[11,"size_hint","","",16,null],[11,"clone","","",17,null],[11,"new","","Create a `MultiPeek` iterator.",17,{"inputs":[{"name":"i"}],"output":{"name":"multipeek"}}],[11,"peek","","Works exactly like *.next()* with the only difference that it doesn&#39;t\nadvance itself. *.peek()* can be called multiple times, to peek\nfurther ahead.",17,null],[11,"next","","",17,null],[11,"size_hint","","",17,null],[11,"clone","","",18,null],[11,"new","","Create a new `Coalesce`.",18,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",18,null],[11,"size_hint","","",18,null],[11,"clone","","",19,null],[11,"new","","Create a new `Dedup`.",19,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",19,null],[11,"size_hint","","",19,null],[11,"clone","","",20,null],[11,"new","","Create a new `MendSlices`.",20,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",20,null],[11,"size_hint","","",20,null],[11,"new","","Create a new `TakeWhileRef` from a reference to clonable iterator.",21,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",21,null],[11,"size_hint","","",21,null],[11,"clone","","",22,null],[11,"new","","Create a new `WhileSome&lt;I&gt;`.",22,{"inputs":[{"name":"i"}],"output":{"name":"self"}}],[11,"next","","",22,null],[11,"size_hint","","",22,null],[11,"clone","","",23,null],[11,"new","","Create a new `Combinations` from a clonable iterator.",23,{"inputs":[{"name":"i"}],"output":{"name":"combinations"}}],[11,"next","","",23,null],[11,"size_hint","","",23,null],[11,"new","","Create a new `CombinationsN` from a clonable iterator.",24,{"inputs":[{"name":"i"},{"name":"usize"}],"output":{"name":"combinationsn"}}],[11,"next","","",24,null],[11,"clone","","",25,null],[11,"new","","Create a new `UniqueBy` iterator.",25,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"uniqueby"}}],[11,"next","","",25,null],[11,"size_hint","","",25,null],[11,"next","","",26,null],[11,"size_hint","","",26,null],[11,"clone","","",26,null],[11,"new","","Create a new `Flatten` iterator.",27,{"inputs":[{"name":"i"}],"output":{"name":"flatten"}}],[11,"next","","",27,null],[11,"next_back","","",27,null],[11,"clone","","",27,null],[0,"free","","Free functions that create iterator adaptors or call iterator methods.",null,null],[5,"enumerate","itertools::free","Iterate `iterable` with a running index.",null,{"inputs":[{"name":"i"}],"output":{"name":"enumerate"}}],[5,"rev","","Iterate `iterable` in reverse.",null,{"inputs":[{"name":"i"}],"output":{"name":"rev"}}],[5,"zip","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zip"}}],[5,"zip_eq","","Iterate `i` and `j` in lock step.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"zipeq"}}],[5,"chain","","Create an iterator that first iterates `i` and then `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"chain"}}],[5,"fold","","Perform a fold operation over the iterable.",null,{"inputs":[{"name":"i"},{"name":"b"},{"name":"f"}],"output":{"name":"b"}}],[5,"all","","Test whether the predicate holds for all elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"any","","Test whether the predicate holds for any elements in the iterable.",null,{"inputs":[{"name":"i"},{"name":"f"}],"output":{"name":"bool"}}],[5,"max","","Return the maximum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"min","","Return the minimum value of the iterable.",null,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[5,"interleave","","Create an iterator that interleaves elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"interleave"}}],[5,"merge","","Create an iterator that merges elements in `i` and `j`.",null,{"inputs":[{"name":"i"},{"name":"j"}],"output":{"name":"merge"}}],[5,"kmerge","","Create an iterator that merges elements of the contained iterators.",null,{"inputs":[{"name":"i"}],"output":{"name":"kmerge"}}],[5,"join","","Combine all iterator elements into one String, seperated by `sep`.",null,{"inputs":[{"name":"i"},{"name":"str"}],"output":{"name":"string"}}],[5,"sorted","","Collect all the iterable&#39;s elements into a sorted vector in ascending order.",null,{"inputs":[{"name":"i"}],"output":{"name":"vec"}}],[11,"clone","itertools","",28,null],[11,"fmt","","",29,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"fmt","","",28,null],[11,"next","","",30,null],[11,"drop","","",31,null],[11,"next","","",31,null],[11,"next","","",32,null],[11,"drop","","",33,null],[11,"next","","",33,null],[11,"clone","","",34,null],[11,"new","","Create a new Intersperse iterator",34,{"inputs":[{"name":"i"},{"name":"item"}],"output":{"name":"self"}}],[11,"next","","",34,null],[11,"size_hint","","",34,null],[11,"clone","","",35,null],[11,"new","","Create a new **ISlice**.",35,{"inputs":[{"name":"i"},{"name":"r"}],"output":{"name":"self"}}],[11,"next","","",35,null],[11,"size_hint","","",35,null],[11,"clone","","",36,null],[11,"next","","",36,null],[11,"size_hint","","",36,null],[11,"fmt","","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"next_back","","",37,null],[11,"fmt","","",3,null],[11,"eq","","",3,null],[11,"ne","","",3,null],[11,"into_option","","`into_option` creates an `Option` of type `(T, T)`. The returned `Option`\nhas variant `None` if and only if the `MinMaxResult` has variant\n`NoElements`. Otherwise variant `Some(x, y)` is returned where `x &lt;= y`.\nIf `MinMaxResult` has variant `OneElement(x)`, performing this operation\nwill make one clone of `x`.",3,null],[0,"misc","","A module of helper traits and iterators that are not intended to be used\ndirectly.",null,null],[3,"FlatTuples","itertools::misc","A helper iterator that maps an iterator of tuples like\n`((A, B), C)` to an iterator of `(A, B, C)`.",null,null],[8,"IntoIteratorTuple","","Apply `IntoIterator` on each element of a tuple.",null,null],[16,"Output","","Tuple of values that implement `Iterator`.",38,null],[10,"into_iterator_tuple","","Return a tuple of iterators.",38,null],[8,"AppendTuple","","A helper trait for (x, y, z) ++ w =&gt; (x, y, z, w),\nused for implementing `iproduct!`.",null,null],[16,"Result","","Resulting tuple type",39,null],[10,"append","","“Append” value `x` to a tuple.",39,null],[8,"GenericRange","","`GenericRange` is implemented by Rust&#39;s built-in range types, produced\nby range syntax like `a..`, `..b` or `c..d`.",null,null],[8,"ToFloat","","Helper trait to convert usize to floating point type.",null,null],[8,"MendSlice","","A trait for items that can *maybe* be joined together.",null,null],[8,"Slice","","A helper trait to let `ZipSlices` accept both `&amp;[T]` and `&amp;mut [T]`.",null,null],[16,"Item","","The type of a reference to the slice&#39;s elements",40,null],[11,"clone","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next_back","","",41,null],[11,"start","core::ops","",42,null],[11,"end","","",43,null],[11,"start","","",44,null],[11,"end","","",44,null],[11,"clone","itertools","",45,null],[11,"new","","Create a new **PadUsing** iterator.",45,{"inputs":[{"name":"i"},{"name":"usize"},{"name":"f"}],"output":{"name":"padusing"}}],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"new","","Create a new RcIter.",0,{"inputs":[{"name":"i"}],"output":{"name":"rciter"}}],[11,"clone","","",0,null],[11,"next","","",0,null],[11,"size_hint","","",0,null],[11,"next_back","","",0,null],[11,"new","","Create a new **RepeatN** with **n** repetitions.",46,{"inputs":[{"name":"a"},{"name":"usize"}],"output":{"name":"self"}}],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"new","","Create a new `RepeatCall` from a closure.",47,{"inputs":[{"name":"f"}],"output":{"name":"self"}}],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"next_back","","",47,null],[11,"clone","","",1,null],[11,"new","","Creates a new iterator with the specified closure as the &quot;iterator\nfunction&quot; and an initial state to eventually pass to the closure",1,{"inputs":[{"name":"st"},{"name":"f"}],"output":{"name":"unfold"}}],[11,"next","","",1,null],[11,"size_hint","","",1,null],[0,"size_hint","","Arithmetic on **Iterator** *.size_hint()* values.",null,null],[5,"add","itertools::size_hint","Add **SizeHint** correctly.",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"add_scalar","","Add **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"sub_scalar","","Sbb **x** correctly to a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul_scalar","","Multiply **x** correctly with a **SizeHint**.",null,{"inputs":[{"name":"sizehint"},{"name":"usize"}],"output":{"name":"sizehint"}}],[5,"mul","","Multiply **SizeHint** correctly",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"max","","Return the maximum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[5,"min","","Return the minimum",null,{"inputs":[{"name":"sizehint"},{"name":"sizehint"}],"output":{"name":"sizehint"}}],[6,"SizeHint","","**SizeHint** is the return type of **Iterator::size_hint()**.",null,null],[11,"from_ptr_len","itertools","Create a Stride iterator from a raw pointer.",48,null],[11,"from_ptr_len","","Create a StrideMut iterator from a raw pointer.",49,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",48,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",48,{"inputs":[{"name":"stride"},{"name":"isize"}],"output":{"name":"stride"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",48,null],[11,"len","","Return the number of elements in the iterator.",48,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",48,null],[11,"next","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"index","","Return a reference to the element at a given index.",48,null],[11,"fmt","","",48,null],[11,"len","","",48,null],[11,"get_unchecked","","",48,null],[11,"from_slice","","Create Stride iterator from a slice and the element step count.",49,null],[11,"from_stride","","Create Stride iterator from an existing Stride iterator",49,{"inputs":[{"name":"stridemut"},{"name":"isize"}],"output":{"name":"stridemut"}}],[11,"swap_ends","","Swap the begin and end and reverse the stride,\nin effect reversing the iterator.",49,null],[11,"len","","Return the number of elements in the iterator.",49,null],[11,"get","","Return a reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"index","","Return a reference to the element at a given index.",49,null],[11,"fmt","","",49,null],[11,"len","","",49,null],[11,"get_unchecked","","",49,null],[11,"clone","","",48,null],[11,"get_mut","","Return a mutable reference to the element of a stride at the\ngiven index, or None if the index is out of bounds.",49,null],[11,"index_mut","","Return a mutable reference to the element at a given index.",49,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"clone","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"clone","","",52,null],[11,"new","","Create a new `ZipLongest` iterator.",52,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"ziplongest"}}],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"clone","","",53,null],[11,"new","","Create a new `Zip` from a tuple of iterators.",53,{"inputs":[{"name":"t"}],"output":{"name":"zip"}}],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"next","","",53,null],[11,"size_hint","","",53,null],[11,"clone","","",54,null],[11,"new","","Create a new `ZipSlices` from slices `a` and `b`.",54,null],[11,"from_slices","","Create a new `ZipSlices` from slices `a` and `b`.",54,{"inputs":[{"name":"t"},{"name":"u"}],"output":{"name":"self"}}],[11,"next","","",54,null],[11,"size_hint","","",54,null],[11,"next_back","","",54,null],[11,"len","","",54,null],[11,"get_unchecked","","",54,null],[6,"MapFn","","The function pointer map iterator created with `.map_fn()`.",null,null],[8,"Itertools","","The trait `Itertools`: extra iterator adaptors and methods for iterators.",null,null],[11,"interleave","","Alternate elements from two iterators until both\nrun out.",55,null],[11,"interleave_shortest","","Alternate elements from two iterators until one of them runs out.",55,null],[11,"intersperse","","An iterator adaptor to insert a particular value\nbetween each element of the adapted iterator.",55,null],[11,"zip_longest","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of two optional elements.",55,null],[11,"zip_eq","","Create an iterator which iterates over both this and the specified\niterator simultaneously, yielding pairs of elements.",55,null],[11,"batching","","A “meta iterator adaptor”. Its closure recives a reference to the iterator\nand may pick off as many elements as it likes, to produce the next iterator element.",55,null],[11,"group_by","","Group iterator elements. Consecutive elements that map to the same key (“runs”),\nare returned as the iterator elements of `GroupBy`.",55,null],[11,"group_by_lazy","","Return an iterable that can group iterator elements.\nConsecutive elements that map to the same key (“runs”), are assigned\nto the same group.",55,null],[11,"chunks_lazy","","Return an iterable that can chunk the iterator.",55,null],[11,"tee","","Split into an iterator pair that both yield all elements from\nthe original iterator.",55,null],[11,"slice","","Return a sliced iterator.",55,null],[11,"into_rc","","Return an iterator inside a `Rc&lt;RefCell&lt;_&gt;&gt;` wrapper.",55,null],[11,"step","","Return an iterator adaptor that steps `n` elements in the base iterator\nfor each iteration.",55,null],[11,"merge","","Return an iterator adaptor that merges the two base iterators in ascending order.\nIf both base iterators are sorted (ascending), the result is sorted.",55,null],[11,"merge_by","","Return an iterator adaptor that merges the two base iterators in order.\nThis is much like `.merge()` but allows for a custom ordering.",55,null],[11,"kmerge","","Return an iterator adaptor that flattens an iterator of iterators by\nmerging them in ascending order.",55,null],[11,"cartesian_product","","Return an iterator adaptor that iterates over the cartesian product of\nthe element sets of two iterators `self` and `J`.",55,null],[11,"multipeek","","Return an iterator adapter that allows peeking multiple values.",55,null],[11,"coalesce","","Return an iterator adaptor that uses the passed-in closure to\noptionally merge together consecutive elements.",55,null],[11,"dedup","","Remove duplicates from sections of consecutive identical elements.\nIf the iterator is sorted, all elements will be unique.",55,null],[11,"unique","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration. Duplicates\nare detected using hash and equality.",55,null],[11,"unique_by","","Return an iterator adaptor that filters out elements that have\nalready been produced once during the iteration.",55,null],[11,"mend_slices","","Return an iterator adaptor that joins together adjacent slices if possible.",55,null],[11,"take_while_ref","","Return an iterator adaptor that borrows from a `Clone`-able iterator\nto only pick off elements while the predicate `f` returns `true`.",55,null],[11,"while_some","","Return an iterator adaptor that filters `Option&lt;A&gt;` iterator elements\nand produces `A`. Stops on the first `None` encountered.",55,null],[11,"combinations","","Return an iterator adaptor that iterates over the combinations of\nthe elements from an iterator.",55,null],[11,"combinations_n","","Return an iterator adaptor that iterates over the `n`-length combinations of\nthe elements from an iterator.",55,null],[11,"pad_using","","Return an iterator adaptor that pads the sequence to a minimum length of\n`min` by filling missing elements using a closure `f`.",55,null],[11,"flatten","","Unravel a nested iterator.",55,null],[11,"map_fn","","Like regular `.map()`, specialized to using a simple function pointer instead,\nso that the resulting `Map` iterator value can be cloned.",55,null],[11,"find_position","","Find the position and value of the first element satisfying a predicate.",55,null],[11,"dropn","","Consume the first `n` elements of the iterator eagerly.",55,null],[11,"dropping","","Consume the first `n` elements from the iterator eagerly,\nand return the same iterator again.",55,null],[11,"dropping_back","","Consume the last `n` elements from the iterator eagerly,\nand return the same iterator again.",55,null],[11,"foreach","","Run the closure `f` eagerly on each element of the iterator.",55,null],[11,"collect_vec","","`.collect_vec()` is simply a type specialization of `.collect()`,\nfor convenience.",55,null],[11,"set_from","","Assign to each reference in `self` from the `from` iterator,\nstopping at the shortest of the two iterators.",55,null],[11,"join","","Combine all iterator elements into one String, seperated by `sep`.",55,null],[11,"format_default","","Format all iterator elements, separated by `sep`.",55,null],[11,"format","","Format all iterator elements, separated by `sep`.",55,null],[11,"fold_results","","Fold `Result` values from an iterator.",55,null],[11,"fold_options","","Fold `Option` values from an iterator.",55,null],[11,"fold1","","Accumulator of the elements in the iterator.",55,null],[11,"fold_while","","An iterator adaptor that applies a function, producing a single, final value.",55,null],[11,"is_empty_hint","","Tell if the iterator is empty or not according to its size hint.\nReturn `None` if the size hint does not tell, or return a `Some`\nvalue with the emptiness if it&#39;s possible to tell.",55,null],[11,"sorted","","Collect all iterator elements into a sorted vector in ascending order.",55,null],[11,"sorted_by","","Collect all iterator elements into a sorted vector.",55,null],[11,"sort_by","","**Deprecated:** renamed to `.sorted_by()`",55,null],[11,"partition_map","","Collect all iterator elements into one of two\npartitions. Unlike `Iterator::partition`, each partition may\nhave a distinct type.",55,null],[11,"minmax","","Return the minimum and maximum elements in the iterator.",55,null],[11,"minmax_by_key","","Return the minimum and maximum element of an iterator, as determined by\nthe specified function.",55,null],[14,"iproduct!","","Create an iterator over the “cartesian product” of iterators.",null,null],[14,"izip!","","Create an iterator running multiple iterators in lockstep.",null,null]],"paths":[[3,"RcIter"],[3,"Unfold"],[4,"Diff"],[4,"MinMaxResult"],[4,"EitherOrBoth"],[4,"Partition"],[4,"FoldWhile"],[3,"Interleave"],[3,"InterleaveShortest"],[3,"PutBack"],[3,"PutBackN"],[3,"Product"],[3,"Batching"],[3,"GroupBy"],[3,"Step"],[3,"Merge"],[3,"MergeBy"],[3,"MultiPeek"],[3,"Coalesce"],[3,"Dedup"],[3,"MendSlices"],[3,"TakeWhileRef"],[3,"WhileSome"],[3,"Combinations"],[3,"CombinationsN"],[3,"UniqueBy"],[3,"Unique"],[3,"Flatten"],[3,"FormatDefault"],[3,"Format"],[3,"Groups"],[3,"Group"],[3,"Chunks"],[3,"Chunk"],[3,"Intersperse"],[3,"ISlice"],[3,"KMerge"],[3,"Linspace"],[8,"IntoIteratorTuple"],[8,"AppendTuple"],[8,"Slice"],[3,"FlatTuples"],[3,"RangeFrom"],[3,"RangeTo"],[3,"Range"],[3,"PadUsing"],[3,"RepeatN"],[3,"RepeatCall"],[3,"Stride"],[3,"StrideMut"],[3,"Tee"],[3,"ZipEq"],[3,"ZipLongest"],[3,"Zip"],[3,"ZipSlices"],[8,"Itertools"]]};
searchIndex["toml"] = {"doc":"A TOML-parsing library","items":[[3,"Parser","toml","Parser for converting a string to a TOML `Value` instance.",null,null],[12,"errors","","A list of all errors which have occurred during parsing.",0,null],[3,"ParserError","","A structure representing a parse error.",null,null],[12,"lo","","The low byte at which this error is pointing at.",1,null],[12,"hi","","One byte beyond the last character at which this error is pointing at.",1,null],[12,"desc","","A human-readable description explaining what the error is.",1,null],[3,"Encoder","","A structure to transform Rust values into TOML values.",null,null],[12,"toml","","Output TOML that is emitted. The current version of this encoder forces\nthe top-level representation of a structure to be a table.",2,null],[3,"Decoder","","A structure to transform TOML values into Rust values.",null,null],[12,"toml","","The TOML value left over after decoding. This can be used to inspect\nwhether fields were decoded or not.",3,null],[3,"DecodeError","","Description for errors which can occur while decoding a type.",null,null],[12,"field","","Field that this error applies to.",4,null],[12,"kind","","The type of error which occurred while decoding,",4,null],[4,"Error","","Enumeration of errors which can occur while encoding a rust value into a\nTOML value.",null,null],[13,"NeedsKey","","Indication that a key was needed when a value was emitted, but no key\nwas previously emitted.",5,null],[13,"NoValue","","Indication that a key was emitted, but not value was emitted.",5,null],[13,"InvalidMapKeyLocation","","Indicates that a map key was attempted to be emitted at an invalid\nlocation.",5,null],[13,"InvalidMapKeyType","","Indicates that a type other than a string was attempted to be used as a\nmap key type.",5,null],[13,"Custom","","A custom error type was generated",5,null],[4,"DecodeErrorKind","","Enumeration of possible errors which can occur while decoding a structure.",null,null],[13,"ApplicationError","","An error flagged by the application, e.g. value out of range",6,null],[13,"ExpectedField","","A field was expected, but none was found.",6,null],[13,"UnknownField","","A field was found, but it was not an expected one.",6,null],[13,"ExpectedType","","A field was found, but it had the wrong type.",6,null],[13,"ExpectedMapKey","","The nth map key was expected, but none was found.",6,null],[13,"ExpectedMapElement","","The nth map element was expected, but none was found.",6,null],[13,"NoEnumVariants","","An enum decoding was requested, but no variants were supplied",6,null],[13,"NilTooLong","","The unit type was being decoded, but a non-zero length string was found",6,null],[13,"SyntaxError","","There was an error with the syntactical structure of the TOML.",6,null],[13,"CustomError","","A custom error was generated when decoding.",6,null],[13,"EndOfStream","","The end of the TOML input was reached too soon",6,null],[13,"InvalidType","","Produced by serde ...",6,null],[4,"Value","","Representation of a TOML value.",null,null],[13,"String","","",7,null],[13,"Integer","","",7,null],[13,"Float","","",7,null],[13,"Boolean","","",7,null],[13,"Datetime","","",7,null],[13,"Array","","",7,null],[13,"Table","","",7,null],[5,"encode","","Encodes an encodable value into a TOML value.",null,{"inputs":[{"name":"t"}],"output":{"name":"value"}}],[5,"encode_str","","Encodes an encodable value into a TOML string.",null,{"inputs":[{"name":"t"}],"output":{"name":"string"}}],[5,"decode","","Decodes a TOML value into a decodable type.",null,{"inputs":[{"name":"value"}],"output":{"name":"option"}}],[5,"decode_str","","Decodes a string into a toml-encoded value.",null,{"inputs":[{"name":"str"}],"output":{"name":"option"}}],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"new","","Creates a new parser for a string.",0,{"inputs":[{"name":"str"}],"output":{"name":"parser"}}],[11,"to_linecol","","Converts a byte offset from an error message to a (line, column) pair",0,null],[11,"set_require_newline_after_table","","Historical versions of toml-rs accidentally allowed a newline after a\ntable definition, but the TOML spec requires a newline after a table\ndefinition header.",0,null],[11,"parse","","Executes the parser, parsing the string contained within.",0,null],[11,"lookup","","Parse a path into a vector of paths",0,null],[11,"description","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",7,null],[11,"emit_nil","","",2,null],[11,"emit_usize","","",2,null],[11,"emit_u8","","",2,null],[11,"emit_u16","","",2,null],[11,"emit_u32","","",2,null],[11,"emit_u64","","",2,null],[11,"emit_isize","","",2,null],[11,"emit_i8","","",2,null],[11,"emit_i16","","",2,null],[11,"emit_i32","","",2,null],[11,"emit_i64","","",2,null],[11,"emit_bool","","",2,null],[11,"emit_f32","","",2,null],[11,"emit_f64","","",2,null],[11,"emit_char","","",2,null],[11,"emit_str","","",2,null],[11,"emit_enum","","",2,null],[11,"emit_enum_variant","","",2,null],[11,"emit_enum_variant_arg","","",2,null],[11,"emit_enum_struct_variant","","",2,null],[11,"emit_enum_struct_variant_field","","",2,null],[11,"emit_struct","","",2,null],[11,"emit_struct_field","","",2,null],[11,"emit_tuple","","",2,null],[11,"emit_tuple_arg","","",2,null],[11,"emit_tuple_struct","","",2,null],[11,"emit_tuple_struct_arg","","",2,null],[11,"emit_option","","",2,null],[11,"emit_option_none","","",2,null],[11,"emit_option_some","","",2,null],[11,"emit_seq","","",2,null],[11,"emit_seq_elt","","",2,null],[11,"emit_map","","",2,null],[11,"emit_map_elt_key","","",2,null],[11,"emit_map_elt_val","","",2,null],[11,"encode","","",7,null],[11,"fmt","","",5,null],[11,"new","","Constructs a new encoder which will emit to the given output stream.",2,{"inputs":[],"output":{"name":"encoder"}}],[11,"fmt","","",5,null],[11,"description","","",5,null],[11,"read_nil","","",3,null],[11,"read_usize","","",3,null],[11,"read_u64","","",3,null],[11,"read_u32","","",3,null],[11,"read_u16","","",3,null],[11,"read_u8","","",3,null],[11,"read_isize","","",3,null],[11,"read_i64","","",3,null],[11,"read_i32","","",3,null],[11,"read_i16","","",3,null],[11,"read_i8","","",3,null],[11,"read_bool","","",3,null],[11,"read_f64","","",3,null],[11,"read_f32","","",3,null],[11,"read_char","","",3,null],[11,"read_str","","",3,null],[11,"read_enum","","",3,null],[11,"read_enum_variant","","",3,null],[11,"read_enum_variant_arg","","",3,null],[11,"read_enum_struct_variant","","",3,null],[11,"read_enum_struct_variant_field","","",3,null],[11,"read_struct","","",3,null],[11,"read_struct_field","","",3,null],[11,"read_tuple","","",3,null],[11,"read_tuple_arg","","",3,null],[11,"read_tuple_struct","","",3,null],[11,"read_tuple_struct_arg","","",3,null],[11,"read_option","","",3,null],[11,"read_seq","","",3,null],[11,"read_seq_elt","","",3,null],[11,"read_map","","",3,null],[11,"read_map_elt_key","","",3,null],[11,"read_map_elt_val","","",3,null],[11,"error","","",3,null],[11,"fmt","","",4,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"fmt","","",6,null],[11,"eq","","",6,null],[11,"ne","","",6,null],[11,"new","","Creates a new decoder, consuming the TOML value to decode.",3,{"inputs":[{"name":"value"}],"output":{"name":"decoder"}}],[11,"fmt","","",4,null],[11,"description","","",4,null],[6,"Array","","Type representing a TOML array, payload of the Value::Array variant",null,null],[6,"Table","","Type representing a TOML table, payload of the Value::Table variant",null,null],[11,"fmt","","",7,null],[11,"clone","","",7,null],[11,"eq","","",7,null],[11,"ne","","",7,null],[11,"same_type","","Tests whether this and another value have the same type.",7,null],[11,"type_str","","Returns a human-readable representation of the type of this value.",7,null],[11,"as_str","","Extracts the string of this value if it is a string.",7,null],[11,"as_integer","","Extracts the integer value if it is an integer.",7,null],[11,"as_float","","Extracts the float value if it is a float.",7,null],[11,"as_bool","","Extracts the boolean value if it is a boolean.",7,null],[11,"as_datetime","","Extracts the datetime value if it is a datetime.",7,null],[11,"as_slice","","Extracts the array value if it is an array.",7,null],[11,"as_table","","Extracts the table value if it is a table.",7,null],[11,"lookup","","Lookups for value at specified path.",7,null],[11,"lookup_mut","","Lookups for mutable value at specified path.",7,null],[11,"from_str","","",7,{"inputs":[{"name":"str"}],"output":{"name":"result"}}]],"paths":[[3,"Parser"],[3,"ParserError"],[3,"Encoder"],[3,"Decoder"],[3,"DecodeError"],[4,"Error"],[4,"DecodeErrorKind"],[4,"Value"]]};
searchIndex["rustc_serialize"] = {"doc":"Support code for encoding and decoding types.","items":[[11,"encode","collections::string","",0,null],[11,"decode","","",0,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::boxed","",1,null],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"decode","","",1,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::rc","",2,null],[11,"decode","","",2,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::borrow","",3,null],[11,"decode","","",3,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec","",4,null],[11,"decode","","",4,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::option","",5,null],[11,"decode","","",5,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::marker","",6,null],[11,"decode","","",6,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::path","",7,null],[11,"encode","","",8,null],[11,"decode","","",8,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","core::cell","",9,null],[11,"decode","","",9,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","","",10,null],[11,"decode","","",10,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","alloc::arc","",11,null],[11,"decode","","",11,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::linked_list","",12,null],[11,"decode","","",12,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::vec_deque","",13,null],[11,"decode","","",13,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::map","",14,null],[11,"decode","","",14,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","collections::btree::set","",15,null],[11,"decode","","",15,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::map","",16,null],[11,"decode","","",16,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[11,"encode","std::collections::hash::set","",17,null],[11,"decode","","",17,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[0,"base64","rustc_serialize","Base64 binary-to-text encoding",null,null],[3,"Config","rustc_serialize::base64","Contains configuration parameters for `to_base64`.",null,null],[12,"char_set","","Character set to use",18,null],[12,"newline","","Newline to use",18,null],[12,"pad","","True to pad output with `=` characters",18,null],[12,"line_length","","`Some(len)` to wrap lines at `len`, `None` to disable line wrapping",18,null],[4,"CharacterSet","","Available encoding character sets",null,null],[13,"Standard","","The standard character set (uses `+` and `/`)",19,null],[13,"UrlSafe","","The URL safe character set (uses `-` and `_`)",19,null],[4,"Newline","","Available newline types",null,null],[13,"LF","","A linefeed (i.e. Unix-style newline)",20,null],[13,"CRLF","","A carriage return and a linefeed (i.e. Windows-style newline)",20,null],[4,"FromBase64Error","","Errors that can occur when decoding a base64 encoded string",null,null],[13,"InvalidBase64Byte","","The input contained a character not part of the base64 format",21,null],[13,"InvalidBase64Length","","The input had an invalid length",21,null],[7,"STANDARD","","Configuration for RFC 4648 standard base64 encoding",null,null],[7,"URL_SAFE","","Configuration for RFC 4648 base64url encoding",null,null],[7,"MIME","","Configuration for RFC 2045 MIME base64 encoding",null,null],[8,"ToBase64","","A trait for converting a value to base64 encoding.",null,null],[10,"to_base64","","Converts the value of `self` to a base64 value following the specified\nformat configuration, returning the owned string.",22,null],[8,"FromBase64","","A trait for converting from base64 encoded values.",null,null],[10,"from_base64","","Converts the value of `self`, interpreted as base64 encoded data, into\nan owned vector of bytes, returning the vector.",23,null],[11,"fmt","","",19,null],[11,"clone","","",19,null],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"fmt","","",18,null],[11,"clone","","",18,null],[11,"clone","","",21,null],[11,"fmt","","",21,null],[11,"description","","",21,null],[11,"fmt","","",21,null],[0,"hex","rustc_serialize","Hex binary-to-text encoding",null,null],[4,"FromHexError","rustc_serialize::hex","Errors that can occur when decoding a hex encoded string",null,null],[13,"InvalidHexCharacter","","The input contained a character not part of the hex format",24,null],[13,"InvalidHexLength","","The input had an invalid length",24,null],[8,"ToHex","","A trait for converting a value to hexadecimal encoding",null,null],[10,"to_hex","","Converts the value of `self` to a hex value, returning the owned\nstring.",25,null],[8,"FromHex","","A trait for converting hexadecimal encoded values",null,null],[10,"from_hex","","Converts the value of `self`, interpreted as hexadecimal encoded data,\ninto an owned vector of bytes, returning the vector.",26,null],[11,"clone","","",24,null],[11,"fmt","","",24,null],[11,"description","","",24,null],[11,"fmt","","",24,null],[0,"json","rustc_serialize","JSON parsing and serialization",null,null],[3,"PrettyJson","rustc_serialize::json","",null,null],[3,"AsJson","","",null,null],[3,"AsPrettyJson","","",null,null],[3,"Encoder","","A structure for implementing serialization to JSON.",null,null],[3,"Stack","","A Stack represents the current position of the parser in the logical\nstructure of the JSON stream.\nFor example foo.bar[3].x",null,null],[3,"Parser","","A streaming JSON parser implemented as an iterator of JsonEvent, consuming\nan iterator of char.",null,null],[3,"Builder","","A Builder consumes a json::Parser to create a generic Json structure.",null,null],[3,"Decoder","","A structure to decode JSON to values in rust.",null,null],[4,"Json","","Represents a json value",null,null],[13,"I64","","",27,null],[13,"U64","","",27,null],[13,"F64","","",27,null],[13,"String","","",27,null],[13,"Boolean","","",27,null],[13,"Array","","",27,null],[13,"Object","","",27,null],[13,"Null","","",27,null],[4,"ErrorCode","","The errors that can arise while parsing a JSON stream.",null,null],[13,"InvalidSyntax","","",28,null],[13,"InvalidNumber","","",28,null],[13,"EOFWhileParsingObject","","",28,null],[13,"EOFWhileParsingArray","","",28,null],[13,"EOFWhileParsingValue","","",28,null],[13,"EOFWhileParsingString","","",28,null],[13,"KeyMustBeAString","","",28,null],[13,"ExpectedColon","","",28,null],[13,"TrailingCharacters","","",28,null],[13,"TrailingComma","","",28,null],[13,"InvalidEscape","","",28,null],[13,"InvalidUnicodeCodePoint","","",28,null],[13,"LoneLeadingSurrogateInHexEscape","","",28,null],[13,"UnexpectedEndOfHexEscape","","",28,null],[13,"UnrecognizedHex","","",28,null],[13,"NotFourDigit","","",28,null],[13,"ControlCharacterInString","","",28,null],[13,"NotUtf8","","",28,null],[4,"ParserError","","",null,null],[13,"SyntaxError","","msg, line, col",29,null],[13,"IoError","","",29,null],[4,"DecoderError","","",null,null],[13,"ParseError","","",30,null],[13,"ExpectedError","","",30,null],[13,"MissingFieldError","","",30,null],[13,"UnknownVariantError","","",30,null],[13,"ApplicationError","","",30,null],[13,"EOF","","",30,null],[4,"EncoderError","","",null,null],[13,"FmtError","","",31,null],[13,"BadHashmapKey","","",31,null],[4,"JsonEvent","","The output of the streaming parser.",null,null],[13,"ObjectStart","","",32,null],[13,"ObjectEnd","","",32,null],[13,"ArrayStart","","",32,null],[13,"ArrayEnd","","",32,null],[13,"BooleanValue","","",32,null],[13,"I64Value","","",32,null],[13,"U64Value","","",32,null],[13,"F64Value","","",32,null],[13,"StringValue","","",32,null],[13,"NullValue","","",32,null],[13,"Error","","",32,null],[4,"StackElement","","StackElements compose a Stack.\nFor example, Key(&quot;foo&quot;), Key(&quot;bar&quot;), Index(3) and Key(&quot;x&quot;) are the\nStackElements compositing the stack that represents foo.bar[3].x",null,null],[13,"Index","","",33,null],[13,"Key","","",33,null],[5,"error_str","","Returns a readable error string for a given error code.",null,{"inputs":[{"name":"errorcode"}],"output":{"name":"str"}}],[5,"decode","","Shortcut function to decode a JSON `&amp;str` into an object",null,{"inputs":[{"name":"str"}],"output":{"name":"decoderesult"}}],[5,"encode","","Shortcut function to encode a `T` into a JSON `String`",null,{"inputs":[{"name":"t"}],"output":{"name":"encoderesult"}}],[5,"as_json","","Create an `AsJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asjson"}}],[5,"as_pretty_json","","Create an `AsPrettyJson` wrapper which can be used to print a value as JSON\non-the-fly via `write!`",null,{"inputs":[{"name":"t"}],"output":{"name":"asprettyjson"}}],[6,"Array","","",null,null],[6,"Object","","",null,null],[6,"BuilderError","","",null,null],[6,"EncodeResult","","",null,null],[6,"DecodeResult","","",null,null],[8,"ToJson","","A trait for converting values to JSON",null,null],[10,"to_json","","Converts the value of `self` to an instance of JSON",34,null],[11,"fmt","","",27,null],[11,"partial_cmp","","",27,null],[11,"lt","","",27,null],[11,"le","","",27,null],[11,"gt","","",27,null],[11,"ge","","",27,null],[11,"eq","","",27,null],[11,"ne","","",27,null],[11,"clone","","",27,null],[11,"eq","","",28,null],[11,"clone","","",28,null],[11,"fmt","","",29,null],[11,"eq","","",29,null],[11,"fmt","","",30,null],[11,"eq","","",30,null],[11,"ne","","",30,null],[11,"fmt","","",31,null],[11,"clone","","",31,null],[11,"fmt","","",28,null],[11,"description","","",30,null],[11,"cause","","",30,null],[11,"fmt","","",30,null],[11,"from","","",30,{"inputs":[{"name":"parsererror"}],"output":{"name":"decodererror"}}],[11,"description","","",29,null],[11,"fmt","","",29,null],[11,"from","","",29,{"inputs":[{"name":"error"}],"output":{"name":"parsererror"}}],[11,"description","","",31,null],[11,"fmt","","",31,null],[11,"from","","",31,{"inputs":[{"name":"error"}],"output":{"name":"encodererror"}}],[11,"new_pretty","","Creates a new encoder whose output will be written in human-readable\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"new","","Creates a new encoder whose output will be written in compact\nJSON to the specified writer",35,{"inputs":[{"name":"write"}],"output":{"name":"encoder"}}],[11,"set_indent","","Set the number of spaces to indent for each level.\nThis is safe to set during encoding.",35,null],[11,"emit_nil","","",35,null],[11,"emit_usize","","",35,null],[11,"emit_u64","","",35,null],[11,"emit_u32","","",35,null],[11,"emit_u16","","",35,null],[11,"emit_u8","","",35,null],[11,"emit_isize","","",35,null],[11,"emit_i64","","",35,null],[11,"emit_i32","","",35,null],[11,"emit_i16","","",35,null],[11,"emit_i8","","",35,null],[11,"emit_bool","","",35,null],[11,"emit_f64","","",35,null],[11,"emit_f32","","",35,null],[11,"emit_char","","",35,null],[11,"emit_str","","",35,null],[11,"emit_enum","","",35,null],[11,"emit_enum_variant","","",35,null],[11,"emit_enum_variant_arg","","",35,null],[11,"emit_enum_struct_variant","","",35,null],[11,"emit_enum_struct_variant_field","","",35,null],[11,"emit_struct","","",35,null],[11,"emit_struct_field","","",35,null],[11,"emit_tuple","","",35,null],[11,"emit_tuple_arg","","",35,null],[11,"emit_tuple_struct","","",35,null],[11,"emit_tuple_struct_arg","","",35,null],[11,"emit_option","","",35,null],[11,"emit_option_none","","",35,null],[11,"emit_option_some","","",35,null],[11,"emit_seq","","",35,null],[11,"emit_seq_elt","","",35,null],[11,"emit_map","","",35,null],[11,"emit_map_elt_key","","",35,null],[11,"emit_map_elt_val","","",35,null],[11,"encode","","",27,null],[11,"from_reader","","Decodes a json value from an `&amp;mut io::Read`",27,{"inputs":[{"name":"read"}],"output":{"name":"result"}}],[11,"from_str","","Decodes a json value from a string",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"pretty","","Borrow this json object as a pretty object to generate a pretty\nrepresentation for it via `Display`.",27,null],[11,"find","","If the Json value is an Object, returns the value associated with the provided key.\nOtherwise, returns None.",27,null],[11,"find_path","","Attempts to get a nested Json Object for each key in `keys`.\nIf any key is found not to exist, find_path will return None.\nOtherwise, it will return the Json value associated with the final key.",27,null],[11,"search","","If the Json value is an Object, performs a depth-first search until\na value associated with the provided key is found. If no value is found\nor the Json value is not an Object, returns None.",27,null],[11,"is_object","","Returns true if the Json value is an Object. Returns false otherwise.",27,null],[11,"as_object","","If the Json value is an Object, returns the associated BTreeMap.\nReturns None otherwise.",27,null],[11,"as_object_mut","","If the Json value is an Object, returns the associated mutable BTreeMap.\nReturns None otherwise.",27,null],[11,"is_array","","Returns true if the Json value is an Array. Returns false otherwise.",27,null],[11,"as_array","","If the Json value is an Array, returns the associated vector.\nReturns None otherwise.",27,null],[11,"as_array_mut","","If the Json value is an Array, returns the associated mutable vector.\nReturns None otherwise.",27,null],[11,"is_string","","Returns true if the Json value is a String. Returns false otherwise.",27,null],[11,"as_string","","If the Json value is a String, returns the associated str.\nReturns None otherwise.",27,null],[11,"is_number","","Returns true if the Json value is a Number. Returns false otherwise.",27,null],[11,"is_i64","","Returns true if the Json value is a i64. Returns false otherwise.",27,null],[11,"is_u64","","Returns true if the Json value is a u64. Returns false otherwise.",27,null],[11,"is_f64","","Returns true if the Json value is a f64. Returns false otherwise.",27,null],[11,"as_i64","","If the Json value is a number, return or cast it to a i64.\nReturns None otherwise.",27,null],[11,"as_u64","","If the Json value is a number, return or cast it to a u64.\nReturns None otherwise.",27,null],[11,"as_f64","","If the Json value is a number, return or cast it to a f64.\nReturns None otherwise.",27,null],[11,"is_boolean","","Returns true if the Json value is a Boolean. Returns false otherwise.",27,null],[11,"as_boolean","","If the Json value is a Boolean, returns the associated bool.\nReturns None otherwise.",27,null],[11,"is_null","","Returns true if the Json value is a Null. Returns false otherwise.",27,null],[11,"as_null","","If the Json value is a Null, returns ().\nReturns None otherwise.",27,null],[11,"index","","",27,null],[11,"index","","",27,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"ne","","",32,null],[11,"fmt","","",33,null],[11,"clone","","",33,null],[11,"eq","","",33,null],[11,"ne","","",33,null],[11,"new","","",36,{"inputs":[],"output":{"name":"stack"}}],[11,"len","","Returns The number of elements in the Stack.",36,null],[11,"is_empty","","Returns true if the stack is empty.",36,null],[11,"get","","Provides access to the StackElement at a given index.\nlower indices are at the bottom of the stack while higher indices are\nat the top.",36,null],[11,"is_equal_to","","Compares this stack with an array of StackElements.",36,null],[11,"starts_with","","Returns true if the bottom-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"ends_with","","Returns true if the top-most elements of this stack are the same as\nthe ones passed as parameter.",36,null],[11,"top","","Returns the top-most element (if any).",36,null],[11,"next","","",37,null],[11,"new","","Creates the JSON parser.",37,{"inputs":[{"name":"t"}],"output":{"name":"parser"}}],[11,"stack","","Provides access to the current position in the logical structure of the\nJSON stream.",37,null],[11,"new","","Create a JSON Builder.",38,{"inputs":[{"name":"t"}],"output":{"name":"builder"}}],[11,"build","","",38,null],[11,"new","","Creates a new decoder instance for decoding the specified JSON value.",39,{"inputs":[{"name":"json"}],"output":{"name":"decoder"}}],[11,"read_nil","","",39,null],[11,"read_usize","","",39,null],[11,"read_u8","","",39,null],[11,"read_u16","","",39,null],[11,"read_u32","","",39,null],[11,"read_u64","","",39,null],[11,"read_isize","","",39,null],[11,"read_i8","","",39,null],[11,"read_i16","","",39,null],[11,"read_i32","","",39,null],[11,"read_i64","","",39,null],[11,"read_f32","","",39,null],[11,"read_f64","","",39,null],[11,"read_bool","","",39,null],[11,"read_char","","",39,null],[11,"read_str","","",39,null],[11,"read_enum","","",39,null],[11,"read_enum_variant","","",39,null],[11,"read_enum_variant_arg","","",39,null],[11,"read_enum_struct_variant","","",39,null],[11,"read_enum_struct_variant_field","","",39,null],[11,"read_struct","","",39,null],[11,"read_struct_field","","",39,null],[11,"read_tuple","","",39,null],[11,"read_tuple_arg","","",39,null],[11,"read_tuple_struct","","",39,null],[11,"read_tuple_struct_arg","","",39,null],[11,"read_option","","",39,null],[11,"read_seq","","",39,null],[11,"read_seq_elt","","",39,null],[11,"read_map","","",39,null],[11,"read_map_elt_key","","",39,null],[11,"read_map_elt_val","","",39,null],[11,"error","","",39,null],[11,"to_json","","",27,null],[11,"to_json","collections::string","",0,null],[11,"to_json","collections::vec","",4,null],[11,"to_json","collections::btree::map","",14,null],[11,"to_json","std::collections::hash::map","",16,null],[11,"to_json","core::option","",5,null],[11,"fmt","rustc_serialize::json","Encodes a json value into a string",27,null],[11,"fmt","","Encodes a json value into a string",40,null],[11,"fmt","","Encodes a json value into a string",41,null],[11,"indent","","Set the indentation level for the emitted JSON",42,null],[11,"fmt","","Encodes a json value into a string",42,null],[11,"from_str","","",27,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[8,"Decoder","rustc_serialize","",null,null],[16,"Error","","",43,null],[10,"read_nil","","",43,null],[10,"read_usize","","",43,null],[10,"read_u64","","",43,null],[10,"read_u32","","",43,null],[10,"read_u16","","",43,null],[10,"read_u8","","",43,null],[10,"read_isize","","",43,null],[10,"read_i64","","",43,null],[10,"read_i32","","",43,null],[10,"read_i16","","",43,null],[10,"read_i8","","",43,null],[10,"read_bool","","",43,null],[10,"read_f64","","",43,null],[10,"read_f32","","",43,null],[10,"read_char","","",43,null],[10,"read_str","","",43,null],[10,"read_enum","","",43,null],[10,"read_enum_variant","","",43,null],[10,"read_enum_variant_arg","","",43,null],[10,"read_enum_struct_variant","","",43,null],[10,"read_enum_struct_variant_field","","",43,null],[10,"read_struct","","",43,null],[10,"read_struct_field","","",43,null],[10,"read_tuple","","",43,null],[10,"read_tuple_arg","","",43,null],[10,"read_tuple_struct","","",43,null],[10,"read_tuple_struct_arg","","",43,null],[10,"read_option","","",43,null],[10,"read_seq","","",43,null],[10,"read_seq_elt","","",43,null],[10,"read_map","","",43,null],[10,"read_map_elt_key","","",43,null],[10,"read_map_elt_val","","",43,null],[10,"error","","",43,null],[8,"Encoder","","",null,null],[16,"Error","","",44,null],[10,"emit_nil","","",44,null],[10,"emit_usize","","",44,null],[10,"emit_u64","","",44,null],[10,"emit_u32","","",44,null],[10,"emit_u16","","",44,null],[10,"emit_u8","","",44,null],[10,"emit_isize","","",44,null],[10,"emit_i64","","",44,null],[10,"emit_i32","","",44,null],[10,"emit_i16","","",44,null],[10,"emit_i8","","",44,null],[10,"emit_bool","","",44,null],[10,"emit_f64","","",44,null],[10,"emit_f32","","",44,null],[10,"emit_char","","",44,null],[10,"emit_str","","",44,null],[10,"emit_enum","","",44,null],[10,"emit_enum_variant","","",44,null],[10,"emit_enum_variant_arg","","",44,null],[10,"emit_enum_struct_variant","","",44,null],[10,"emit_enum_struct_variant_field","","",44,null],[10,"emit_struct","","",44,null],[10,"emit_struct_field","","",44,null],[10,"emit_tuple","","",44,null],[10,"emit_tuple_arg","","",44,null],[10,"emit_tuple_struct","","",44,null],[10,"emit_tuple_struct_arg","","",44,null],[10,"emit_option","","",44,null],[10,"emit_option_none","","",44,null],[10,"emit_option_some","","",44,null],[10,"emit_seq","","",44,null],[10,"emit_seq_elt","","",44,null],[10,"emit_map","","",44,null],[10,"emit_map_elt_key","","",44,null],[10,"emit_map_elt_val","","",44,null],[8,"Decodable","","",null,null],[10,"decode","","",45,{"inputs":[{"name":"d"}],"output":{"name":"result"}}],[8,"Encodable","","",null,null],[10,"encode","","",46,null],[8,"DecoderHelpers","","",null,null],[10,"read_to_vec","","",47,null],[8,"EncoderHelpers","","",null,null],[10,"emit_from_vec","","",48,null]],"paths":[[3,"String"],[3,"Box"],[3,"Rc"],[4,"Cow"],[3,"Vec"],[4,"Option"],[3,"PhantomData"],[3,"Path"],[3,"PathBuf"],[3,"Cell"],[3,"RefCell"],[3,"Arc"],[3,"LinkedList"],[3,"VecDeque"],[3,"BTreeMap"],[3,"BTreeSet"],[3,"HashMap"],[3,"HashSet"],[3,"Config"],[4,"CharacterSet"],[4,"Newline"],[4,"FromBase64Error"],[8,"ToBase64"],[8,"FromBase64"],[4,"FromHexError"],[8,"ToHex"],[8,"FromHex"],[4,"Json"],[4,"ErrorCode"],[4,"ParserError"],[4,"DecoderError"],[4,"EncoderError"],[4,"JsonEvent"],[4,"StackElement"],[8,"ToJson"],[3,"Encoder"],[3,"Stack"],[3,"Parser"],[3,"Builder"],[3,"Decoder"],[3,"PrettyJson"],[3,"AsJson"],[3,"AsPrettyJson"],[8,"Decoder"],[8,"Encoder"],[8,"Decodable"],[8,"Encodable"],[8,"DecoderHelpers"],[8,"EncoderHelpers"]]};
searchIndex["rand"] = {"doc":"Utilities for random number generation","items":[[3,"Generator","rand","Iterator which will generate a stream of random items.",null,null],[3,"AsciiGenerator","","Iterator which will continuously generate random ascii characters.",null,null],[3,"XorShiftRng","","An Xorshift[1] random number\ngenerator.",null,null],[3,"Open01","","A wrapper for generating floating point numbers uniformly in the\nopen interval `(0,1)` (not including either endpoint).",null,null],[12,"0","","",0,null],[3,"Closed01","","A wrapper for generating floating point numbers uniformly in the\nclosed interval `[0,1]` (including both endpoints).",null,null],[12,"0","","",1,null],[3,"StdRng","","The standard RNG. This is designed to be efficient on the current\nplatform.",null,null],[3,"ThreadRng","","The thread-local RNG.",null,null],[5,"weak_rng","","Create a weak random number generator with a default algorithm and seed.",null,{"inputs":[],"output":{"name":"xorshiftrng"}}],[5,"thread_rng","","Retrieve the lazily-initialized thread-local random number\ngenerator, seeded by the system. Intended to be used in method\nchaining style, e.g. `thread_rng().gen::&lt;i32&gt;()`.",null,{"inputs":[],"output":{"name":"threadrng"}}],[5,"random","","Generates a random value using the thread-local random number generator.",null,{"inputs":[],"output":{"name":"t"}}],[5,"sample","","Randomly sample up to `amount` elements from an iterator.",null,{"inputs":[{"name":"r"},{"name":"i"},{"name":"usize"}],"output":{"name":"vec"}}],[0,"distributions","","Sampling from random distributions.",null,null],[3,"RandSample","rand::distributions","A wrapper for generating types that implement `Rand` via the\n`Sample` &amp; `IndependentSample` traits.",null,null],[3,"Weighted","","A value with a particular weight for use with `WeightedChoice`.",null,null],[12,"weight","","The numerical weight of this item",2,null],[12,"item","","The actual item which is being weighted",2,null],[3,"WeightedChoice","","A distribution that selects from a finite collection of weighted items.",null,null],[0,"range","","Generating numbers between two others.",null,null],[3,"Range","rand::distributions::range","Sample values uniformly between two bounds.",null,null],[8,"SampleRange","","The helper trait for types that have a sensible way to sample\nuniformly between two values. This should not be used directly,\nand is only to facilitate `Range`.",null,null],[10,"construct_range","","Construct the `Range` object that `sample_range`\nrequires. This should not ever be called directly, only via\n`Range::new`, which will check that `low &lt; high`, so this\nfunction doesn&#39;t have to repeat the check.",3,{"inputs":[{"name":"self"},{"name":"self"}],"output":{"name":"range"}}],[10,"sample_range","","Sample a value from the given `Range` with the given `Rng` as\na source of randomness.",3,{"inputs":[{"name":"range"},{"name":"r"}],"output":{"name":"self"}}],[11,"clone","","",4,null],[11,"new","","Create a new `Range` instance that samples uniformly from\n`[low, high)`. Panics if `low &gt;= high`.",4,{"inputs":[{"name":"x"},{"name":"x"}],"output":{"name":"range"}}],[11,"sample","","",4,null],[11,"ind_sample","","",4,null],[0,"gamma","rand::distributions","The Gamma and derived distributions.",null,null],[3,"Gamma","rand::distributions::gamma","The Gamma distribution `Gamma(shape, scale)` distribution.",null,null],[3,"ChiSquared","","The chi-squared distribution `χ²(k)`, where `k` is the degrees of\nfreedom.",null,null],[3,"FisherF","","The Fisher F distribution `F(m, n)`.",null,null],[3,"StudentT","","The Student t distribution, `t(nu)`, where `nu` is the degrees of\nfreedom.",null,null],[11,"clone","","",5,null],[11,"new","","Construct an object representing the `Gamma(shape, scale)`\ndistribution.",5,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"gamma"}}],[11,"sample","","",5,null],[11,"ind_sample","","",5,null],[11,"clone","","",6,null],[11,"new","","Create a new chi-squared distribution with degrees-of-freedom\n`k`. Panics if `k &lt; 0`.",6,{"inputs":[{"name":"f64"}],"output":{"name":"chisquared"}}],[11,"sample","","",6,null],[11,"ind_sample","","",6,null],[11,"clone","","",7,null],[11,"new","","Create a new `FisherF` distribution, with the given\nparameter. Panics if either `m` or `n` are not positive.",7,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"fisherf"}}],[11,"sample","","",7,null],[11,"ind_sample","","",7,null],[11,"clone","","",8,null],[11,"new","","Create a new Student t distribution with `n` degrees of\nfreedom. Panics if `n &lt;= 0`.",8,{"inputs":[{"name":"f64"}],"output":{"name":"studentt"}}],[11,"sample","","",8,null],[11,"ind_sample","","",8,null],[0,"normal","rand::distributions","The normal and derived distributions.",null,null],[3,"StandardNormal","rand::distributions::normal","A wrapper around an `f64` to generate N(0, 1) random numbers\n(a.k.a.  a standard normal, or Gaussian).",null,null],[12,"0","","",9,null],[3,"Normal","","The normal distribution `N(mean, std_dev**2)`.",null,null],[3,"LogNormal","","The log-normal distribution `ln N(mean, std_dev**2)`.",null,null],[11,"clone","","",9,null],[11,"rand","","",9,{"inputs":[{"name":"r"}],"output":{"name":"standardnormal"}}],[11,"clone","","",10,null],[11,"new","","Construct a new `Normal` distribution with the given mean and\nstandard deviation.",10,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"normal"}}],[11,"sample","","",10,null],[11,"ind_sample","","",10,null],[11,"clone","","",11,null],[11,"new","","Construct a new `LogNormal` distribution with the given mean\nand standard deviation.",11,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"lognormal"}}],[11,"sample","","",11,null],[11,"ind_sample","","",11,null],[0,"exponential","rand::distributions","The exponential distribution.",null,null],[3,"Exp1","rand::distributions::exponential","A wrapper around an `f64` to generate Exp(1) random numbers.",null,null],[12,"0","","",12,null],[3,"Exp","","The exponential distribution `Exp(lambda)`.",null,null],[11,"clone","","",12,null],[11,"rand","","",12,{"inputs":[{"name":"r"}],"output":{"name":"exp1"}}],[11,"clone","","",13,null],[11,"new","","Construct a new `Exp` with the given shape parameter\n`lambda`. Panics if `lambda &lt;= 0`.",13,{"inputs":[{"name":"f64"}],"output":{"name":"exp"}}],[11,"sample","","",13,null],[11,"ind_sample","","",13,null],[8,"Sample","rand::distributions","Types that can be used to create a random instance of `Support`.",null,null],[10,"sample","","Generate a random value of `Support`, using `rng` as the\nsource of randomness.",14,null],[8,"IndependentSample","","`Sample`s that do not require keeping track of state.",null,null],[10,"ind_sample","","Generate a random value.",15,null],[11,"clone","","",16,null],[11,"sample","","",16,null],[11,"ind_sample","","",16,null],[11,"new","","",16,{"inputs":[],"output":{"name":"randsample"}}],[11,"clone","","",2,null],[11,"new","","Create a new `WeightedChoice`.",17,null],[11,"sample","","",17,null],[11,"ind_sample","","",17,null],[0,"isaac","rand","The ISAAC random number generator.",null,null],[3,"IsaacRng","rand::isaac","A random number generator that uses the ISAAC algorithm[1].",null,null],[3,"Isaac64Rng","","A random number generator that uses ISAAC-64[1], the 64-bit\nvariant of the ISAAC algorithm.",null,null],[11,"new_unseeded","","Create an ISAAC random number generator using the default\nfixed seed.",18,{"inputs":[],"output":{"name":"isaacrng"}}],[11,"clone","","",18,null],[11,"next_u32","","",18,null],[11,"reseed","","",18,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",18,null],[11,"rand","","",18,{"inputs":[{"name":"r"}],"output":{"name":"isaacrng"}}],[11,"new_unseeded","","Create a 64-bit ISAAC random number generator using the\ndefault fixed seed.",19,{"inputs":[],"output":{"name":"isaac64rng"}}],[11,"clone","","",19,null],[11,"next_u32","","",19,null],[11,"next_u64","","",19,null],[11,"reseed","","",19,null],[11,"from_seed","","Create an ISAAC random number generator with a seed. This can\nbe any length, although the maximum number of elements used is\n256 and any more will be silently ignored. A generator\nconstructed with a given seed will generate the same sequence\nof values as all other generators constructed with that seed.",19,null],[11,"rand","","",19,{"inputs":[{"name":"r"}],"output":{"name":"isaac64rng"}}],[0,"chacha","rand","The ChaCha random number generator.",null,null],[3,"ChaChaRng","rand::chacha","A random number generator that uses the ChaCha20 algorithm [1].",null,null],[11,"clone","","",20,null],[11,"new_unseeded","","Create an ChaCha random number generator using the default\nfixed key of 8 zero words.",20,{"inputs":[],"output":{"name":"chacharng"}}],[11,"set_counter","","Sets the internal 128-bit ChaCha counter to\na user-provided value. This permits jumping\narbitrarily ahead (or backwards) in the pseudorandom stream.",20,null],[11,"next_u32","","",20,null],[11,"reseed","","",20,null],[11,"from_seed","","Create a ChaCha generator from a seed,\nobtained from a variable-length u32 array.\nOnly up to 8 words are used; if less than 8\nwords are used, the remaining are set to zero.",20,null],[11,"rand","","",20,{"inputs":[{"name":"r"}],"output":{"name":"chacharng"}}],[0,"reseeding","rand","A wrapper around another RNG that reseeds it after it\ngenerates a certain number of random bytes.",null,null],[3,"ReseedingRng","rand::reseeding","A wrapper around any RNG which reseeds the underlying RNG after it\nhas generated a certain number of random bytes.",null,null],[12,"reseeder","","Controls the behaviour when reseeding the RNG.",21,null],[3,"ReseedWithDefault","","Reseed an RNG using a `Default` instance. This reseeds by\nreplacing the RNG with the result of a `Default::default` call.",null,null],[8,"Reseeder","","Something that can be used to reseed an RNG via `ReseedingRng`.",null,null],[10,"reseed","","Reseed the given RNG.",22,null],[11,"new","","Create a new `ReseedingRng` with the given parameters.",21,{"inputs":[{"name":"r"},{"name":"u64"},{"name":"rsdr"}],"output":{"name":"reseedingrng"}}],[11,"reseed_if_necessary","","Reseed the internal RNG if the number of bytes that have been\ngenerated exceed the threshold.",21,null],[11,"next_u32","","",21,null],[11,"next_u64","","",21,null],[11,"fill_bytes","","",21,null],[11,"reseed","","",21,null],[11,"from_seed","","Create a new `ReseedingRng` from the given reseeder and\nseed. This uses a default value for `generation_threshold`.",21,null],[11,"clone","","",23,null],[11,"reseed","","",23,null],[11,"default","","",23,{"inputs":[],"output":{"name":"reseedwithdefault"}}],[11,"rand","rand","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","","",0,{"inputs":[{"name":"r"}],"output":{"name":"open01"}}],[11,"rand","","",1,{"inputs":[{"name":"r"}],"output":{"name":"closed01"}}],[11,"rand","core::option","",24,{"inputs":[{"name":"r"}],"output":{"name":"option"}}],[0,"os","rand","Interfaces to the operating system provided random number\ngenerators.",null,null],[3,"OsRng","rand::os","A random number generator that retrieves randomness straight from\nthe operating system. Platform sources:",null,null],[11,"new","","Create a new `OsRng`.",25,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",25,null],[11,"next_u64","","",25,null],[11,"fill_bytes","","",25,null],[0,"read","rand","A wrapper around any Read to treat it as an RNG.",null,null],[3,"ReadRng","rand::read","An RNG that reads random bytes straight from a `Read`. This will\nwork best with an infinite reader, but this is not required.",null,null],[11,"new","","Create a new `ReadRng` from a `Read`.",26,{"inputs":[{"name":"r"}],"output":{"name":"readrng"}}],[11,"next_u32","","",26,null],[11,"next_u64","","",26,null],[11,"fill_bytes","","",26,null],[8,"Rand","rand","A type that can be randomly generated using an `Rng`.",null,null],[10,"rand","","Generates a random instance of this type using the specified source of\nrandomness.",27,{"inputs":[{"name":"r"}],"output":{"name":"self"}}],[8,"Rng","","A random number generator.",null,null],[10,"next_u32","","Return the next random u32.",28,null],[11,"next_u64","","Return the next random u64.",28,null],[11,"next_f32","","Return the next random f32 selected from the half-open\ninterval `[0, 1)`.",28,null],[11,"next_f64","","Return the next random f64 selected from the half-open\ninterval `[0, 1)`.",28,null],[11,"fill_bytes","","Fill `dest` with random data.",28,null],[11,"gen","","Return a random value of a `Rand` type.",28,null],[11,"gen_iter","","Return an iterator that will yield an infinite number of randomly\ngenerated items.",28,null],[11,"gen_range","","Generate a random value in the range [`low`, `high`).",28,null],[11,"gen_weighted_bool","","Return a bool with a 1 in n chance of true",28,null],[11,"gen_ascii_chars","","Return an iterator of random characters from the set A-Z,a-z,0-9.",28,null],[11,"choose","","Return a random element from `values`.",28,null],[11,"shuffle","","Shuffle a mutable slice in place.",28,null],[8,"SeedableRng","","A random number generator that can be explicitly seeded to produce\nthe same stream of randomness multiple times.",null,null],[10,"reseed","","Reseed an RNG with the given seed.",29,null],[10,"from_seed","","Create a new RNG with the given seed.",29,{"inputs":[{"name":"seed"}],"output":{"name":"self"}}],[11,"next_u32","alloc::boxed","",30,null],[11,"next_u64","","",30,null],[11,"next_f32","","",30,null],[11,"next_f64","","",30,null],[11,"fill_bytes","","",30,null],[11,"next","rand","",31,null],[11,"next","","",32,null],[11,"clone","","",33,null],[11,"new_unseeded","","Creates a new XorShiftRng instance which is not seeded.",33,{"inputs":[],"output":{"name":"xorshiftrng"}}],[11,"next_u32","","",33,null],[11,"reseed","","Reseed an XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"from_seed","","Create a new XorShiftRng. This will panic if `seed` is entirely 0.",33,null],[11,"rand","","",33,{"inputs":[{"name":"r"}],"output":{"name":"xorshiftrng"}}],[11,"clone","","",34,null],[11,"new","","Create a randomly seeded instance of `StdRng`.",34,{"inputs":[],"output":{"name":"result"}}],[11,"next_u32","","",34,null],[11,"next_u64","","",34,null],[11,"reseed","","",34,null],[11,"from_seed","","",34,null],[11,"clone","","",35,null],[11,"next_u32","","",35,null],[11,"next_u64","","",35,null],[11,"fill_bytes","","",35,null]],"paths":[[3,"Open01"],[3,"Closed01"],[3,"Weighted"],[8,"SampleRange"],[3,"Range"],[3,"Gamma"],[3,"ChiSquared"],[3,"FisherF"],[3,"StudentT"],[3,"StandardNormal"],[3,"Normal"],[3,"LogNormal"],[3,"Exp1"],[3,"Exp"],[8,"Sample"],[8,"IndependentSample"],[3,"RandSample"],[3,"WeightedChoice"],[3,"IsaacRng"],[3,"Isaac64Rng"],[3,"ChaChaRng"],[3,"ReseedingRng"],[8,"Reseeder"],[3,"ReseedWithDefault"],[4,"Option"],[3,"OsRng"],[3,"ReadRng"],[8,"Rand"],[8,"Rng"],[8,"SeedableRng"],[3,"Box"],[3,"Generator"],[3,"AsciiGenerator"],[3,"XorShiftRng"],[3,"StdRng"],[3,"ThreadRng"]]};
searchIndex["chemfiles"] = {"doc":"Chemfiles is a multi-language library written in modern C++ for reading and\nwriting from and to molecular trajectory files. These files are created by\nyour favorite theoretical chemistry program, and contains informations about\natomic or residues names and positions. Some format also have additional\ninformations, such as velocities, forces, energy, …","items":[[3,"Error","chemfiles","Error type for Chemfiles.",null,null],[12,"kind","","The error kind",0,null],[12,"message","","A message describing the error cause",0,null],[3,"Logger","","This struct give access to the logging system.",null,null],[3,"Atom","","An Atom is a particle in the current Frame. It can be used to store and\nretrieve informations about a particle, such as mass, name, atomic number,\n*etc.*",null,null],[3,"UnitCell","","An `UnitCell` represent the box containing the atoms in the system, and its\nperiodicity.",null,null],[3,"Topology","","A `Topology` contains the definition of all the particles in the system, and\nthe liaisons between the particles (bonds, angles, dihedrals, ...).",null,null],[3,"Frame","","A `Frame` holds data from one step of a simulation: the current `Topology`,\nthe positions, and maybe the velocities of the particles in the system.",null,null],[3,"Trajectory","","A Trajectory is a chemistry file on the hard drive. It is the main entry\npoint of chemfiles.",null,null],[3,"Selection","","Select atoms in a `Frame` with a selection language.",null,null],[3,"Match","","A `Match` is a set of atomic indexes matching a given selection. It should\nbe used like a `&amp;[usize]`.",null,null],[4,"ErrorKind","","Possible causes of error in chemfiles",null,null],[13,"CppStdError","","Exception in the C++ standard library",1,null],[13,"ChemfilesCppError","","Exception in the C++ chemfiles library",1,null],[13,"MemoryError","","Error in memory allocations",1,null],[13,"FileError","","Error while reading or writing a file",1,null],[13,"FormatError","","Error in file formatting, *i.e.* the file is invalid",1,null],[13,"SelectionError","","Error in selection string syntax",1,null],[13,"UTF8PathError","","The given path is not valid UTF8",1,null],[13,"NullPtr","","We got a null pointer from C++",1,null],[4,"LogLevel","","Available log levels",null,null],[13,"Error","","Only log errors",2,null],[13,"Warning","","Log errors and warnings",2,null],[13,"Info","","Log errors, warnings and informations",2,null],[13,"Debug","","Log everything (errors, warnings, informations and debug informations)",2,null],[4,"AtomType","","Available types of atoms",null,null],[13,"Element","","Element from the periodic table of elements",3,null],[13,"CorseGrain","","Coarse-grained atom are composed of more than one element: CH3 groups,\namino-acids are corse-grained atoms.",3,null],[13,"Dummy","","Dummy site, with no physical reality",3,null],[13,"Undefined","","Undefined atom type",3,null],[4,"CellType","","Available unit cell types",null,null],[13,"Orthorhombic","","Orthorombic cell, with the three angles equals to 90°",4,null],[13,"Triclinic","","Triclinic cell, with any values for the angles.",4,null],[13,"Infinite","","Infinite cell, to use when there is no cell.",4,null],[5,"version","","Get the version of the chemfiles library",null,{"inputs":[],"output":{"name":"string"}}],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",1,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"from","","",0,{"inputs":[{"name":"chfl_status"}],"output":{"name":"error"}}],[11,"last_error","","Get the last error message from the C++ library.",0,{"inputs":[],"output":{"name":"string"}}],[11,"cleanup","","Clear any error from the C++ library",0,{"inputs":[],"output":null}],[11,"fmt","","",0,null],[11,"description","","",0,null],[11,"eq","","",2,null],[11,"fmt","","",2,null],[11,"clone","","",2,null],[11,"from","","",2,{"inputs":[{"name":"chfl_log_level"}],"output":{"name":"loglevel"}}],[11,"get","","Get an handle to the logging system. This function blocks, waiting for a\nmutex to be available. You should probably call this function from one\nthread only.",5,{"inputs":[],"output":{"name":"logger"}}],[11,"level","","Get the current maximal logging level",5,null],[11,"set_level","","Set the maximal logging level to `level`",5,null],[11,"log_to_file","","Write logs to the file at `path`, creating it if needed.",5,null],[11,"log_to_stderr","","Redirect the logs to the standard error stream. This is the default.",5,null],[11,"log_to_stdout","","Redirect the logs to the standard output.",5,null],[11,"log_silent","","Remove all logging output.",5,null],[11,"log_callback","","Redirect all logging to user-provided logging. The `callback` function will\nbe called at each loggin operation with the level of the message, and the\nthe message itself.",5,null],[11,"eq","","",3,null],[11,"fmt","","",3,null],[11,"clone","","",3,null],[11,"from","","",3,{"inputs":[{"name":"chfl_atom_types"}],"output":{"name":"atomtype"}}],[11,"new","","Create a new `Atom` from a `name`.",6,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"mass","","Get the `Atom` mass, in atomic mass units",6,null],[11,"set_mass","","Set the `Atom` mass, in atomic mass units",6,null],[11,"charge","","Get the `Atom` charge, in number of the electron charge *e*",6,null],[11,"set_charge","","Set the `Atom` charge, in number of the electron charge *e*",6,null],[11,"name","","Get the `Atom` name",6,null],[11,"set_name","","Set the `Atom` name",6,null],[11,"full_name","","Try to get the full name of the `Atom`. The full name of &quot;He&quot; is\n&quot;Helium&quot;, and so on. If the name can not be found, returns the empty\nstring.",6,null],[11,"vdw_radius","","Try to get the Van der Waals radius of the `Atom`. If the radius can not\nbe found, returns -1.",6,null],[11,"covalent_radius","","Try to get the covalent radius of the `Atom`. If the radius can not be\nfound, returns -1.",6,null],[11,"atomic_number","","Try to get the atomic number of the `Atom`. If the number can not be\nfound, returns -1.",6,null],[11,"atom_type","","Get the type of the atom",6,null],[11,"set_atom_type","","Set the type of the atom",6,null],[11,"from_ptr","","Create an `Atom` from a C pointer. This function is unsafe because no\nvalidity check is made on the pointer.",6,null],[11,"as_ptr","","Get the underlying C pointer. This function is unsafe because no\nlifetime guarantee is made on the pointer.",6,null],[11,"drop","","",6,null],[11,"eq","","",4,null],[11,"fmt","","",4,null],[11,"clone","","",4,null],[11,"from","","",4,{"inputs":[{"name":"chfl_cell_types"}],"output":{"name":"celltype"}}],[11,"new","","Create an `Orthorombic` `UnitCell` from the three lenghts, in Angstroms.",7,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"result"}}],[11,"infinite","","Create an `Infinite` `UnitCell`",7,{"inputs":[],"output":{"name":"result"}}],[11,"triclinic","","Create an `Triclinic` `UnitCell` from the three lenghts (in Angstroms)\nand three angles (in degree). `alpha` is the angle between the vectors\n`b` and `c`; `beta` is the between the vectors `a` and `c` and `gamma`\nis the angle between the vectors `a` and `b`.",7,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"result"}}],[11,"lengths","","Get the three lenghts of an `UnitCell`, in Angstroms.",7,null],[11,"set_lengths","","Set the three lenghts of an `UnitCell`, in Angstroms.",7,null],[11,"angles","","Get the three angles of an `UnitCell`, in degrees.",7,null],[11,"set_angles","","Set the three angles of an `UnitCell`, in degrees. This is only possible\nwith `Triclinic` cells.",7,null],[11,"matrix","","Get the unit cell matricial representation.",7,null],[11,"cell_type","","Get the type of the unit cell",7,null],[11,"set_cell_type","","Set the type of the unit cell",7,null],[11,"volume","","Get the volume of the unit cell",7,null],[11,"from_ptr","","Create an `UnitCell` from a C pointer. This function is unsafe because\nno validity check is made on the pointer.",7,null],[11,"as_ptr","","Get the underlying C pointer. This function is unsafe because no\nlifetime guarantee is made on the pointer.",7,null],[11,"drop","","",7,null],[11,"new","","Create a new empty topology",8,{"inputs":[],"output":{"name":"result"}}],[11,"atom","","Get a specific `Atom` from a topology, given its `index` in the topology",8,null],[11,"natoms","","Get the current number of atoms in the topology.",8,null],[11,"push","","Add an `Atom` at the end of a topology",8,null],[11,"remove","","Remove an `Atom` from a topology by index. This modify all the other\natoms indexes.",8,null],[11,"is_bond","","Tell if the atoms at indexes `i` and `j` are bonded together",8,null],[11,"is_angle","","Tell if the atoms at indexes `i`, `j` and `k` constitues an angle",8,null],[11,"is_dihedral","","Tell if the atoms at indexes `i`, `j`, `k` and `m` constitues a dihedral\nangle",8,null],[11,"bonds_count","","Get the number of bonds in the system",8,null],[11,"angles_count","","Get the number of angles in the system",8,null],[11,"dihedrals_count","","Get the number of dihedral angles in the system",8,null],[11,"bonds","","Get the list of bonds in the system",8,null],[11,"angles","","Get the list of angles in the system",8,null],[11,"dihedrals","","Get the list of dihedral angles in the system",8,null],[11,"add_bond","","Add a bond between the atoms at indexes `i` and `j` in the system",8,null],[11,"remove_bond","","Remove any existing bond between the atoms at indexes `i` and `j` in\nthe system",8,null],[11,"from_ptr","","Create a `Topology` from a C pointer. This function is unsafe because no\nvalidity check is made on the pointer.",8,null],[11,"as_ptr","","Get the underlying C pointer. This function is unsafe because no\nlifetime guarantee is made on the pointer.",8,null],[11,"drop","","",8,null],[11,"new","","Create an empty frame with initial capacity of `natoms`. It will be\nresized by the library as needed.",9,{"inputs":[{"name":"usize"}],"output":{"name":"result"}}],[11,"atom","","Get a specific `Atom` from a frame, given its `index` in the frame",9,null],[11,"natoms","","Get the current number of atoms in the `Frame`.",9,null],[11,"resize","","Resize the positions and the velocities in frame, to make space for\n`natoms` atoms. Previous data is conserved, as well as the presence of\nabsence of velocities.",9,null],[11,"positions","","Get a view into the positions of the `Frame`.",9,null],[11,"positions_mut","","Get a mutable view into the positions of the `Frame`.",9,null],[11,"velocities","","Get a view into the velocities of the `Frame`.",9,null],[11,"velocities_mut","","Get a mutable view into the velocities of the `Frame`.",9,null],[11,"has_velocities","","Check if the `Frame` has velocity information.",9,null],[11,"add_velocities","","Add velocity storage to this frame for `Frame::natoms` atoms. If the\nframe already have velocities, this does nothing.",9,null],[11,"cell","","Get the `UnitCell` from the `Frame`",9,null],[11,"set_cell","","Set the `UnitCell` of the `Frame`",9,null],[11,"topology","","Get the `Topology` from the `Frame`",9,null],[11,"set_topology","","Set the `Topology` of the `Frame`",9,null],[11,"step","","Get the `Frame` step, i.e. the frame number in the trajectory",9,null],[11,"set_step","","Set the `Frame` step",9,null],[11,"guess_topology","","Guess the bonds, angles and dihedrals in the system using an atomic\ndistance criteria",9,null],[11,"from_ptr","","Create a `Frame` from a C pointer. This function is unsafe because\nno validity check is made on the pointer.",9,null],[11,"as_ptr","","Get the underlying C pointer. This function is unsafe because no\nlifetime guarantee is made on the pointer.",9,null],[11,"drop","","",9,null],[11,"open","","Open a trajectory file in read mode.",10,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"create","","Open a trajectory file in write mode.",10,{"inputs":[{"name":"p"}],"output":{"name":"result"}}],[11,"open_with_format","","Open a trajectory file in read mode using a specific `format`.",10,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"create_with_format","","Open a trajectory file in write mode.",10,{"inputs":[{"name":"p"},{"name":"s"}],"output":{"name":"result"}}],[11,"read","","Read the next step of the trajectory into a frame",10,null],[11,"read_step","","Read a specific step of the trajectory in a frame",10,null],[11,"write","","Write a frame to the trajectory.",10,null],[11,"set_topology","","Set the topology associated with a trajectory. This topology will be\nused when reading and writing the files, replacing any topology in the\nframes or files.",10,null],[11,"set_topology_file","","Set the topology associated with a trajectory by reading the first frame\nof `filename`; and extracting the topology of this frame.",10,null],[11,"set_cell","","Set the unit cell associated with a trajectory. This cell will be used\nwhen reading and writing the files, replacing any unit cell in the\nframes or files.",10,null],[11,"nsteps","","Get the number of steps (the number of frames) in a trajectory.",10,null],[11,"sync","","Synchronize any buffered content to the hard drive.",10,null],[11,"from_ptr","","Create a `Trajectory` from a C pointer. This function is unsafe because\nno validity check is made on the pointer.",10,null],[11,"as_ptr","","Get the underlying C pointer. This function is unsafe because no\nlifetime guarantee is made on the pointer.",10,null],[11,"drop","","",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"new","","Create a new match containing the atoms in the `atoms` slice.",11,null],[11,"iter","","Iterate over the atomic indexes in the match.",11,null],[11,"index","","",11,null],[11,"drop","","",12,null],[11,"new","","Create a new selection from the given selection string.",12,{"inputs":[{"name":"s"}],"output":{"name":"result"}}],[11,"size","","Get the size of the selection, i.e. the number of atoms we are selecting\ntogether.",12,null],[11,"evaluate","","Evaluate a selection for a given frame, and return the corresponding\nmatches.",12,null],[11,"list","","Evaluates a selection of size 1 on a given `frame`. This function\nreturns the list of atomic indexes in the frame matching this selection.",12,null],[6,"Result","","Custom result type for working with errors in chemfiles",null,null]],"paths":[[3,"Error"],[4,"ErrorKind"],[4,"LogLevel"],[4,"AtomType"],[4,"CellType"],[3,"Logger"],[3,"Atom"],[3,"UnitCell"],[3,"Topology"],[3,"Frame"],[3,"Trajectory"],[3,"Match"],[3,"Selection"]]};
searchIndex["special"] = {"doc":"[Special functions][1].","items":[[8,"Beta","special","Beta functions.",null,null],[10,"inc_beta","","Compute the incomplete beta function.",0,null],[10,"inv_inc_beta","","Compute the inverse of the incomplete beta function.",0,null],[10,"ln_beta","","Compute the natural logarithm of the beta function.",0,null],[8,"Error","","Error functions.",null,null],[10,"erf","","Compute the error function.",1,null],[10,"erfc","","Compute the complementary error function.",1,null],[8,"Gamma","","Gamma functions.",null,null],[10,"digamma","","Compute the real-valued digamma function.",2,null],[10,"gamma","","Compute the gamma function.",2,null],[10,"inc_gamma","","Compute the regularized lower incomplete gamma function.",2,null],[10,"ln_gamma","","Compute the natural logarithm of the gamma function.",2,null]],"paths":[[8,"Beta"],[8,"Error"],[8,"Gamma"]]};
searchIndex["chemfiles_sys"] = {"doc":"","items":[[3,"chfl_match_t","chemfiles_sys","",null,null],[12,"size","","",0,null],[12,"atoms","","",0,null],[4,"CHFL_TRAJECTORY","","",null,null],[4,"CHFL_CELL","","",null,null],[4,"CHFL_ATOM","","",null,null],[4,"CHFL_FRAME","","",null,null],[4,"CHFL_TOPOLOGY","","",null,null],[4,"CHFL_SELECTION","","",null,null],[5,"chfl_version","","",null,null],[5,"chfl_strerror","","",null,null],[5,"chfl_last_error","","",null,null],[5,"chfl_clear_errors","","",null,null],[5,"chfl_loglevel","","",null,null],[5,"chfl_set_loglevel","","",null,null],[5,"chfl_logfile","","",null,null],[5,"chfl_log_stdout","","",null,null],[5,"chfl_log_stderr","","",null,null],[5,"chfl_log_silent","","",null,null],[5,"chfl_log_callback","","",null,null],[5,"chfl_trajectory_open","","",null,null],[5,"chfl_trajectory_with_format","","",null,null],[5,"chfl_trajectory_read","","",null,null],[5,"chfl_trajectory_read_step","","",null,null],[5,"chfl_trajectory_write","","",null,null],[5,"chfl_trajectory_set_topology","","",null,null],[5,"chfl_trajectory_set_topology_file","","",null,null],[5,"chfl_trajectory_set_topology_with_format","","",null,null],[5,"chfl_trajectory_set_cell","","",null,null],[5,"chfl_trajectory_nsteps","","",null,null],[5,"chfl_trajectory_sync","","",null,null],[5,"chfl_trajectory_close","","",null,null],[5,"chfl_frame","","",null,null],[5,"chfl_frame_atoms_count","","",null,null],[5,"chfl_frame_positions","","",null,null],[5,"chfl_frame_velocities","","",null,null],[5,"chfl_frame_resize","","",null,null],[5,"chfl_frame_add_velocities","","",null,null],[5,"chfl_frame_has_velocities","","",null,null],[5,"chfl_frame_set_cell","","",null,null],[5,"chfl_frame_set_topology","","",null,null],[5,"chfl_frame_step","","",null,null],[5,"chfl_frame_set_step","","",null,null],[5,"chfl_frame_guess_topology","","",null,null],[5,"chfl_frame_free","","",null,null],[5,"chfl_cell","","",null,null],[5,"chfl_cell_triclinic","","",null,null],[5,"chfl_cell_from_frame","","",null,null],[5,"chfl_cell_volume","","",null,null],[5,"chfl_cell_lengths","","",null,null],[5,"chfl_cell_set_lengths","","",null,null],[5,"chfl_cell_angles","","",null,null],[5,"chfl_cell_set_angles","","",null,null],[5,"chfl_cell_matrix","","",null,null],[5,"chfl_cell_type","","",null,null],[5,"chfl_cell_set_type","","",null,null],[5,"chfl_cell_free","","",null,null],[5,"chfl_topology","","",null,null],[5,"chfl_topology_from_frame","","",null,null],[5,"chfl_topology_atoms_count","","",null,null],[5,"chfl_topology_append","","",null,null],[5,"chfl_topology_remove","","",null,null],[5,"chfl_topology_isbond","","",null,null],[5,"chfl_topology_isangle","","",null,null],[5,"chfl_topology_isdihedral","","",null,null],[5,"chfl_topology_bonds_count","","",null,null],[5,"chfl_topology_angles_count","","",null,null],[5,"chfl_topology_dihedrals_count","","",null,null],[5,"chfl_topology_bonds","","",null,null],[5,"chfl_topology_angles","","",null,null],[5,"chfl_topology_dihedrals","","",null,null],[5,"chfl_topology_add_bond","","",null,null],[5,"chfl_topology_remove_bond","","",null,null],[5,"chfl_topology_free","","",null,null],[5,"chfl_atom","","",null,null],[5,"chfl_atom_from_frame","","",null,null],[5,"chfl_atom_from_topology","","",null,null],[5,"chfl_atom_mass","","",null,null],[5,"chfl_atom_set_mass","","",null,null],[5,"chfl_atom_charge","","",null,null],[5,"chfl_atom_set_charge","","",null,null],[5,"chfl_atom_name","","",null,null],[5,"chfl_atom_set_name","","",null,null],[5,"chfl_atom_full_name","","",null,null],[5,"chfl_atom_vdw_radius","","",null,null],[5,"chfl_atom_covalent_radius","","",null,null],[5,"chfl_atom_atomic_number","","",null,null],[5,"chfl_atom_type","","",null,null],[5,"chfl_atom_set_type","","",null,null],[5,"chfl_atom_free","","",null,null],[5,"chfl_selection","","",null,null],[5,"chfl_selection_size","","",null,null],[5,"chfl_selection_evalutate","","",null,null],[5,"chfl_selection_matches","","",null,null],[5,"chfl_selection_free","","",null,null],[6,"CHFL_LOG_LEVEL","","",null,null],[6,"CHFL_CELL_TYPES","","",null,null],[6,"CHFL_ATOM_TYPES","","",null,null],[6,"CHFL_STATUS","","",null,null],[6,"chfl_logging_callback_t","","",null,null],[6,"c_bool","","",null,null],[17,"CHFL_LOG_ERROR","","",null,null],[17,"CHFL_LOG_WARNING","","",null,null],[17,"CHFL_LOG_INFO","","",null,null],[17,"CHFL_LOG_DEBUG","","",null,null],[17,"CHFL_CELL_ORTHORHOMBIC","","",null,null],[17,"CHFL_CELL_TRICLINIC","","",null,null],[17,"CHFL_CELL_INFINITE","","",null,null],[17,"CHFL_ATOM_ELEMENT","","",null,null],[17,"CHFL_ATOM_COARSE_GRAINED","","",null,null],[17,"CHFL_ATOM_DUMMY","","",null,null],[17,"CHFL_ATOM_UNDEFINED","","",null,null],[17,"CHFL_SUCCESS","","",null,null],[17,"CHFL_MEMORY_ERROR","","",null,null],[17,"CHFL_FILE_ERROR","","",null,null],[17,"CHFL_FORMAT_ERROR","","",null,null],[17,"CHFL_SELECTION_ERROR","","",null,null],[17,"CHFL_GENERIC_ERROR","","",null,null],[17,"CHFL_CXX_ERROR","","",null,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"clone","","",0,null]],"paths":[[3,"chfl_match_t"]]};
searchIndex["num_complex"] = {"doc":"Complex numbers.","items":[[3,"Complex","num_complex","A complex number in Cartesian form.",null,null],[12,"re","","Real portion of the complex number",0,null],[12,"im","","Imaginary portion of the complex number",0,null],[6,"Complex32","","",null,null],[6,"Complex64","","",null,null],[11,"default","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null],[11,"hash","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"new","","Create a new Complex",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"i","","Returns imaginary unit",0,{"inputs":[],"output":{"name":"complex"}}],[11,"norm_sqr","","Returns the square of the norm (since `T` doesn&#39;t necessarily\nhave a sqrt function), i.e. `re^2 + im^2`.",0,null],[11,"scale","","Multiplies `self` by the scalar `t`.",0,null],[11,"unscale","","Divides `self` by the scalar `t`.",0,null],[11,"conj","","Returns the complex conjugate. i.e. `re - i im`",0,null],[11,"inv","","Returns `1/self`",0,null],[11,"norm","","Calculate |self|",0,null],[11,"arg","","Calculate the principal Arg of self.",0,null],[11,"to_polar","","Convert to polar form (r, theta), such that `self = r * exp(i\n* theta)`",0,null],[11,"from_polar","","Convert a polar representation into a complex number.",0,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"complex"}}],[11,"exp","","Computes `e^(self)`, where `e` is the base of the natural logarithm.",0,null],[11,"ln","","Computes the principal value of natural logarithm of `self`.",0,null],[11,"sqrt","","Computes the principal value of the square root of `self`.",0,null],[11,"powf","","Raises `self` to a floating point power.",0,null],[11,"log","","Returns the logarithm of `self` with respect to an arbitrary base.",0,null],[11,"powc","","Raises `self` to a complex power.",0,null],[11,"expf","","Raises a floating point number to the complex power `self`.",0,null],[11,"sin","","Computes the sine of `self`.",0,null],[11,"cos","","Computes the cosine of `self`.",0,null],[11,"tan","","Computes the tangent of `self`.",0,null],[11,"asin","","Computes the principal value of the inverse sine of `self`.",0,null],[11,"acos","","Computes the principal value of the inverse cosine of `self`.",0,null],[11,"atan","","Computes the principal value of the inverse tangent of `self`.",0,null],[11,"sinh","","Computes the hyperbolic sine of `self`.",0,null],[11,"cosh","","Computes the hyperbolic cosine of `self`.",0,null],[11,"tanh","","Computes the hyperbolic tangent of `self`.",0,null],[11,"asinh","","Computes the principal value of inverse hyperbolic sine of `self`.",0,null],[11,"acosh","","Computes the principal value of inverse hyperbolic cosine of `self`.",0,null],[11,"atanh","","Computes the principal value of inverse hyperbolic tangent of `self`.",0,null],[11,"is_nan","","Checks if the given complex number is NaN",0,null],[11,"is_infinite","","Checks if the given complex number is infinite",0,null],[11,"is_finite","","Checks if the given complex number is finite",0,null],[11,"is_normal","","Checks if the given complex number is normal",0,null],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"from","","",0,{"inputs":[{"name":"t"}],"output":{"name":"complex"}}],[11,"add","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"div","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"add","","",0,null],[11,"sub","","",0,null],[11,"mul","","",0,null],[11,"div","","",0,null],[11,"zero","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"is_zero","","",0,null],[11,"one","","",0,{"inputs":[],"output":{"name":"complex"}}],[11,"fmt","","",0,null]],"paths":[[3,"Complex"]]};
searchIndex["libc"] = {"doc":"Crate docs","items":[[3,"utimbuf","libc","",null,null],[12,"actime","","",0,null],[12,"modtime","","",0,null],[3,"timeval","","",null,null],[12,"tv_sec","","",1,null],[12,"tv_usec","","",1,null],[3,"timespec","","",null,null],[12,"tv_sec","","",2,null],[12,"tv_nsec","","",2,null],[3,"rlimit","","",null,null],[12,"rlim_cur","","",3,null],[12,"rlim_max","","",3,null],[3,"rusage","","",null,null],[12,"ru_utime","","",4,null],[12,"ru_stime","","",4,null],[12,"ru_maxrss","","",4,null],[12,"ru_ixrss","","",4,null],[12,"ru_idrss","","",4,null],[12,"ru_isrss","","",4,null],[12,"ru_minflt","","",4,null],[12,"ru_majflt","","",4,null],[12,"ru_nswap","","",4,null],[12,"ru_inblock","","",4,null],[12,"ru_oublock","","",4,null],[12,"ru_msgsnd","","",4,null],[12,"ru_msgrcv","","",4,null],[12,"ru_nsignals","","",4,null],[12,"ru_nvcsw","","",4,null],[12,"ru_nivcsw","","",4,null],[3,"in_addr","","",null,null],[12,"s_addr","","",5,null],[3,"in6_addr","","",null,null],[12,"s6_addr","","",6,null],[3,"ip_mreq","","",null,null],[12,"imr_multiaddr","","",7,null],[12,"imr_interface","","",7,null],[3,"ipv6_mreq","","",null,null],[12,"ipv6mr_multiaddr","","",8,null],[12,"ipv6mr_interface","","",8,null],[3,"hostent","","",null,null],[12,"h_name","","",9,null],[12,"h_aliases","","",9,null],[12,"h_addrtype","","",9,null],[12,"h_length","","",9,null],[12,"h_addr_list","","",9,null],[3,"iovec","","",null,null],[12,"iov_base","","",10,null],[12,"iov_len","","",10,null],[3,"pollfd","","",null,null],[12,"fd","","",11,null],[12,"events","","",11,null],[12,"revents","","",11,null],[3,"winsize","","",null,null],[12,"ws_row","","",12,null],[12,"ws_col","","",12,null],[12,"ws_xpixel","","",12,null],[12,"ws_ypixel","","",12,null],[3,"linger","","",null,null],[12,"l_onoff","","",13,null],[12,"l_linger","","",13,null],[3,"sockaddr","","",null,null],[12,"sa_family","","",14,null],[12,"sa_data","","",14,null],[3,"sockaddr_in","","",null,null],[12,"sin_family","","",15,null],[12,"sin_port","","",15,null],[12,"sin_addr","","",15,null],[12,"sin_zero","","",15,null],[3,"sockaddr_in6","","",null,null],[12,"sin6_family","","",16,null],[12,"sin6_port","","",16,null],[12,"sin6_flowinfo","","",16,null],[12,"sin6_addr","","",16,null],[12,"sin6_scope_id","","",16,null],[3,"sockaddr_un","","",null,null],[12,"sun_family","","",17,null],[12,"sun_path","","",17,null],[3,"sockaddr_storage","","",null,null],[12,"ss_family","","",18,null],[3,"addrinfo","","",null,null],[12,"ai_flags","","",19,null],[12,"ai_family","","",19,null],[12,"ai_socktype","","",19,null],[12,"ai_protocol","","",19,null],[12,"ai_addrlen","","",19,null],[12,"ai_addr","","",19,null],[12,"ai_canonname","","",19,null],[12,"ai_next","","",19,null],[3,"sockaddr_nl","","",null,null],[12,"nl_family","","",20,null],[12,"nl_pid","","",20,null],[12,"nl_groups","","",20,null],[3,"sockaddr_ll","","",null,null],[12,"sll_family","","",21,null],[12,"sll_protocol","","",21,null],[12,"sll_ifindex","","",21,null],[12,"sll_hatype","","",21,null],[12,"sll_pkttype","","",21,null],[12,"sll_halen","","",21,null],[12,"sll_addr","","",21,null],[3,"fd_set","","",null,null],[3,"tm","","",null,null],[12,"tm_sec","","",22,null],[12,"tm_min","","",22,null],[12,"tm_hour","","",22,null],[12,"tm_mday","","",22,null],[12,"tm_mon","","",22,null],[12,"tm_year","","",22,null],[12,"tm_wday","","",22,null],[12,"tm_yday","","",22,null],[12,"tm_isdst","","",22,null],[12,"tm_gmtoff","","",22,null],[12,"tm_zone","","",22,null],[3,"sched_param","","",null,null],[12,"sched_priority","","",23,null],[3,"Dl_info","","",null,null],[12,"dli_fname","","",24,null],[12,"dli_fbase","","",24,null],[12,"dli_sname","","",24,null],[12,"dli_saddr","","",24,null],[3,"epoll_event","","",null,null],[12,"events","","",25,null],[12,"u64","","",25,null],[3,"utsname","","",null,null],[12,"sysname","","",26,null],[12,"nodename","","",26,null],[12,"release","","",26,null],[12,"version","","",26,null],[12,"machine","","",26,null],[12,"domainname","","",26,null],[3,"lconv","","",null,null],[12,"decimal_point","","",27,null],[12,"thousands_sep","","",27,null],[12,"grouping","","",27,null],[12,"int_curr_symbol","","",27,null],[12,"currency_symbol","","",27,null],[12,"mon_decimal_point","","",27,null],[12,"mon_thousands_sep","","",27,null],[12,"mon_grouping","","",27,null],[12,"positive_sign","","",27,null],[12,"negative_sign","","",27,null],[12,"int_frac_digits","","",27,null],[12,"frac_digits","","",27,null],[12,"p_cs_precedes","","",27,null],[12,"p_sep_by_space","","",27,null],[12,"n_cs_precedes","","",27,null],[12,"n_sep_by_space","","",27,null],[12,"p_sign_posn","","",27,null],[12,"n_sign_posn","","",27,null],[12,"int_p_cs_precedes","","",27,null],[12,"int_p_sep_by_space","","",27,null],[12,"int_n_cs_precedes","","",27,null],[12,"int_n_sep_by_space","","",27,null],[12,"int_p_sign_posn","","",27,null],[12,"int_n_sign_posn","","",27,null],[3,"dirent","","",null,null],[12,"d_ino","","",28,null],[12,"d_off","","",28,null],[12,"d_reclen","","",28,null],[12,"d_type","","",28,null],[12,"d_name","","",28,null],[3,"dirent64","","",null,null],[12,"d_ino","","",29,null],[12,"d_off","","",29,null],[12,"d_reclen","","",29,null],[12,"d_type","","",29,null],[12,"d_name","","",29,null],[3,"rlimit64","","",null,null],[12,"rlim_cur","","",30,null],[12,"rlim_max","","",30,null],[3,"glob_t","","",null,null],[12,"gl_pathc","","",31,null],[12,"gl_pathv","","",31,null],[12,"gl_offs","","",31,null],[12,"gl_flags","","",31,null],[3,"ifaddrs","","",null,null],[12,"ifa_next","","",32,null],[12,"ifa_name","","",32,null],[12,"ifa_flags","","",32,null],[12,"ifa_addr","","",32,null],[12,"ifa_netmask","","",32,null],[12,"ifa_ifu","","",32,null],[12,"ifa_data","","",32,null],[3,"pthread_mutex_t","","",null,null],[3,"pthread_rwlock_t","","",null,null],[3,"pthread_mutexattr_t","","",null,null],[3,"pthread_cond_t","","",null,null],[3,"passwd","","",null,null],[12,"pw_name","","",33,null],[12,"pw_passwd","","",33,null],[12,"pw_uid","","",33,null],[12,"pw_gid","","",33,null],[12,"pw_gecos","","",33,null],[12,"pw_dir","","",33,null],[12,"pw_shell","","",33,null],[3,"statvfs","","",null,null],[12,"f_bsize","","",34,null],[12,"f_frsize","","",34,null],[12,"f_blocks","","",34,null],[12,"f_bfree","","",34,null],[12,"f_bavail","","",34,null],[12,"f_files","","",34,null],[12,"f_ffree","","",34,null],[12,"f_favail","","",34,null],[12,"f_fsid","","",34,null],[12,"f_flag","","",34,null],[12,"f_namemax","","",34,null],[3,"dqblk","","",null,null],[12,"dqb_bhardlimit","","",35,null],[12,"dqb_bsoftlimit","","",35,null],[12,"dqb_curspace","","",35,null],[12,"dqb_ihardlimit","","",35,null],[12,"dqb_isoftlimit","","",35,null],[12,"dqb_curinodes","","",35,null],[12,"dqb_btime","","",35,null],[12,"dqb_itime","","",35,null],[12,"dqb_valid","","",35,null],[3,"signalfd_siginfo","","",null,null],[12,"ssi_signo","","",36,null],[12,"ssi_errno","","",36,null],[12,"ssi_code","","",36,null],[12,"ssi_pid","","",36,null],[12,"ssi_uid","","",36,null],[12,"ssi_fd","","",36,null],[12,"ssi_tid","","",36,null],[12,"ssi_band","","",36,null],[12,"ssi_overrun","","",36,null],[12,"ssi_trapno","","",36,null],[12,"ssi_status","","",36,null],[12,"ssi_int","","",36,null],[12,"ssi_ptr","","",36,null],[12,"ssi_utime","","",36,null],[12,"ssi_stime","","",36,null],[12,"ssi_addr","","",36,null],[3,"fsid_t","","",null,null],[3,"mq_attr","","",null,null],[12,"mq_flags","","",37,null],[12,"mq_maxmsg","","",37,null],[12,"mq_msgsize","","",37,null],[12,"mq_curmsgs","","",37,null],[3,"cpu_set_t","","",null,null],[3,"sigaction","","",null,null],[12,"sa_sigaction","","",38,null],[12,"sa_mask","","",38,null],[12,"sa_flags","","",38,null],[3,"stack_t","","",null,null],[12,"ss_sp","","",39,null],[12,"ss_flags","","",39,null],[12,"ss_size","","",39,null],[3,"siginfo_t","","",null,null],[12,"si_signo","","",40,null],[12,"si_errno","","",40,null],[12,"si_code","","",40,null],[12,"_pad","","",40,null],[3,"glob64_t","","",null,null],[12,"gl_pathc","","",41,null],[12,"gl_pathv","","",41,null],[12,"gl_offs","","",41,null],[12,"gl_flags","","",41,null],[3,"ucred","","",null,null],[12,"pid","","",42,null],[12,"uid","","",42,null],[12,"gid","","",42,null],[3,"statfs","","",null,null],[12,"f_type","","",43,null],[12,"f_bsize","","",43,null],[12,"f_blocks","","",43,null],[12,"f_bfree","","",43,null],[12,"f_bavail","","",43,null],[12,"f_files","","",43,null],[12,"f_ffree","","",43,null],[12,"f_fsid","","",43,null],[12,"f_namelen","","",43,null],[12,"f_frsize","","",43,null],[3,"msghdr","","",null,null],[12,"msg_name","","",44,null],[12,"msg_namelen","","",44,null],[12,"msg_iov","","",44,null],[12,"msg_iovlen","","",44,null],[12,"msg_control","","",44,null],[12,"msg_controllen","","",44,null],[12,"msg_flags","","",44,null],[3,"termios","","",null,null],[12,"c_iflag","","",45,null],[12,"c_oflag","","",45,null],[12,"c_cflag","","",45,null],[12,"c_lflag","","",45,null],[12,"c_line","","",45,null],[12,"c_cc","","",45,null],[12,"c_ispeed","","",45,null],[12,"c_ospeed","","",45,null],[3,"flock","","",null,null],[12,"l_type","","",46,null],[12,"l_whence","","",46,null],[12,"l_start","","",46,null],[12,"l_len","","",46,null],[12,"l_pid","","",46,null],[3,"ipc_perm","","",null,null],[12,"__key","","",47,null],[12,"uid","","",47,null],[12,"gid","","",47,null],[12,"cuid","","",47,null],[12,"cgid","","",47,null],[12,"mode","","",47,null],[12,"__seq","","",47,null],[3,"shmid_ds","","",null,null],[12,"shm_perm","","",48,null],[12,"shm_segsz","","",48,null],[12,"shm_atime","","",48,null],[12,"shm_dtime","","",48,null],[12,"shm_ctime","","",48,null],[12,"shm_cpid","","",48,null],[12,"shm_lpid","","",48,null],[12,"shm_nattch","","",48,null],[3,"sem_t","","",null,null],[3,"sigset_t","","",null,null],[3,"sysinfo","","",null,null],[12,"uptime","","",49,null],[12,"loads","","",49,null],[12,"totalram","","",49,null],[12,"freeram","","",49,null],[12,"sharedram","","",49,null],[12,"bufferram","","",49,null],[12,"totalswap","","",49,null],[12,"freeswap","","",49,null],[12,"procs","","",49,null],[12,"pad","","",49,null],[12,"totalhigh","","",49,null],[12,"freehigh","","",49,null],[12,"mem_unit","","",49,null],[12,"_f","","",49,null],[3,"stat","","",null,null],[12,"st_dev","","",50,null],[12,"st_ino","","",50,null],[12,"st_nlink","","",50,null],[12,"st_mode","","",50,null],[12,"st_uid","","",50,null],[12,"st_gid","","",50,null],[12,"st_rdev","","",50,null],[12,"st_size","","",50,null],[12,"st_blksize","","",50,null],[12,"st_blocks","","",50,null],[12,"st_atime","","",50,null],[12,"st_atime_nsec","","",50,null],[12,"st_mtime","","",50,null],[12,"st_mtime_nsec","","",50,null],[12,"st_ctime","","",50,null],[12,"st_ctime_nsec","","",50,null],[3,"stat64","","",null,null],[12,"st_dev","","",51,null],[12,"st_ino","","",51,null],[12,"st_nlink","","",51,null],[12,"st_mode","","",51,null],[12,"st_uid","","",51,null],[12,"st_gid","","",51,null],[12,"st_rdev","","",51,null],[12,"st_size","","",51,null],[12,"st_blksize","","",51,null],[12,"st_blocks","","",51,null],[12,"st_atime","","",51,null],[12,"st_atime_nsec","","",51,null],[12,"st_mtime","","",51,null],[12,"st_mtime_nsec","","",51,null],[12,"st_ctime","","",51,null],[12,"st_ctime_nsec","","",51,null],[3,"pthread_attr_t","","",null,null],[3,"_libc_fpxreg","","",null,null],[12,"significand","","",52,null],[12,"exponent","","",52,null],[3,"_libc_xmmreg","","",null,null],[12,"element","","",53,null],[3,"_libc_fpstate","","",null,null],[12,"cwd","","",54,null],[12,"swd","","",54,null],[12,"ftw","","",54,null],[12,"fop","","",54,null],[12,"rip","","",54,null],[12,"rdp","","",54,null],[12,"mxcsr","","",54,null],[12,"mxcr_mask","","",54,null],[12,"_st","","",54,null],[12,"_xmm","","",54,null],[3,"mcontext_t","","",null,null],[12,"gregs","","",55,null],[12,"fpregs","","",55,null],[3,"ucontext_t","","",null,null],[12,"uc_flags","","",56,null],[12,"uc_link","","",56,null],[12,"uc_stack","","",56,null],[12,"uc_mcontext","","",56,null],[12,"uc_sigmask","","",56,null],[4,"c_void","","",null,null],[4,"FILE","","",null,null],[4,"fpos_t","","",null,null],[4,"DIR","","",null,null],[4,"locale_t","","",null,null],[4,"timezone","","",null,null],[4,"fpos64_t","","",null,null],[5,"FD_CLR","","",null,null],[5,"FD_ISSET","","",null,null],[5,"FD_SET","","",null,null],[5,"FD_ZERO","","",null,null],[5,"WIFSTOPPED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WSTOPSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFSIGNALED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WTERMSIG","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WIFEXITED","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"WEXITSTATUS","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"c_int"}}],[5,"WCOREDUMP","","",null,{"inputs":[{"name":"c_int"}],"output":{"name":"bool"}}],[5,"CPU_ZERO","","",null,null],[5,"CPU_SET","","",null,null],[5,"CPU_ISSET","","",null,{"inputs":[{"name":"usize"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"CPU_EQUAL","","",null,{"inputs":[{"name":"cpu_set_t"},{"name":"cpu_set_t"}],"output":{"name":"bool"}}],[5,"isalnum","","",null,null],[5,"isalpha","","",null,null],[5,"iscntrl","","",null,null],[5,"isdigit","","",null,null],[5,"isgraph","","",null,null],[5,"islower","","",null,null],[5,"isprint","","",null,null],[5,"ispunct","","",null,null],[5,"isspace","","",null,null],[5,"isupper","","",null,null],[5,"isxdigit","","",null,null],[5,"tolower","","",null,null],[5,"toupper","","",null,null],[5,"fopen","","",null,null],[5,"freopen","","",null,null],[5,"fflush","","",null,null],[5,"fclose","","",null,null],[5,"remove","","",null,null],[5,"rename","","",null,null],[5,"tmpfile","","",null,null],[5,"setvbuf","","",null,null],[5,"setbuf","","",null,null],[5,"fgetc","","",null,null],[5,"fgets","","",null,null],[5,"fputc","","",null,null],[5,"fputs","","",null,null],[5,"puts","","",null,null],[5,"ungetc","","",null,null],[5,"fread","","",null,null],[5,"fwrite","","",null,null],[5,"fseek","","",null,null],[5,"ftell","","",null,null],[5,"rewind","","",null,null],[5,"fgetpos","","",null,null],[5,"fsetpos","","",null,null],[5,"feof","","",null,null],[5,"ferror","","",null,null],[5,"perror","","",null,null],[5,"atoi","","",null,null],[5,"strtod","","",null,null],[5,"strtol","","",null,null],[5,"strtoul","","",null,null],[5,"calloc","","",null,null],[5,"malloc","","",null,null],[5,"realloc","","",null,null],[5,"free","","",null,null],[5,"abort","","",null,null],[5,"exit","","",null,null],[5,"_exit","","",null,null],[5,"atexit","","",null,null],[5,"system","","",null,null],[5,"getenv","","",null,null],[5,"strcpy","","",null,null],[5,"strncpy","","",null,null],[5,"strcat","","",null,null],[5,"strncat","","",null,null],[5,"strcmp","","",null,null],[5,"strncmp","","",null,null],[5,"strcoll","","",null,null],[5,"strchr","","",null,null],[5,"strrchr","","",null,null],[5,"strspn","","",null,null],[5,"strcspn","","",null,null],[5,"strdup","","",null,null],[5,"strpbrk","","",null,null],[5,"strstr","","",null,null],[5,"strlen","","",null,null],[5,"strnlen","","",null,null],[5,"strerror","","",null,null],[5,"strtok","","",null,null],[5,"strxfrm","","",null,null],[5,"wcslen","","",null,null],[5,"memcmp","","",null,null],[5,"memchr","","",null,null],[5,"abs","","",null,null],[5,"atof","","",null,null],[5,"labs","","",null,null],[5,"rand","","",null,null],[5,"srand","","",null,null],[5,"fprintf","","",null,null],[5,"printf","","",null,null],[5,"snprintf","","",null,null],[5,"sprintf","","",null,null],[5,"fscanf","","",null,null],[5,"scanf","","",null,null],[5,"sscanf","","",null,null],[5,"socket","","",null,null],[5,"connect","","",null,null],[5,"bind","","",null,null],[5,"listen","","",null,null],[5,"accept","","",null,null],[5,"getpeername","","",null,null],[5,"getsockname","","",null,null],[5,"setsockopt","","",null,null],[5,"socketpair","","",null,null],[5,"sendto","","",null,null],[5,"shutdown","","",null,null],[5,"chmod","","",null,null],[5,"fchmod","","",null,null],[5,"fstat","","",null,null],[5,"mkdir","","",null,null],[5,"stat","","",null,null],[5,"popen","","",null,null],[5,"pclose","","",null,null],[5,"fdopen","","",null,null],[5,"fileno","","",null,null],[5,"open","","",null,null],[5,"creat","","",null,null],[5,"fcntl","","",null,null],[5,"opendir","","",null,null],[5,"readdir_r","","",null,null],[5,"closedir","","",null,null],[5,"rewinddir","","",null,null],[5,"access","","",null,null],[5,"alarm","","",null,null],[5,"chdir","","",null,null],[5,"chown","","",null,null],[5,"lchown","","",null,null],[5,"close","","",null,null],[5,"dup","","",null,null],[5,"dup2","","",null,null],[5,"execv","","",null,null],[5,"execve","","",null,null],[5,"execvp","","",null,null],[5,"fork","","",null,null],[5,"fpathconf","","",null,null],[5,"getcwd","","",null,null],[5,"getegid","","",null,null],[5,"geteuid","","",null,null],[5,"getgid","","",null,null],[5,"getgroups","","",null,null],[5,"getlogin","","",null,null],[5,"getopt","","",null,null],[5,"getpgrp","","",null,null],[5,"getpid","","",null,null],[5,"getppid","","",null,null],[5,"getuid","","",null,null],[5,"isatty","","",null,null],[5,"link","","",null,null],[5,"lseek","","",null,null],[5,"pathconf","","",null,null],[5,"pause","","",null,null],[5,"pipe","","",null,null],[5,"posix_memalign","","",null,null],[5,"read","","",null,null],[5,"rmdir","","",null,null],[5,"setgid","","",null,null],[5,"setpgid","","",null,null],[5,"setsid","","",null,null],[5,"setuid","","",null,null],[5,"sleep","","",null,null],[5,"nanosleep","","",null,null],[5,"tcgetpgrp","","",null,null],[5,"ttyname","","",null,null],[5,"unlink","","",null,null],[5,"wait","","",null,null],[5,"waitpid","","",null,null],[5,"write","","",null,null],[5,"pread","","",null,null],[5,"pwrite","","",null,null],[5,"umask","","",null,null],[5,"utime","","",null,null],[5,"kill","","",null,null],[5,"mlock","","",null,null],[5,"munlock","","",null,null],[5,"mlockall","","",null,null],[5,"munlockall","","",null,null],[5,"mmap","","",null,null],[5,"munmap","","",null,null],[5,"if_nametoindex","","",null,null],[5,"if_indextoname","","",null,null],[5,"lstat","","",null,null],[5,"fsync","","",null,null],[5,"setenv","","",null,null],[5,"unsetenv","","",null,null],[5,"symlink","","",null,null],[5,"ftruncate","","",null,null],[5,"signal","","",null,null],[5,"getrlimit","","",null,null],[5,"setrlimit","","",null,null],[5,"getrusage","","",null,null],[5,"getdtablesize","","",null,null],[5,"realpath","","",null,null],[5,"flock","","",null,null],[5,"gettimeofday","","",null,null],[5,"pthread_self","","",null,null],[5,"pthread_create","","",null,null],[5,"pthread_join","","",null,null],[5,"pthread_attr_init","","",null,null],[5,"pthread_attr_destroy","","",null,null],[5,"pthread_attr_setstacksize","","",null,null],[5,"pthread_attr_setdetachstate","","",null,null],[5,"pthread_detach","","",null,null],[5,"sched_yield","","",null,null],[5,"pthread_key_create","","",null,null],[5,"pthread_key_delete","","",null,null],[5,"pthread_getspecific","","",null,null],[5,"pthread_setspecific","","",null,null],[5,"pthread_mutex_init","","",null,null],[5,"pthread_mutex_destroy","","",null,null],[5,"pthread_mutex_lock","","",null,null],[5,"pthread_mutex_trylock","","",null,null],[5,"pthread_mutex_unlock","","",null,null],[5,"pthread_mutexattr_init","","",null,null],[5,"pthread_mutexattr_destroy","","",null,null],[5,"pthread_mutexattr_settype","","",null,null],[5,"pthread_cond_wait","","",null,null],[5,"pthread_cond_timedwait","","",null,null],[5,"pthread_cond_signal","","",null,null],[5,"pthread_cond_broadcast","","",null,null],[5,"pthread_cond_destroy","","",null,null],[5,"pthread_rwlock_destroy","","",null,null],[5,"pthread_rwlock_rdlock","","",null,null],[5,"pthread_rwlock_tryrdlock","","",null,null],[5,"pthread_rwlock_wrlock","","",null,null],[5,"pthread_rwlock_trywrlock","","",null,null],[5,"pthread_rwlock_unlock","","",null,null],[5,"pthread_sigmask","","",null,null],[5,"pthread_kill","","",null,null],[5,"strerror_r","","",null,null],[5,"getsockopt","","",null,null],[5,"raise","","",null,null],[5,"sigaction","","",null,null],[5,"sigaltstack","","",null,null],[5,"sigwait","","",null,null],[5,"utimes","","",null,null],[5,"dlopen","","",null,null],[5,"dlerror","","",null,null],[5,"dlsym","","",null,null],[5,"dlclose","","",null,null],[5,"dladdr","","",null,null],[5,"getaddrinfo","","",null,null],[5,"freeaddrinfo","","",null,null],[5,"gai_strerror","","",null,null],[5,"gmtime_r","","",null,null],[5,"localtime_r","","",null,null],[5,"mktime","","",null,null],[5,"mknod","","",null,null],[5,"writev","","",null,null],[5,"readv","","",null,null],[5,"uname","","",null,null],[5,"daemon","","",null,null],[5,"gethostname","","",null,null],[5,"chroot","","",null,null],[5,"usleep","","",null,null],[5,"send","","",null,null],[5,"recv","","",null,null],[5,"putenv","","",null,null],[5,"sendmsg","","",null,null],[5,"recvmsg","","",null,null],[5,"poll","","",null,null],[5,"select","","",null,null],[5,"setlocale","","",null,null],[5,"localeconv","","",null,null],[5,"sem_destroy","","",null,null],[5,"sem_open","","",null,null],[5,"sem_close","","",null,null],[5,"sem_unlink","","",null,null],[5,"sem_wait","","",null,null],[5,"sem_trywait","","",null,null],[5,"sem_post","","",null,null],[5,"sem_init","","",null,null],[5,"getifaddrs","","",null,null],[5,"freeifaddrs","","",null,null],[5,"glob","","",null,null],[5,"globfree","","",null,null],[5,"posix_madvise","","",null,null],[5,"shm_unlink","","",null,null],[5,"seekdir","","",null,null],[5,"telldir","","",null,null],[5,"getsid","","",null,null],[5,"madvise","","",null,null],[5,"readlink","","",null,null],[5,"msync","","",null,null],[5,"sysconf","","",null,null],[5,"recvfrom","","",null,null],[5,"mkfifo","","",null,null],[5,"sigemptyset","","",null,null],[5,"sigaddset","","",null,null],[5,"sigfillset","","",null,null],[5,"sigdelset","","",null,null],[5,"sigismember","","",null,null],[5,"pselect","","",null,null],[5,"fseeko","","",null,null],[5,"ftello","","",null,null],[5,"timegm","","",null,null],[5,"statvfs","","",null,null],[5,"fstatvfs","","",null,null],[5,"tcdrain","","",null,null],[5,"cfgetispeed","","",null,null],[5,"cfgetospeed","","",null,null],[5,"cfsetispeed","","",null,null],[5,"cfsetospeed","","",null,null],[5,"tcgetattr","","",null,null],[5,"tcsetattr","","",null,null],[5,"tcflow","","",null,null],[5,"tcflush","","",null,null],[5,"tcsendbreak","","",null,null],[5,"mkstemp","","",null,null],[5,"mkstemps","","",null,null],[5,"mkdtemp","","",null,null],[5,"futimes","","",null,null],[5,"nl_langinfo","","",null,null],[5,"openlog","","",null,null],[5,"closelog","","",null,null],[5,"setlogmask","","",null,null],[5,"syslog","","",null,null],[5,"nice","","",null,null],[5,"getpwuid_r","","",null,null],[5,"fdatasync","","",null,null],[5,"mincore","","",null,null],[5,"clock_getres","","",null,null],[5,"clock_gettime","","",null,null],[5,"prctl","","",null,null],[5,"pthread_getattr_np","","",null,null],[5,"pthread_attr_getguardsize","","",null,null],[5,"pthread_attr_getstack","","",null,null],[5,"memalign","","",null,null],[5,"setgroups","","",null,null],[5,"sched_setscheduler","","",null,null],[5,"sched_getscheduler","","",null,null],[5,"sched_get_priority_max","","",null,null],[5,"sched_get_priority_min","","",null,null],[5,"epoll_create","","",null,null],[5,"epoll_create1","","",null,null],[5,"epoll_ctl","","",null,null],[5,"epoll_wait","","",null,null],[5,"pipe2","","",null,null],[5,"mount","","",null,null],[5,"umount","","",null,null],[5,"umount2","","",null,null],[5,"clone","","",null,null],[5,"statfs","","",null,null],[5,"fstatfs","","",null,null],[5,"memrchr","","",null,null],[5,"syscall","","",null,null],[5,"sendfile","","",null,null],[5,"splice","","",null,null],[5,"tee","","",null,null],[5,"vmsplice","","",null,null],[5,"posix_fadvise","","",null,null],[5,"futimens","","",null,null],[5,"utimensat","","",null,null],[5,"duplocale","","",null,null],[5,"freelocale","","",null,null],[5,"newlocale","","",null,null],[5,"uselocale","","",null,null],[5,"creat64","","",null,null],[5,"fstat64","","",null,null],[5,"ftruncate64","","",null,null],[5,"getrlimit64","","",null,null],[5,"lseek64","","",null,null],[5,"lstat64","","",null,null],[5,"mmap64","","",null,null],[5,"open64","","",null,null],[5,"pread64","","",null,null],[5,"pwrite64","","",null,null],[5,"readdir64_r","","",null,null],[5,"setrlimit64","","",null,null],[5,"stat64","","",null,null],[5,"eventfd","","",null,null],[5,"sysinfo","","",null,null],[5,"openat","","",null,null],[5,"faccessat","","",null,null],[5,"fchmodat","","",null,null],[5,"fchownat","","",null,null],[5,"fstatat","","",null,null],[5,"linkat","","",null,null],[5,"mkdirat","","",null,null],[5,"mknodat","","",null,null],[5,"readlinkat","","",null,null],[5,"renameat","","",null,null],[5,"symlinkat","","",null,null],[5,"unlinkat","","",null,null],[5,"shm_open","","",null,null],[5,"shmget","","",null,null],[5,"shmat","","",null,null],[5,"shmdt","","",null,null],[5,"shmctl","","",null,null],[5,"mprotect","","",null,null],[5,"__errno_location","","",null,null],[5,"fopen64","","",null,null],[5,"freopen64","","",null,null],[5,"tmpfile64","","",null,null],[5,"fgetpos64","","",null,null],[5,"fsetpos64","","",null,null],[5,"fseeko64","","",null,null],[5,"ftello64","","",null,null],[5,"fallocate","","",null,null],[5,"posix_fallocate","","",null,null],[5,"readahead","","",null,null],[5,"getxattr","","",null,null],[5,"lgetxattr","","",null,null],[5,"fgetxattr","","",null,null],[5,"setxattr","","",null,null],[5,"lsetxattr","","",null,null],[5,"fsetxattr","","",null,null],[5,"listxattr","","",null,null],[5,"llistxattr","","",null,null],[5,"flistxattr","","",null,null],[5,"removexattr","","",null,null],[5,"lremovexattr","","",null,null],[5,"fremovexattr","","",null,null],[5,"signalfd","","",null,null],[5,"pwritev","","",null,null],[5,"preadv","","",null,null],[5,"quotactl","","",null,null],[5,"mq_open","","",null,null],[5,"mq_close","","",null,null],[5,"mq_unlink","","",null,null],[5,"mq_receive","","",null,null],[5,"mq_send","","",null,null],[5,"mq_getattr","","",null,null],[5,"mq_setattr","","",null,null],[5,"sched_getaffinity","","",null,null],[5,"sched_setaffinity","","",null,null],[5,"epoll_pwait","","",null,null],[5,"dup3","","",null,null],[5,"unshare","","",null,null],[5,"sethostname","","",null,null],[5,"setns","","",null,null],[5,"mkostemp","","",null,null],[5,"mkostemps","","",null,null],[5,"sigtimedwait","","",null,null],[5,"sigwaitinfo","","",null,null],[5,"openpty","","",null,null],[5,"forkpty","","",null,null],[5,"nl_langinfo_l","","",null,null],[5,"getnameinfo","","",null,null],[5,"prlimit","","",null,null],[5,"prlimit64","","",null,null],[5,"getloadavg","","",null,null],[5,"process_vm_readv","","",null,null],[5,"process_vm_writev","","",null,null],[5,"mkfifoat","","",null,null],[5,"sysctl","","",null,null],[5,"ioctl","","",null,null],[5,"backtrace","","",null,null],[5,"glob64","","",null,null],[5,"globfree64","","",null,null],[5,"ptrace","","",null,null],[5,"pthread_attr_getaffinity_np","","",null,null],[5,"pthread_attr_setaffinity_np","","",null,null],[5,"getpriority","","",null,null],[5,"setpriority","","",null,null],[5,"pthread_getaffinity_np","","",null,null],[5,"pthread_setaffinity_np","","",null,null],[5,"sched_getcpu","","",null,null],[5,"getcontext","","",null,null],[5,"setcontext","","",null,null],[5,"makecontext","","",null,null],[5,"swapcontext","","",null,null],[11,"is_some","core::option","Returns `true` if the option is a `Some` value",57,null],[11,"is_none","","Returns `true` if the option is a `None` value",57,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",57,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",57,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",57,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",57,null],[11,"unwrap_or","","Returns the contained value or a default.",57,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",57,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",57,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",57,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",57,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",57,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",57,null],[11,"iter","","Returns an iterator over the possibly contained value.",57,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",57,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",57,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",57,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",57,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",57,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",57,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",57,null],[11,"unwrap_or_default","","Returns the contained value or a default",57,null],[11,"hash","core::num","",58,null],[11,"default","","",58,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",58,null],[11,"cmp","","",58,null],[11,"partial_cmp","","",58,null],[11,"lt","","",58,null],[11,"le","","",58,null],[11,"gt","","",58,null],[11,"ge","","",58,null],[11,"eq","","",58,null],[11,"ne","","",58,null],[11,"fmt","","",58,null],[11,"fmt","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"shl","","",58,null],[11,"shl_assign","","",58,null],[11,"shr","","",58,null],[11,"shr_assign","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"add","","",58,null],[11,"add_assign","","",58,null],[11,"sub","","",58,null],[11,"sub_assign","","",58,null],[11,"mul","","",58,null],[11,"mul_assign","","",58,null],[11,"div","","",58,null],[11,"div_assign","","",58,null],[11,"rem","","",58,null],[11,"rem_assign","","",58,null],[11,"not","","",58,null],[11,"bitxor","","",58,null],[11,"bitxor_assign","","",58,null],[11,"bitor","","",58,null],[11,"bitor_assign","","",58,null],[11,"bitand","","",58,null],[11,"bitand_assign","","",58,null],[11,"neg","","",58,null],[11,"eq","core::num::dec2flt","",59,null],[11,"ne","","",59,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"fmt","","",59,null],[11,"fmt","core::num","",60,null],[11,"eq","","",60,null],[11,"clone","","",60,null],[11,"clone","","",61,null],[11,"fmt","","",61,null],[11,"fmt","","",61,null],[11,"eq","","",62,null],[11,"ne","","",62,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"fmt","","",62,null],[11,"hash","core::nonzero","",63,null],[11,"fmt","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"cmp","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",63,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",63,null],[11,"new","core::ptr","Creates a new `Unique`.",64,null],[11,"get","","Dereferences the content.",64,null],[11,"get_mut","","Mutably dereferences the content.",64,null],[11,"deref","","",64,null],[11,"fmt","","",64,null],[11,"new","","Creates a new `Shared`.",65,null],[11,"clone","","",65,null],[11,"deref","","",65,null],[11,"fmt","","",65,null],[11,"hash","core::marker","",66,null],[11,"eq","","",66,null],[11,"partial_cmp","","",66,null],[11,"cmp","","",66,null],[11,"clone","","",66,null],[11,"default","","",66,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",67,null],[11,"clone","","",67,null],[11,"fmt","","",67,null],[11,"eq","","",68,null],[11,"ne","","",68,null],[11,"clone","","",68,null],[11,"fmt","","",68,null],[11,"contains","","# Examples",68,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"fmt","","",69,null],[11,"contains","","# Examples",69,null],[11,"eq","","",70,null],[11,"ne","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",70,null],[11,"contains","","# Examples",70,null],[11,"eq","","",71,null],[11,"ne","","",71,null],[11,"clone","","",71,null],[11,"fmt","","",71,null],[11,"from","","",71,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",71,null],[11,"eq","","",72,null],[11,"ne","","",72,null],[11,"clone","","",72,null],[11,"fmt","","",72,null],[11,"contains","","# Examples",72,null],[11,"hash","core::cmp","",73,null],[11,"fmt","","",73,null],[11,"eq","","",73,null],[11,"clone","","",73,null],[11,"reverse","","Reverse the `Ordering`.",73,null],[11,"cmp","","",73,null],[11,"partial_cmp","","",73,null],[11,"fmt","libc","",74,null],[11,"fmt","","",74,null],[11,"is","","Returns true if the boxed type is the same as `T`",74,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",74,null],[11,"is","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",74,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",74,null],[11,"hash","core::any","",75,null],[11,"fmt","","",75,null],[11,"eq","","",75,null],[11,"ne","","",75,null],[11,"clone","","",75,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",75,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",76,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",77,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",78,null],[11,"clone","","",78,null],[11,"new","","Creates a new `AtomicBool`.",76,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",76,null],[11,"store","","Stores a value into the bool.",76,null],[11,"swap","","Stores a value into the bool, returning the old value.",76,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",76,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",76,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",76,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",76,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",76,null],[11,"new","","Creates a new `AtomicPtr`.",77,null],[11,"load","","Loads a value from the pointer.",77,null],[11,"store","","Stores a value into the pointer.",77,null],[11,"swap","","Stores a value into the pointer, returning the old value.",77,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",77,null],[11,"default","","",79,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",79,null],[11,"new","","Creates a new atomic integer.",79,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",79,null],[11,"store","","Stores a value into the atomic integer.",79,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",79,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",79,null],[11,"fetch_add","","Add to the current value, returning the previous value.",79,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",79,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",79,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",79,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",79,null],[11,"default","","",80,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",80,null],[11,"new","","Creates a new atomic integer.",80,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",80,null],[11,"store","","Stores a value into the atomic integer.",80,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",80,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",80,null],[11,"fetch_add","","Add to the current value, returning the previous value.",80,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",80,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",80,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",80,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",80,null],[11,"default","","",81,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",81,null],[11,"new","","Creates a new atomic integer.",81,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",81,null],[11,"store","","Stores a value into the atomic integer.",81,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",81,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",81,null],[11,"fetch_add","","Add to the current value, returning the previous value.",81,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",81,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",81,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",81,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",81,null],[11,"default","","",82,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",82,null],[11,"new","","Creates a new atomic integer.",82,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",82,null],[11,"store","","Stores a value into the atomic integer.",82,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",82,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",82,null],[11,"fetch_add","","Add to the current value, returning the previous value.",82,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",82,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",82,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",82,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",82,null],[11,"default","","",83,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",83,null],[11,"new","","Creates a new atomic integer.",83,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",83,null],[11,"store","","Stores a value into the atomic integer.",83,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",83,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",83,null],[11,"fetch_add","","Add to the current value, returning the previous value.",83,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",83,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",83,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",83,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",83,null],[11,"default","","",84,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",84,null],[11,"new","","Creates a new atomic integer.",84,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",84,null],[11,"store","","Stores a value into the atomic integer.",84,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",84,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",84,null],[11,"fetch_add","","Add to the current value, returning the previous value.",84,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",84,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",84,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",84,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",84,null],[11,"default","","",85,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",85,null],[11,"new","","Creates a new atomic integer.",85,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",85,null],[11,"store","","Stores a value into the atomic integer.",85,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",85,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",85,null],[11,"fetch_add","","Add to the current value, returning the previous value.",85,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",85,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",85,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",85,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",85,null],[11,"default","","",86,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",86,null],[11,"new","","Creates a new atomic integer.",86,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",86,null],[11,"store","","Stores a value into the atomic integer.",86,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",86,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",86,null],[11,"fetch_add","","Add to the current value, returning the previous value.",86,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",86,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",86,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",86,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",86,null],[11,"default","","",87,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",87,null],[11,"new","","Creates a new atomic integer.",87,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",87,null],[11,"store","","Stores a value into the atomic integer.",87,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",87,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",87,null],[11,"fetch_add","","Add to the current value, returning the previous value.",87,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",87,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",87,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",87,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",87,null],[11,"default","","",88,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",88,null],[11,"new","","Creates a new atomic integer.",88,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",88,null],[11,"store","","Stores a value into the atomic integer.",88,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",88,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",88,null],[11,"fetch_add","","Add to the current value, returning the previous value.",88,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",88,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",88,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",88,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",88,null],[11,"fmt","","",76,null],[11,"fmt","","",77,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",89,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",89,null],[11,"set","","Sets the contained value.",89,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",89,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",89,null],[11,"clone","","",89,null],[11,"default","","",89,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",89,null],[11,"partial_cmp","","",89,null],[11,"lt","","",89,null],[11,"le","","",89,null],[11,"gt","","",89,null],[11,"ge","","",89,null],[11,"cmp","","",89,null],[11,"fmt","","",90,null],[11,"eq","","",90,null],[11,"clone","","",90,null],[11,"new","","Creates a new `RefCell` containing `value`.",91,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",91,null],[11,"borrow_state","","Query the current state of this `RefCell`",91,null],[11,"borrow","","Immutably borrows the wrapped value.",91,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",91,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",91,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",91,null],[11,"clone","","",91,null],[11,"default","","",91,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",91,null],[11,"partial_cmp","","",91,null],[11,"lt","","",91,null],[11,"le","","",91,null],[11,"gt","","",91,null],[11,"ge","","",91,null],[11,"cmp","","",91,null],[11,"deref","","",92,null],[11,"clone","","Copies a `Ref`.",92,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",92,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",93,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",93,null],[11,"deref_mut","","",93,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",94,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",94,null],[11,"get","","Gets a mutable pointer to the wrapped value.",94,null],[11,"default","","",94,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",95,null],[11,"clone","","",95,null],[11,"next","","",95,null],[11,"size_hint","","",95,null],[11,"last","","",95,null],[11,"fmt","","",96,null],[11,"clone","","",96,null],[11,"next","","",96,null],[11,"size_hint","","",96,null],[11,"count","","",96,null],[11,"nth","","",96,null],[11,"last","","",96,null],[11,"fmt","","",97,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",97,null],[11,"next","","",97,null],[11,"size_hint","","",97,null],[11,"fmt","","",98,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",98,null],[11,"next","","",98,null],[11,"size_hint","","",98,null],[11,"fmt","core::iter::range","",99,null],[11,"clone","","",99,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",69,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",68,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",71,null],[11,"next","core::iter::range","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","","",99,null],[11,"size_hint","","",99,null],[11,"next","core::ops","",68,null],[11,"size_hint","","",68,null],[11,"next_back","","",68,null],[11,"next","","",69,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","core::iter::sources","",100,null],[11,"clone","","",100,null],[11,"next","","",100,null],[11,"size_hint","","",100,null],[11,"next_back","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"size_hint","","",101,null],[11,"next_back","","",101,null],[11,"len","","",101,null],[11,"clone","","",101,null],[11,"default","","",101,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",102,null],[11,"clone","","",102,null],[11,"next","","",102,null],[11,"size_hint","","",102,null],[11,"next_back","","",102,null],[11,"len","","",102,null],[11,"fmt","core::iter","",103,null],[11,"clone","","",103,null],[11,"next","","",103,null],[11,"size_hint","","",103,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"next","","",106,null],[11,"count","","",106,null],[11,"nth","","",106,null],[11,"find","","",106,null],[11,"last","","",106,null],[11,"size_hint","","",106,null],[11,"next_back","","",106,null],[11,"fmt","","",107,null],[11,"clone","","",107,null],[11,"next","","",107,null],[11,"size_hint","","",107,null],[11,"next_back","","",107,null],[11,"clone","","",108,null],[11,"fmt","","",108,null],[11,"next","","",108,null],[11,"size_hint","","",108,null],[11,"next_back","","",108,null],[11,"clone","","",109,null],[11,"fmt","","",109,null],[11,"next","","",109,null],[11,"size_hint","","",109,null],[11,"next_back","","",109,null],[11,"clone","","",110,null],[11,"fmt","","",110,null],[11,"next","","",110,null],[11,"size_hint","","",110,null],[11,"next_back","","",110,null],[11,"fmt","","",111,null],[11,"clone","","",111,null],[11,"next","","# Overflow Behavior",111,null],[11,"size_hint","","",111,null],[11,"nth","","",111,null],[11,"count","","",111,null],[11,"next_back","","",111,null],[11,"fmt","","",112,null],[11,"clone","","",112,null],[11,"next","","",112,null],[11,"count","","",112,null],[11,"nth","","",112,null],[11,"last","","",112,null],[11,"size_hint","","",112,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",112,null],[11,"is_empty","","Checks if the iterator has finished iterating.",112,null],[11,"clone","","",113,null],[11,"fmt","","",113,null],[11,"next","","",113,null],[11,"size_hint","","",113,null],[11,"clone","","",114,null],[11,"fmt","","",114,null],[11,"next","","",114,null],[11,"size_hint","","",114,null],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"next","","",115,null],[11,"nth","","",115,null],[11,"count","","",115,null],[11,"last","","",115,null],[11,"size_hint","","",115,null],[11,"next_back","","",115,null],[11,"fmt","","",116,null],[11,"clone","","",116,null],[11,"next","","",116,null],[11,"nth","","",116,null],[11,"size_hint","","",116,null],[11,"clone","","",117,null],[11,"fmt","","",117,null],[11,"next","","",117,null],[11,"size_hint","","",117,null],[11,"clone","","",118,null],[11,"fmt","","",118,null],[11,"next","","",118,null],[11,"size_hint","","",118,null],[11,"next_back","","",118,null],[11,"fmt","","",119,null],[11,"clone","","",119,null],[11,"next","","",119,null],[11,"nth","","",119,null],[11,"last","","",119,null],[11,"count","","",119,null],[11,"size_hint","","",119,null],[11,"next_back","","",119,null],[11,"clone","","",120,null],[11,"fmt","","",120,null],[11,"next","","",120,null],[11,"size_hint","","",120,null],[11,"next_back","","",120,null],[11,"hash","core::option","",57,null],[11,"fmt","","",57,null],[11,"cmp","","",57,null],[11,"partial_cmp","","",57,null],[11,"lt","","",57,null],[11,"le","","",57,null],[11,"gt","","",57,null],[11,"ge","","",57,null],[11,"eq","","",57,null],[11,"ne","","",57,null],[11,"clone","","",57,null],[11,"default","","",57,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",57,null],[11,"fmt","","",121,null],[11,"next","","",121,null],[11,"size_hint","","",121,null],[11,"next_back","","",121,null],[11,"clone","","",121,null],[11,"fmt","","",122,null],[11,"next","","",122,null],[11,"size_hint","","",122,null],[11,"next_back","","",122,null],[11,"fmt","","",123,null],[11,"clone","","",123,null],[11,"next","","",123,null],[11,"size_hint","","",123,null],[11,"next_back","","",123,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",57,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",124,null],[11,"clone","","",125,null],[11,"hash","core::result","",126,null],[11,"fmt","","",126,null],[11,"cmp","","",126,null],[11,"partial_cmp","","",126,null],[11,"lt","","",126,null],[11,"le","","",126,null],[11,"gt","","",126,null],[11,"ge","","",126,null],[11,"eq","","",126,null],[11,"ne","","",126,null],[11,"clone","","",126,null],[11,"is_ok","","Returns true if the result is `Ok`",126,null],[11,"is_err","","Returns true if the result is `Err`",126,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",126,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",126,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",126,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",126,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",126,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",126,null],[11,"iter","","Returns an iterator over the possibly contained value.",126,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",126,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",126,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",126,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",126,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",126,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",126,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",126,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",126,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",126,null],[11,"fmt","","",127,null],[11,"next","","",127,null],[11,"size_hint","","",127,null],[11,"next_back","","",127,null],[11,"clone","","",127,null],[11,"fmt","","",128,null],[11,"next","","",128,null],[11,"size_hint","","",128,null],[11,"next_back","","",128,null],[11,"fmt","","",129,null],[11,"next","","",129,null],[11,"size_hint","","",129,null],[11,"next_back","","",129,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",126,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",130,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",130,null],[11,"next","","",130,null],[11,"size_hint","","",130,null],[11,"count","","",130,null],[11,"nth","","",130,null],[11,"last","","",130,null],[11,"next_back","","",130,null],[11,"clone","","",130,null],[11,"fmt","","",131,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",131,null],[11,"next","","",131,null],[11,"size_hint","","",131,null],[11,"count","","",131,null],[11,"nth","","",131,null],[11,"last","","",131,null],[11,"next_back","","",131,null],[11,"fmt","","",132,null],[11,"clone","","",132,null],[11,"next","","",132,null],[11,"size_hint","","",132,null],[11,"next_back","","",132,null],[11,"fmt","","",133,null],[11,"next","","",133,null],[11,"size_hint","","",133,null],[11,"next_back","","",133,null],[11,"fmt","","",134,null],[11,"fmt","","",135,null],[11,"fmt","","",136,null],[11,"fmt","","",137,null],[11,"next","","",134,null],[11,"size_hint","","",134,null],[11,"next","","",135,null],[11,"size_hint","","",135,null],[11,"next","","",136,null],[11,"size_hint","","",136,null],[11,"next","","",137,null],[11,"size_hint","","",137,null],[11,"fmt","","",138,null],[11,"clone","","",138,null],[11,"next","","",138,null],[11,"size_hint","","",138,null],[11,"count","","",138,null],[11,"nth","","",138,null],[11,"last","","",138,null],[11,"next_back","","",138,null],[11,"fmt","","",139,null],[11,"clone","","",139,null],[11,"next","","",139,null],[11,"size_hint","","",139,null],[11,"count","","",139,null],[11,"nth","","",139,null],[11,"last","","",139,null],[11,"next_back","","",139,null],[11,"fmt","","",140,null],[11,"next","","",140,null],[11,"size_hint","","",140,null],[11,"count","","",140,null],[11,"nth","","",140,null],[11,"last","","",140,null],[11,"next_back","","",140,null],[11,"fmt","core::str::pattern","",141,null],[11,"eq","","",141,null],[11,"ne","","",141,null],[11,"clone","","",141,null],[11,"fmt","","",142,null],[11,"clone","","",142,null],[11,"haystack","","",142,null],[11,"next","","",142,null],[11,"next_match","","",142,null],[11,"next_reject","","",142,null],[11,"next_back","","",142,null],[11,"next_match_back","","",142,null],[11,"next_reject_back","","",142,null],[11,"fmt","","",143,null],[11,"clone","","",143,null],[11,"haystack","","",143,null],[11,"next","","",143,null],[11,"next_match","","",143,null],[11,"next_reject","","",143,null],[11,"next_back","","",143,null],[11,"next_match_back","","",143,null],[11,"next_reject_back","","",143,null],[11,"clone","","",144,null],[11,"fmt","","",144,null],[11,"haystack","","",144,null],[11,"next","","",144,null],[11,"next_match","","",144,null],[11,"next_reject","","",144,null],[11,"next_back","","",144,null],[11,"next_match_back","","",144,null],[11,"next_reject_back","","",144,null],[11,"fmt","","",145,null],[11,"clone","","",145,null],[11,"haystack","","",145,null],[11,"next","","",145,null],[11,"next_match","","",145,null],[11,"next_back","","",145,null],[11,"next_match_back","","",145,null],[11,"eq","core::str","",146,null],[11,"ne","","",146,null],[11,"clone","","",146,null],[11,"fmt","","",146,null],[11,"fmt","","",146,null],[11,"fmt","","",147,null],[11,"clone","","",147,null],[11,"eq","","",147,null],[11,"ne","","",147,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",147,null],[11,"fmt","","",147,null],[11,"fmt","","",148,null],[11,"clone","","",148,null],[11,"next","","",148,null],[11,"size_hint","","",148,null],[11,"next_back","","",148,null],[11,"as_str","","View the underlying data as a subslice of the original data.",148,null],[11,"fmt","","",149,null],[11,"clone","","",149,null],[11,"next","","",149,null],[11,"size_hint","","",149,null],[11,"next_back","","",149,null],[11,"as_str","","View the underlying data as a subslice of the original data.",149,null],[11,"fmt","","",150,null],[11,"clone","","",150,null],[11,"next","","",150,null],[11,"size_hint","","",150,null],[11,"count","","",150,null],[11,"last","","",150,null],[11,"nth","","",150,null],[11,"next_back","","",150,null],[11,"len","","",150,null],[11,"fmt","","",151,null],[11,"next","","",151,null],[11,"clone","","",151,null],[11,"fmt","","",152,null],[11,"next","","",152,null],[11,"clone","","",152,null],[11,"next_back","","",151,null],[11,"next_back","","",152,null],[11,"fmt","","",153,null],[11,"next","","",153,null],[11,"clone","","",153,null],[11,"fmt","","",154,null],[11,"next","","",154,null],[11,"clone","","",154,null],[11,"next_back","","",153,null],[11,"next_back","","",154,null],[11,"fmt","","",155,null],[11,"next","","",155,null],[11,"clone","","",155,null],[11,"fmt","","",156,null],[11,"next","","",156,null],[11,"clone","","",156,null],[11,"fmt","","",157,null],[11,"next","","",157,null],[11,"clone","","",157,null],[11,"fmt","","",158,null],[11,"next","","",158,null],[11,"clone","","",158,null],[11,"next_back","","",157,null],[11,"next_back","","",158,null],[11,"fmt","","",159,null],[11,"next","","",159,null],[11,"clone","","",159,null],[11,"fmt","","",160,null],[11,"next","","",160,null],[11,"clone","","",160,null],[11,"next_back","","",159,null],[11,"next_back","","",160,null],[11,"fmt","","",161,null],[11,"clone","","",161,null],[11,"next","","",161,null],[11,"size_hint","","",161,null],[11,"next_back","","",161,null],[11,"fmt","","",162,null],[11,"clone","","",162,null],[11,"next","","",162,null],[11,"size_hint","","",162,null],[11,"next_back","","",162,null],[11,"fmt","","",163,null],[11,"clone","","",163,null],[11,"fmt","core::hash::sip","",164,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",164,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",164,null],[11,"finish","","",164,null],[11,"clone","","",164,null],[11,"default","","",164,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",165,null],[11,"build_hasher","","",165,null],[11,"clone","","",165,null],[11,"default","","",165,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",166,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",167,null],[11,"finish","","Finishes output and returns any error encountered.",167,null],[11,"field","","Adds a new field to the generated tuple struct output.",168,null],[11,"finish","","Finishes output and returns any error encountered.",168,null],[11,"entry","","Adds a new entry to the set output.",169,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",169,null],[11,"finish","","Finishes output and returns any error encountered.",169,null],[11,"entry","","Adds a new entry to the list output.",170,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",170,null],[11,"finish","","Finishes output and returns any error encountered.",170,null],[11,"entry","","Adds a new entry to the map output.",171,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",171,null],[11,"finish","","Finishes output and returns any error encountered.",171,null],[11,"partial_cmp","core::fmt","",172,null],[11,"eq","","",172,null],[11,"cmp","","",172,null],[11,"hash","","",172,null],[11,"default","","",172,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",172,null],[11,"clone","","",172,null],[11,"clone","","",173,null],[11,"fmt","","",173,null],[11,"fmt","","",173,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",174,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",174,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",174,null],[11,"write_fmt","","Writes some formatted information into this instance",174,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",174,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",174,null],[11,"align","","Flag indicating what form of alignment was requested",174,null],[11,"width","","Optionally specified integer width that the output should be",174,null],[11,"precision","","Optionally specified precision for numeric types",174,null],[11,"sign_plus","","Determines if the `+` flag was specified.",174,null],[11,"sign_minus","","Determines if the `-` flag was specified.",174,null],[11,"alternate","","Determines if the `#` flag was specified.",174,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",174,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",174,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",174,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",174,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",174,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",174,null],[11,"write_str","","",174,null],[11,"write_char","","",174,null],[11,"write_fmt","","",174,null],[11,"fmt","","",172,null],[11,"fmt","core::marker","",66,null],[11,"fmt","core::cell","",89,null],[11,"fmt","","",91,null],[11,"fmt","","",92,null],[11,"fmt","","",93,null],[11,"fmt","","",94,null],[11,"clone_from","libc::dox","Performs copy-assignment from `source`.",175,null],[11,"clone_from","libc::dox::imp","Performs copy-assignment from `source`.",175,null],[11,"clone","libc","",50,null],[11,"clone","","",51,null],[11,"clone","","",176,null],[11,"clone","","",52,null],[11,"clone","","",53,null],[11,"clone","","",54,null],[11,"clone","","",55,null],[11,"clone","","",56,null],[11,"clone","","",177,null],[11,"clone","","",49,null],[11,"clone","","",38,null],[11,"clone","","",39,null],[11,"clone","","",40,null],[11,"clone","","",41,null],[11,"clone","","",42,null],[11,"clone","","",43,null],[11,"clone","","",44,null],[11,"clone","","",45,null],[11,"clone","","",46,null],[11,"clone","","",47,null],[11,"clone","","",48,null],[11,"clone","","",178,null],[11,"clone","","",28,null],[11,"clone","","",29,null],[11,"clone","","",30,null],[11,"clone","","",31,null],[11,"clone","","",32,null],[11,"clone","","",179,null],[11,"clone","","",180,null],[11,"clone","","",181,null],[11,"clone","","",182,null],[11,"clone","","",33,null],[11,"clone","","",34,null],[11,"clone","","",35,null],[11,"clone","","",36,null],[11,"clone","","",183,null],[11,"clone","","",37,null],[11,"clone","","",184,null],[11,"clone","","",14,null],[11,"clone","","",15,null],[11,"clone","","",16,null],[11,"clone","","",17,null],[11,"clone","","",18,null],[11,"clone","","",19,null],[11,"clone","","",20,null],[11,"clone","","",21,null],[11,"clone","","",185,null],[11,"clone","","",22,null],[11,"clone","","",23,null],[11,"clone","","",24,null],[11,"clone","","",25,null],[11,"clone","","",26,null],[11,"clone","","",27,null],[11,"clone","","",0,null],[11,"clone","","",1,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"clone","","",4,null],[11,"clone","","",5,null],[11,"clone","","",6,null],[11,"clone","","",7,null],[11,"clone","","",8,null],[11,"clone","","",9,null],[11,"clone","","",10,null],[11,"clone","","",11,null],[11,"clone","","",12,null],[11,"clone","","",13,null],[6,"int8_t","","",null,null],[6,"int16_t","","",null,null],[6,"int32_t","","",null,null],[6,"int64_t","","",null,null],[6,"uint8_t","","",null,null],[6,"uint16_t","","",null,null],[6,"uint32_t","","",null,null],[6,"uint64_t","","",null,null],[6,"c_schar","","",null,null],[6,"c_uchar","","",null,null],[6,"c_short","","",null,null],[6,"c_ushort","","",null,null],[6,"c_int","","",null,null],[6,"c_uint","","",null,null],[6,"c_float","","",null,null],[6,"c_double","","",null,null],[6,"c_longlong","","",null,null],[6,"c_ulonglong","","",null,null],[6,"intmax_t","","",null,null],[6,"uintmax_t","","",null,null],[6,"size_t","","",null,null],[6,"ptrdiff_t","","",null,null],[6,"intptr_t","","",null,null],[6,"uintptr_t","","",null,null],[6,"ssize_t","","",null,null],[6,"pid_t","","",null,null],[6,"uid_t","","",null,null],[6,"gid_t","","",null,null],[6,"in_addr_t","","",null,null],[6,"in_port_t","","",null,null],[6,"sighandler_t","","",null,null],[6,"cc_t","","",null,null],[6,"sa_family_t","","",null,null],[6,"pthread_key_t","","",null,null],[6,"speed_t","","",null,null],[6,"tcflag_t","","",null,null],[6,"loff_t","","",null,null],[6,"clockid_t","","",null,null],[6,"id_t","","",null,null],[6,"useconds_t","","",null,null],[6,"dev_t","","",null,null],[6,"socklen_t","","",null,null],[6,"pthread_t","","",null,null],[6,"mode_t","","",null,null],[6,"ino64_t","","",null,null],[6,"off64_t","","",null,null],[6,"blkcnt64_t","","",null,null],[6,"rlim64_t","","",null,null],[6,"key_t","","",null,null],[6,"shmatt_t","","",null,null],[6,"mqd_t","","",null,null],[6,"nfds_t","","",null,null],[6,"nl_item","","",null,null],[6,"fsblkcnt_t","","",null,null],[6,"fsfilcnt_t","","",null,null],[6,"rlim_t","","",null,null],[6,"__priority_which_t","","",null,null],[6,"c_long","","",null,null],[6,"c_ulong","","",null,null],[6,"clock_t","","",null,null],[6,"time_t","","",null,null],[6,"suseconds_t","","",null,null],[6,"ino_t","","",null,null],[6,"off_t","","",null,null],[6,"blkcnt_t","","",null,null],[6,"__fsword_t","","",null,null],[6,"c_char","","",null,null],[6,"wchar_t","","",null,null],[6,"nlink_t","","",null,null],[6,"blksize_t","","",null,null],[6,"greg_t","","",null,null],[17,"SIG_DFL","","",null,null],[17,"SIG_IGN","","",null,null],[17,"SIG_ERR","","",null,null],[17,"DT_FIFO","","",null,null],[17,"DT_CHR","","",null,null],[17,"DT_DIR","","",null,null],[17,"DT_BLK","","",null,null],[17,"DT_REG","","",null,null],[17,"DT_LNK","","",null,null],[17,"DT_SOCK","","",null,null],[17,"FD_CLOEXEC","","",null,null],[17,"USRQUOTA","","",null,null],[17,"GRPQUOTA","","",null,null],[17,"SIGIOT","","",null,null],[17,"S_ISUID","","",null,null],[17,"S_ISGID","","",null,null],[17,"S_ISVTX","","",null,null],[17,"POLLIN","","",null,null],[17,"POLLPRI","","",null,null],[17,"POLLOUT","","",null,null],[17,"POLLERR","","",null,null],[17,"POLLHUP","","",null,null],[17,"POLLNVAL","","",null,null],[17,"IF_NAMESIZE","","",null,null],[17,"RTLD_LAZY","","",null,null],[17,"LOG_EMERG","","",null,null],[17,"LOG_ALERT","","",null,null],[17,"LOG_CRIT","","",null,null],[17,"LOG_ERR","","",null,null],[17,"LOG_WARNING","","",null,null],[17,"LOG_NOTICE","","",null,null],[17,"LOG_INFO","","",null,null],[17,"LOG_DEBUG","","",null,null],[17,"LOG_KERN","","",null,null],[17,"LOG_USER","","",null,null],[17,"LOG_MAIL","","",null,null],[17,"LOG_DAEMON","","",null,null],[17,"LOG_AUTH","","",null,null],[17,"LOG_SYSLOG","","",null,null],[17,"LOG_LPR","","",null,null],[17,"LOG_NEWS","","",null,null],[17,"LOG_UUCP","","",null,null],[17,"LOG_LOCAL0","","",null,null],[17,"LOG_LOCAL1","","",null,null],[17,"LOG_LOCAL2","","",null,null],[17,"LOG_LOCAL3","","",null,null],[17,"LOG_LOCAL4","","",null,null],[17,"LOG_LOCAL5","","",null,null],[17,"LOG_LOCAL6","","",null,null],[17,"LOG_LOCAL7","","",null,null],[17,"LOG_PID","","",null,null],[17,"LOG_CONS","","",null,null],[17,"LOG_ODELAY","","",null,null],[17,"LOG_NDELAY","","",null,null],[17,"LOG_NOWAIT","","",null,null],[17,"LOG_PRIMASK","","",null,null],[17,"LOG_FACMASK","","",null,null],[17,"PRIO_PROCESS","","",null,null],[17,"PRIO_PGRP","","",null,null],[17,"PRIO_USER","","",null,null],[17,"PRIO_MIN","","",null,null],[17,"PRIO_MAX","","",null,null],[17,"EXIT_FAILURE","","",null,null],[17,"EXIT_SUCCESS","","",null,null],[17,"RAND_MAX","","",null,null],[17,"EOF","","",null,null],[17,"SEEK_SET","","",null,null],[17,"SEEK_CUR","","",null,null],[17,"SEEK_END","","",null,null],[17,"_IOFBF","","",null,null],[17,"_IONBF","","",null,null],[17,"_IOLBF","","",null,null],[17,"F_DUPFD","","",null,null],[17,"F_GETFD","","",null,null],[17,"F_SETFD","","",null,null],[17,"F_GETFL","","",null,null],[17,"F_SETFL","","",null,null],[17,"F_SETLEASE","","",null,null],[17,"F_GETLEASE","","",null,null],[17,"F_NOTIFY","","",null,null],[17,"F_DUPFD_CLOEXEC","","",null,null],[17,"F_SETPIPE_SZ","","",null,null],[17,"F_GETPIPE_SZ","","",null,null],[17,"SIGTRAP","","",null,null],[17,"PTHREAD_CREATE_JOINABLE","","",null,null],[17,"PTHREAD_CREATE_DETACHED","","",null,null],[17,"CLOCK_REALTIME","","",null,null],[17,"CLOCK_MONOTONIC","","",null,null],[17,"CLOCK_PROCESS_CPUTIME_ID","","",null,null],[17,"CLOCK_THREAD_CPUTIME_ID","","",null,null],[17,"CLOCK_MONOTONIC_RAW","","",null,null],[17,"CLOCK_REALTIME_COARSE","","",null,null],[17,"CLOCK_MONOTONIC_COARSE","","",null,null],[17,"CLOCK_BOOTTIME","","",null,null],[17,"CLOCK_REALTIME_ALARM","","",null,null],[17,"CLOCK_BOOTTIME_ALARM","","",null,null],[17,"RLIMIT_CPU","","",null,null],[17,"RLIMIT_FSIZE","","",null,null],[17,"RLIMIT_DATA","","",null,null],[17,"RLIMIT_STACK","","",null,null],[17,"RLIMIT_CORE","","",null,null],[17,"RLIMIT_LOCKS","","",null,null],[17,"RLIMIT_SIGPENDING","","",null,null],[17,"RLIMIT_MSGQUEUE","","",null,null],[17,"RLIMIT_NICE","","",null,null],[17,"RLIMIT_RTPRIO","","",null,null],[17,"RUSAGE_SELF","","",null,null],[17,"O_RDONLY","","",null,null],[17,"O_WRONLY","","",null,null],[17,"O_RDWR","","",null,null],[17,"O_TRUNC","","",null,null],[17,"O_CLOEXEC","","",null,null],[17,"SOCK_CLOEXEC","","",null,null],[17,"S_IFIFO","","",null,null],[17,"S_IFCHR","","",null,null],[17,"S_IFBLK","","",null,null],[17,"S_IFDIR","","",null,null],[17,"S_IFREG","","",null,null],[17,"S_IFLNK","","",null,null],[17,"S_IFSOCK","","",null,null],[17,"S_IFMT","","",null,null],[17,"S_IRWXU","","",null,null],[17,"S_IXUSR","","",null,null],[17,"S_IWUSR","","",null,null],[17,"S_IRUSR","","",null,null],[17,"S_IRWXG","","",null,null],[17,"S_IXGRP","","",null,null],[17,"S_IWGRP","","",null,null],[17,"S_IRGRP","","",null,null],[17,"S_IRWXO","","",null,null],[17,"S_IXOTH","","",null,null],[17,"S_IWOTH","","",null,null],[17,"S_IROTH","","",null,null],[17,"F_OK","","",null,null],[17,"R_OK","","",null,null],[17,"W_OK","","",null,null],[17,"X_OK","","",null,null],[17,"STDIN_FILENO","","",null,null],[17,"STDOUT_FILENO","","",null,null],[17,"STDERR_FILENO","","",null,null],[17,"SIGHUP","","",null,null],[17,"SIGINT","","",null,null],[17,"SIGQUIT","","",null,null],[17,"SIGILL","","",null,null],[17,"SIGABRT","","",null,null],[17,"SIGFPE","","",null,null],[17,"SIGKILL","","",null,null],[17,"SIGSEGV","","",null,null],[17,"SIGPIPE","","",null,null],[17,"SIGALRM","","",null,null],[17,"SIGTERM","","",null,null],[17,"PROT_NONE","","",null,null],[17,"PROT_READ","","",null,null],[17,"PROT_WRITE","","",null,null],[17,"PROT_EXEC","","",null,null],[17,"LC_CTYPE","","",null,null],[17,"LC_NUMERIC","","",null,null],[17,"LC_TIME","","",null,null],[17,"LC_COLLATE","","",null,null],[17,"LC_MONETARY","","",null,null],[17,"LC_MESSAGES","","",null,null],[17,"LC_ALL","","",null,null],[17,"LC_CTYPE_MASK","","",null,null],[17,"LC_NUMERIC_MASK","","",null,null],[17,"LC_TIME_MASK","","",null,null],[17,"LC_COLLATE_MASK","","",null,null],[17,"LC_MONETARY_MASK","","",null,null],[17,"LC_MESSAGES_MASK","","",null,null],[17,"MAP_FILE","","",null,null],[17,"MAP_SHARED","","",null,null],[17,"MAP_PRIVATE","","",null,null],[17,"MAP_FIXED","","",null,null],[17,"MAP_FAILED","","",null,null],[17,"MCL_CURRENT","","",null,null],[17,"MCL_FUTURE","","",null,null],[17,"MS_ASYNC","","",null,null],[17,"MS_INVALIDATE","","",null,null],[17,"MS_SYNC","","",null,null],[17,"MS_RDONLY","","",null,null],[17,"MS_NOSUID","","",null,null],[17,"MS_NODEV","","",null,null],[17,"MS_NOEXEC","","",null,null],[17,"MS_SYNCHRONOUS","","",null,null],[17,"MS_REMOUNT","","",null,null],[17,"MS_MANDLOCK","","",null,null],[17,"MS_DIRSYNC","","",null,null],[17,"MS_NOATIME","","",null,null],[17,"MS_NODIRATIME","","",null,null],[17,"MS_BIND","","",null,null],[17,"MS_MOVE","","",null,null],[17,"MS_REC","","",null,null],[17,"MS_SILENT","","",null,null],[17,"MS_POSIXACL","","",null,null],[17,"MS_UNBINDABLE","","",null,null],[17,"MS_PRIVATE","","",null,null],[17,"MS_SLAVE","","",null,null],[17,"MS_SHARED","","",null,null],[17,"MS_RELATIME","","",null,null],[17,"MS_KERNMOUNT","","",null,null],[17,"MS_I_VERSION","","",null,null],[17,"MS_STRICTATIME","","",null,null],[17,"MS_ACTIVE","","",null,null],[17,"MS_NOUSER","","",null,null],[17,"MS_MGC_VAL","","",null,null],[17,"MS_MGC_MSK","","",null,null],[17,"MS_RMT_MASK","","",null,null],[17,"EPERM","","",null,null],[17,"ENOENT","","",null,null],[17,"ESRCH","","",null,null],[17,"EINTR","","",null,null],[17,"EIO","","",null,null],[17,"ENXIO","","",null,null],[17,"E2BIG","","",null,null],[17,"ENOEXEC","","",null,null],[17,"EBADF","","",null,null],[17,"ECHILD","","",null,null],[17,"EAGAIN","","",null,null],[17,"ENOMEM","","",null,null],[17,"EACCES","","",null,null],[17,"EFAULT","","",null,null],[17,"ENOTBLK","","",null,null],[17,"EBUSY","","",null,null],[17,"EEXIST","","",null,null],[17,"EXDEV","","",null,null],[17,"ENODEV","","",null,null],[17,"ENOTDIR","","",null,null],[17,"EISDIR","","",null,null],[17,"EINVAL","","",null,null],[17,"ENFILE","","",null,null],[17,"EMFILE","","",null,null],[17,"ENOTTY","","",null,null],[17,"ETXTBSY","","",null,null],[17,"EFBIG","","",null,null],[17,"ENOSPC","","",null,null],[17,"ESPIPE","","",null,null],[17,"EROFS","","",null,null],[17,"EMLINK","","",null,null],[17,"EPIPE","","",null,null],[17,"EDOM","","",null,null],[17,"ERANGE","","",null,null],[17,"EWOULDBLOCK","","",null,null],[17,"EBFONT","","",null,null],[17,"ENOSTR","","",null,null],[17,"ENODATA","","",null,null],[17,"ETIME","","",null,null],[17,"ENOSR","","",null,null],[17,"ENONET","","",null,null],[17,"ENOPKG","","",null,null],[17,"EREMOTE","","",null,null],[17,"ENOLINK","","",null,null],[17,"EADV","","",null,null],[17,"ESRMNT","","",null,null],[17,"ECOMM","","",null,null],[17,"EPROTO","","",null,null],[17,"EDOTDOT","","",null,null],[17,"AF_PACKET","","",null,null],[17,"IPPROTO_RAW","","",null,null],[17,"PROT_GROWSDOWN","","",null,null],[17,"PROT_GROWSUP","","",null,null],[17,"MAP_TYPE","","",null,null],[17,"MADV_NORMAL","","",null,null],[17,"MADV_RANDOM","","",null,null],[17,"MADV_SEQUENTIAL","","",null,null],[17,"MADV_WILLNEED","","",null,null],[17,"MADV_DONTNEED","","",null,null],[17,"MADV_REMOVE","","",null,null],[17,"MADV_DONTFORK","","",null,null],[17,"MADV_DOFORK","","",null,null],[17,"MADV_MERGEABLE","","",null,null],[17,"MADV_UNMERGEABLE","","",null,null],[17,"MADV_HWPOISON","","",null,null],[17,"IFF_LOOPBACK","","",null,null],[17,"AF_UNIX","","",null,null],[17,"AF_INET","","",null,null],[17,"AF_INET6","","",null,null],[17,"SOCK_RAW","","",null,null],[17,"IPPROTO_TCP","","",null,null],[17,"IPPROTO_IP","","",null,null],[17,"IPPROTO_IPV6","","",null,null],[17,"IP_MULTICAST_TTL","","",null,null],[17,"IP_MULTICAST_LOOP","","",null,null],[17,"IP_TTL","","",null,null],[17,"IP_HDRINCL","","",null,null],[17,"IP_ADD_MEMBERSHIP","","",null,null],[17,"IP_DROP_MEMBERSHIP","","",null,null],[17,"IP_TRANSPARENT","","",null,null],[17,"IPV6_ADD_MEMBERSHIP","","",null,null],[17,"IPV6_DROP_MEMBERSHIP","","",null,null],[17,"TCP_NODELAY","","",null,null],[17,"TCP_MAXSEG","","",null,null],[17,"TCP_CORK","","",null,null],[17,"TCP_KEEPIDLE","","",null,null],[17,"TCP_KEEPINTVL","","",null,null],[17,"TCP_KEEPCNT","","",null,null],[17,"TCP_SYNCNT","","",null,null],[17,"TCP_LINGER2","","",null,null],[17,"TCP_DEFER_ACCEPT","","",null,null],[17,"TCP_WINDOW_CLAMP","","",null,null],[17,"TCP_INFO","","",null,null],[17,"TCP_QUICKACK","","",null,null],[17,"TCP_CONGESTION","","",null,null],[17,"IPV6_MULTICAST_LOOP","","",null,null],[17,"IPV6_V6ONLY","","",null,null],[17,"SO_DEBUG","","",null,null],[17,"SHUT_RD","","",null,null],[17,"SHUT_WR","","",null,null],[17,"SHUT_RDWR","","",null,null],[17,"LOCK_SH","","",null,null],[17,"LOCK_EX","","",null,null],[17,"LOCK_NB","","",null,null],[17,"LOCK_UN","","",null,null],[17,"SIGSTKSZ","","",null,null],[17,"SA_NODEFER","","",null,null],[17,"SA_RESETHAND","","",null,null],[17,"SA_RESTART","","",null,null],[17,"SA_NOCLDSTOP","","",null,null],[17,"SS_ONSTACK","","",null,null],[17,"SS_DISABLE","","",null,null],[17,"PATH_MAX","","",null,null],[17,"FD_SETSIZE","","",null,null],[17,"EPOLLIN","","",null,null],[17,"EPOLLPRI","","",null,null],[17,"EPOLLOUT","","",null,null],[17,"EPOLLRDNORM","","",null,null],[17,"EPOLLRDBAND","","",null,null],[17,"EPOLLWRNORM","","",null,null],[17,"EPOLLWRBAND","","",null,null],[17,"EPOLLMSG","","",null,null],[17,"EPOLLERR","","",null,null],[17,"EPOLLHUP","","",null,null],[17,"EPOLLET","","",null,null],[17,"EPOLL_CTL_ADD","","",null,null],[17,"EPOLL_CTL_MOD","","",null,null],[17,"EPOLL_CTL_DEL","","",null,null],[17,"EPOLL_CLOEXEC","","",null,null],[17,"MNT_DETACH","","",null,null],[17,"MNT_EXPIRE","","",null,null],[17,"Q_GETFMT","","",null,null],[17,"Q_GETINFO","","",null,null],[17,"Q_SETINFO","","",null,null],[17,"QIF_BLIMITS","","",null,null],[17,"QIF_SPACE","","",null,null],[17,"QIF_ILIMITS","","",null,null],[17,"QIF_INODES","","",null,null],[17,"QIF_BTIME","","",null,null],[17,"QIF_ITIME","","",null,null],[17,"QIF_LIMITS","","",null,null],[17,"QIF_USAGE","","",null,null],[17,"QIF_TIMES","","",null,null],[17,"QIF_ALL","","",null,null],[17,"CBAUD","","",null,null],[17,"EFD_CLOEXEC","","",null,null],[17,"MNT_FORCE","","",null,null],[17,"Q_SYNC","","",null,null],[17,"Q_QUOTAON","","",null,null],[17,"Q_QUOTAOFF","","",null,null],[17,"Q_GETQUOTA","","",null,null],[17,"Q_SETQUOTA","","",null,null],[17,"TCIOFF","","",null,null],[17,"TCION","","",null,null],[17,"TCOOFF","","",null,null],[17,"TCOON","","",null,null],[17,"TCIFLUSH","","",null,null],[17,"TCOFLUSH","","",null,null],[17,"TCIOFLUSH","","",null,null],[17,"NL0","","",null,null],[17,"NL1","","",null,null],[17,"TAB0","","",null,null],[17,"TAB1","","",null,null],[17,"TAB2","","",null,null],[17,"TAB3","","",null,null],[17,"CR0","","",null,null],[17,"CR1","","",null,null],[17,"CR2","","",null,null],[17,"CR3","","",null,null],[17,"FF0","","",null,null],[17,"FF1","","",null,null],[17,"BS0","","",null,null],[17,"BS1","","",null,null],[17,"VT0","","",null,null],[17,"VT1","","",null,null],[17,"VERASE","","",null,null],[17,"VWERASE","","",null,null],[17,"VKILL","","",null,null],[17,"VREPRINT","","",null,null],[17,"VINTR","","",null,null],[17,"VQUIT","","",null,null],[17,"VSUSP","","",null,null],[17,"VSTART","","",null,null],[17,"VSTOP","","",null,null],[17,"VLNEXT","","",null,null],[17,"VDISCARD","","",null,null],[17,"VTIME","","",null,null],[17,"IGNBRK","","",null,null],[17,"BRKINT","","",null,null],[17,"IGNPAR","","",null,null],[17,"PARMRK","","",null,null],[17,"INPCK","","",null,null],[17,"ISTRIP","","",null,null],[17,"INLCR","","",null,null],[17,"IGNCR","","",null,null],[17,"ICRNL","","",null,null],[17,"IXON","","",null,null],[17,"IXOFF","","",null,null],[17,"IXANY","","",null,null],[17,"IMAXBEL","","",null,null],[17,"OPOST","","",null,null],[17,"ONLCR","","",null,null],[17,"CSIZE","","",null,null],[17,"CS5","","",null,null],[17,"CS6","","",null,null],[17,"CS7","","",null,null],[17,"CS8","","",null,null],[17,"CSTOPB","","",null,null],[17,"CREAD","","",null,null],[17,"PARENB","","",null,null],[17,"PARODD","","",null,null],[17,"HUPCL","","",null,null],[17,"CLOCAL","","",null,null],[17,"CRTSCTS","","",null,null],[17,"ECHOKE","","",null,null],[17,"ECHOE","","",null,null],[17,"ECHOK","","",null,null],[17,"ECHO","","",null,null],[17,"ECHONL","","",null,null],[17,"ECHOPRT","","",null,null],[17,"ECHOCTL","","",null,null],[17,"ISIG","","",null,null],[17,"ICANON","","",null,null],[17,"PENDIN","","",null,null],[17,"NOFLSH","","",null,null],[17,"CLONE_VM","","",null,null],[17,"CLONE_FS","","",null,null],[17,"CLONE_FILES","","",null,null],[17,"CLONE_SIGHAND","","",null,null],[17,"CLONE_PTRACE","","",null,null],[17,"CLONE_VFORK","","",null,null],[17,"CLONE_PARENT","","",null,null],[17,"CLONE_THREAD","","",null,null],[17,"CLONE_NEWNS","","",null,null],[17,"CLONE_SYSVSEM","","",null,null],[17,"CLONE_SETTLS","","",null,null],[17,"CLONE_PARENT_SETTID","","",null,null],[17,"CLONE_CHILD_CLEARTID","","",null,null],[17,"CLONE_DETACHED","","",null,null],[17,"CLONE_UNTRACED","","",null,null],[17,"CLONE_CHILD_SETTID","","",null,null],[17,"CLONE_NEWUTS","","",null,null],[17,"CLONE_NEWIPC","","",null,null],[17,"CLONE_NEWUSER","","",null,null],[17,"CLONE_NEWPID","","",null,null],[17,"CLONE_NEWNET","","",null,null],[17,"CLONE_IO","","",null,null],[17,"WNOHANG","","",null,null],[17,"WUNTRACED","","",null,null],[17,"WSTOPPED","","",null,null],[17,"WEXITED","","",null,null],[17,"WCONTINUED","","",null,null],[17,"WNOWAIT","","",null,null],[17,"__WNOTHREAD","","",null,null],[17,"__WALL","","",null,null],[17,"__WCLONE","","",null,null],[17,"SPLICE_F_MOVE","","",null,null],[17,"SPLICE_F_NONBLOCK","","",null,null],[17,"SPLICE_F_MORE","","",null,null],[17,"SPLICE_F_GIFT","","",null,null],[17,"RTLD_LOCAL","","",null,null],[17,"POSIX_FADV_NORMAL","","",null,null],[17,"POSIX_FADV_RANDOM","","",null,null],[17,"POSIX_FADV_SEQUENTIAL","","",null,null],[17,"POSIX_FADV_WILLNEED","","",null,null],[17,"POSIX_FADV_DONTNEED","","",null,null],[17,"POSIX_FADV_NOREUSE","","",null,null],[17,"AT_FDCWD","","",null,null],[17,"AT_SYMLINK_NOFOLLOW","","",null,null],[17,"LOG_CRON","","",null,null],[17,"LOG_AUTHPRIV","","",null,null],[17,"LOG_FTP","","",null,null],[17,"LOG_PERROR","","",null,null],[17,"PIPE_BUF","","",null,null],[17,"SI_LOAD_SHIFT","","",null,null],[17,"ABDAY_1","","",null,null],[17,"ABDAY_2","","",null,null],[17,"ABDAY_3","","",null,null],[17,"ABDAY_4","","",null,null],[17,"ABDAY_5","","",null,null],[17,"ABDAY_6","","",null,null],[17,"ABDAY_7","","",null,null],[17,"DAY_1","","",null,null],[17,"DAY_2","","",null,null],[17,"DAY_3","","",null,null],[17,"DAY_4","","",null,null],[17,"DAY_5","","",null,null],[17,"DAY_6","","",null,null],[17,"DAY_7","","",null,null],[17,"ABMON_1","","",null,null],[17,"ABMON_2","","",null,null],[17,"ABMON_3","","",null,null],[17,"ABMON_4","","",null,null],[17,"ABMON_5","","",null,null],[17,"ABMON_6","","",null,null],[17,"ABMON_7","","",null,null],[17,"ABMON_8","","",null,null],[17,"ABMON_9","","",null,null],[17,"ABMON_10","","",null,null],[17,"ABMON_11","","",null,null],[17,"ABMON_12","","",null,null],[17,"MON_1","","",null,null],[17,"MON_2","","",null,null],[17,"MON_3","","",null,null],[17,"MON_4","","",null,null],[17,"MON_5","","",null,null],[17,"MON_6","","",null,null],[17,"MON_7","","",null,null],[17,"MON_8","","",null,null],[17,"MON_9","","",null,null],[17,"MON_10","","",null,null],[17,"MON_11","","",null,null],[17,"MON_12","","",null,null],[17,"AM_STR","","",null,null],[17,"PM_STR","","",null,null],[17,"D_T_FMT","","",null,null],[17,"D_FMT","","",null,null],[17,"T_FMT","","",null,null],[17,"T_FMT_AMPM","","",null,null],[17,"ERA","","",null,null],[17,"ERA_D_FMT","","",null,null],[17,"ALT_DIGITS","","",null,null],[17,"ERA_D_T_FMT","","",null,null],[17,"ERA_T_FMT","","",null,null],[17,"CODESET","","",null,null],[17,"CRNCYSTR","","",null,null],[17,"RADIXCHAR","","",null,null],[17,"THOUSEP","","",null,null],[17,"YESEXPR","","",null,null],[17,"NOEXPR","","",null,null],[17,"YESSTR","","",null,null],[17,"NOSTR","","",null,null],[17,"FILENAME_MAX","","",null,null],[17,"L_tmpnam","","",null,null],[17,"_PC_LINK_MAX","","",null,null],[17,"_PC_MAX_CANON","","",null,null],[17,"_PC_MAX_INPUT","","",null,null],[17,"_PC_NAME_MAX","","",null,null],[17,"_PC_PATH_MAX","","",null,null],[17,"_PC_PIPE_BUF","","",null,null],[17,"_PC_CHOWN_RESTRICTED","","",null,null],[17,"_PC_NO_TRUNC","","",null,null],[17,"_PC_VDISABLE","","",null,null],[17,"_SC_ARG_MAX","","",null,null],[17,"_SC_CHILD_MAX","","",null,null],[17,"_SC_CLK_TCK","","",null,null],[17,"_SC_NGROUPS_MAX","","",null,null],[17,"_SC_OPEN_MAX","","",null,null],[17,"_SC_STREAM_MAX","","",null,null],[17,"_SC_TZNAME_MAX","","",null,null],[17,"_SC_JOB_CONTROL","","",null,null],[17,"_SC_SAVED_IDS","","",null,null],[17,"_SC_REALTIME_SIGNALS","","",null,null],[17,"_SC_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_TIMERS","","",null,null],[17,"_SC_ASYNCHRONOUS_IO","","",null,null],[17,"_SC_PRIORITIZED_IO","","",null,null],[17,"_SC_SYNCHRONIZED_IO","","",null,null],[17,"_SC_FSYNC","","",null,null],[17,"_SC_MAPPED_FILES","","",null,null],[17,"_SC_MEMLOCK","","",null,null],[17,"_SC_MEMLOCK_RANGE","","",null,null],[17,"_SC_MEMORY_PROTECTION","","",null,null],[17,"_SC_MESSAGE_PASSING","","",null,null],[17,"_SC_SEMAPHORES","","",null,null],[17,"_SC_SHARED_MEMORY_OBJECTS","","",null,null],[17,"_SC_AIO_LISTIO_MAX","","",null,null],[17,"_SC_AIO_MAX","","",null,null],[17,"_SC_AIO_PRIO_DELTA_MAX","","",null,null],[17,"_SC_DELAYTIMER_MAX","","",null,null],[17,"_SC_MQ_OPEN_MAX","","",null,null],[17,"_SC_MQ_PRIO_MAX","","",null,null],[17,"_SC_VERSION","","",null,null],[17,"_SC_PAGESIZE","","",null,null],[17,"_SC_PAGE_SIZE","","",null,null],[17,"_SC_RTSIG_MAX","","",null,null],[17,"_SC_SEM_NSEMS_MAX","","",null,null],[17,"_SC_SEM_VALUE_MAX","","",null,null],[17,"_SC_SIGQUEUE_MAX","","",null,null],[17,"_SC_TIMER_MAX","","",null,null],[17,"_SC_BC_BASE_MAX","","",null,null],[17,"_SC_BC_DIM_MAX","","",null,null],[17,"_SC_BC_SCALE_MAX","","",null,null],[17,"_SC_BC_STRING_MAX","","",null,null],[17,"_SC_COLL_WEIGHTS_MAX","","",null,null],[17,"_SC_EXPR_NEST_MAX","","",null,null],[17,"_SC_LINE_MAX","","",null,null],[17,"_SC_RE_DUP_MAX","","",null,null],[17,"_SC_2_VERSION","","",null,null],[17,"_SC_2_C_BIND","","",null,null],[17,"_SC_2_C_DEV","","",null,null],[17,"_SC_2_FORT_DEV","","",null,null],[17,"_SC_2_FORT_RUN","","",null,null],[17,"_SC_2_SW_DEV","","",null,null],[17,"_SC_2_LOCALEDEF","","",null,null],[17,"_SC_IOV_MAX","","",null,null],[17,"_SC_THREADS","","",null,null],[17,"_SC_THREAD_SAFE_FUNCTIONS","","",null,null],[17,"_SC_GETGR_R_SIZE_MAX","","",null,null],[17,"_SC_GETPW_R_SIZE_MAX","","",null,null],[17,"_SC_LOGIN_NAME_MAX","","",null,null],[17,"_SC_TTY_NAME_MAX","","",null,null],[17,"_SC_THREAD_DESTRUCTOR_ITERATIONS","","",null,null],[17,"_SC_THREAD_KEYS_MAX","","",null,null],[17,"_SC_THREAD_STACK_MIN","","",null,null],[17,"_SC_THREAD_THREADS_MAX","","",null,null],[17,"_SC_THREAD_ATTR_STACKADDR","","",null,null],[17,"_SC_THREAD_ATTR_STACKSIZE","","",null,null],[17,"_SC_THREAD_PRIORITY_SCHEDULING","","",null,null],[17,"_SC_THREAD_PRIO_INHERIT","","",null,null],[17,"_SC_THREAD_PRIO_PROTECT","","",null,null],[17,"_SC_NPROCESSORS_ONLN","","",null,null],[17,"_SC_ATEXIT_MAX","","",null,null],[17,"_SC_XOPEN_VERSION","","",null,null],[17,"_SC_XOPEN_XCU_VERSION","","",null,null],[17,"_SC_XOPEN_UNIX","","",null,null],[17,"_SC_XOPEN_CRYPT","","",null,null],[17,"_SC_XOPEN_ENH_I18N","","",null,null],[17,"_SC_XOPEN_SHM","","",null,null],[17,"_SC_2_CHAR_TERM","","",null,null],[17,"_SC_2_UPE","","",null,null],[17,"_SC_XBS5_ILP32_OFF32","","",null,null],[17,"_SC_XBS5_ILP32_OFFBIG","","",null,null],[17,"_SC_XBS5_LPBIG_OFFBIG","","",null,null],[17,"_SC_XOPEN_LEGACY","","",null,null],[17,"_SC_XOPEN_REALTIME","","",null,null],[17,"_SC_XOPEN_REALTIME_THREADS","","",null,null],[17,"_SC_HOST_NAME_MAX","","",null,null],[17,"RLIM_SAVED_MAX","","",null,null],[17,"RLIM_SAVED_CUR","","",null,null],[17,"GLOB_ERR","","",null,null],[17,"GLOB_MARK","","",null,null],[17,"GLOB_NOSORT","","",null,null],[17,"GLOB_DOOFFS","","",null,null],[17,"GLOB_NOCHECK","","",null,null],[17,"GLOB_APPEND","","",null,null],[17,"GLOB_NOESCAPE","","",null,null],[17,"GLOB_NOSPACE","","",null,null],[17,"GLOB_ABORTED","","",null,null],[17,"GLOB_NOMATCH","","",null,null],[17,"POSIX_MADV_NORMAL","","",null,null],[17,"POSIX_MADV_RANDOM","","",null,null],[17,"POSIX_MADV_SEQUENTIAL","","",null,null],[17,"POSIX_MADV_WILLNEED","","",null,null],[17,"S_IEXEC","","",null,null],[17,"S_IWRITE","","",null,null],[17,"S_IREAD","","",null,null],[17,"F_LOCK","","",null,null],[17,"F_TEST","","",null,null],[17,"F_TLOCK","","",null,null],[17,"F_ULOCK","","",null,null],[17,"ST_RDONLY","","",null,null],[17,"ST_NOSUID","","",null,null],[17,"ST_NODEV","","",null,null],[17,"ST_NOEXEC","","",null,null],[17,"ST_SYNCHRONOUS","","",null,null],[17,"ST_MANDLOCK","","",null,null],[17,"ST_WRITE","","",null,null],[17,"ST_APPEND","","",null,null],[17,"ST_IMMUTABLE","","",null,null],[17,"ST_NOATIME","","",null,null],[17,"ST_NODIRATIME","","",null,null],[17,"RTLD_NEXT","","",null,null],[17,"RTLD_DEFAULT","","",null,null],[17,"RTLD_NODELETE","","",null,null],[17,"RTLD_NOW","","",null,null],[17,"TCP_MD5SIG","","",null,null],[17,"PTHREAD_MUTEX_INITIALIZER","","",null,null],[17,"PTHREAD_COND_INITIALIZER","","",null,null],[17,"PTHREAD_RWLOCK_INITIALIZER","","",null,null],[17,"PTHREAD_MUTEX_NORMAL","","",null,null],[17,"PTHREAD_MUTEX_RECURSIVE","","",null,null],[17,"PTHREAD_MUTEX_ERRORCHECK","","",null,null],[17,"PTHREAD_MUTEX_DEFAULT","","",null,null],[17,"__SIZEOF_PTHREAD_COND_T","","",null,null],[17,"SCHED_OTHER","","",null,null],[17,"SCHED_FIFO","","",null,null],[17,"SCHED_RR","","",null,null],[17,"SCHED_BATCH","","",null,null],[17,"SCHED_IDLE","","",null,null],[17,"IPC_CREAT","","",null,null],[17,"IPC_EXCL","","",null,null],[17,"IPC_NOWAIT","","",null,null],[17,"IPC_RMID","","",null,null],[17,"IPC_SET","","",null,null],[17,"IPC_STAT","","",null,null],[17,"IPC_INFO","","",null,null],[17,"SHM_R","","",null,null],[17,"SHM_W","","",null,null],[17,"SHM_RDONLY","","",null,null],[17,"SHM_RND","","",null,null],[17,"SHM_REMAP","","",null,null],[17,"SHM_EXEC","","",null,null],[17,"SHM_LOCK","","",null,null],[17,"SHM_UNLOCK","","",null,null],[17,"SHM_HUGETLB","","",null,null],[17,"SHM_NORESERVE","","",null,null],[17,"EPOLLRDHUP","","",null,null],[17,"EPOLLONESHOT","","",null,null],[17,"QFMT_VFS_OLD","","",null,null],[17,"QFMT_VFS_V0","","",null,null],[17,"SFD_CLOEXEC","","",null,null],[17,"EFD_SEMAPHORE","","",null,null],[17,"NCCS","","",null,null],[17,"AF_NETLINK","","",null,null],[17,"LOG_NFACILITIES","","",null,null],[17,"SEM_FAILED","","",null,null],[17,"RLIMIT_RSS","","",null,null],[17,"RLIMIT_NOFILE","","",null,null],[17,"RLIMIT_AS","","",null,null],[17,"RLIMIT_NPROC","","",null,null],[17,"RLIMIT_MEMLOCK","","",null,null],[17,"RLIM_INFINITY","","",null,null],[17,"RLIMIT_RTTIME","","",null,null],[17,"RLIMIT_NLIMITS","","",null,null],[17,"O_APPEND","","",null,null],[17,"O_CREAT","","",null,null],[17,"O_EXCL","","",null,null],[17,"O_NOCTTY","","",null,null],[17,"O_NONBLOCK","","",null,null],[17,"O_SYNC","","",null,null],[17,"O_RSYNC","","",null,null],[17,"O_DSYNC","","",null,null],[17,"O_FSYNC","","",null,null],[17,"SOCK_NONBLOCK","","",null,null],[17,"LC_PAPER","","",null,null],[17,"LC_NAME","","",null,null],[17,"LC_ADDRESS","","",null,null],[17,"LC_TELEPHONE","","",null,null],[17,"LC_MEASUREMENT","","",null,null],[17,"LC_IDENTIFICATION","","",null,null],[17,"LC_PAPER_MASK","","",null,null],[17,"LC_NAME_MASK","","",null,null],[17,"LC_ADDRESS_MASK","","",null,null],[17,"LC_TELEPHONE_MASK","","",null,null],[17,"LC_MEASUREMENT_MASK","","",null,null],[17,"LC_IDENTIFICATION_MASK","","",null,null],[17,"LC_ALL_MASK","","",null,null],[17,"MAP_ANON","","",null,null],[17,"MAP_ANONYMOUS","","",null,null],[17,"MAP_GROWSDOWN","","",null,null],[17,"MAP_DENYWRITE","","",null,null],[17,"MAP_EXECUTABLE","","",null,null],[17,"MAP_POPULATE","","",null,null],[17,"MAP_NONBLOCK","","",null,null],[17,"MAP_STACK","","",null,null],[17,"EDEADLK","","",null,null],[17,"ENAMETOOLONG","","",null,null],[17,"ENOLCK","","",null,null],[17,"ENOSYS","","",null,null],[17,"ENOTEMPTY","","",null,null],[17,"ELOOP","","",null,null],[17,"ENOMSG","","",null,null],[17,"EIDRM","","",null,null],[17,"ECHRNG","","",null,null],[17,"EL2NSYNC","","",null,null],[17,"EL3HLT","","",null,null],[17,"EL3RST","","",null,null],[17,"ELNRNG","","",null,null],[17,"EUNATCH","","",null,null],[17,"ENOCSI","","",null,null],[17,"EL2HLT","","",null,null],[17,"EBADE","","",null,null],[17,"EBADR","","",null,null],[17,"EXFULL","","",null,null],[17,"ENOANO","","",null,null],[17,"EBADRQC","","",null,null],[17,"EBADSLT","","",null,null],[17,"EMULTIHOP","","",null,null],[17,"EOVERFLOW","","",null,null],[17,"ENOTUNIQ","","",null,null],[17,"EBADFD","","",null,null],[17,"EBADMSG","","",null,null],[17,"EREMCHG","","",null,null],[17,"ELIBACC","","",null,null],[17,"ELIBBAD","","",null,null],[17,"ELIBSCN","","",null,null],[17,"ELIBMAX","","",null,null],[17,"ELIBEXEC","","",null,null],[17,"EILSEQ","","",null,null],[17,"ERESTART","","",null,null],[17,"ESTRPIPE","","",null,null],[17,"EUSERS","","",null,null],[17,"ENOTSOCK","","",null,null],[17,"EDESTADDRREQ","","",null,null],[17,"EMSGSIZE","","",null,null],[17,"EPROTOTYPE","","",null,null],[17,"ENOPROTOOPT","","",null,null],[17,"EPROTONOSUPPORT","","",null,null],[17,"ESOCKTNOSUPPORT","","",null,null],[17,"EOPNOTSUPP","","",null,null],[17,"EPFNOSUPPORT","","",null,null],[17,"EAFNOSUPPORT","","",null,null],[17,"EADDRINUSE","","",null,null],[17,"EADDRNOTAVAIL","","",null,null],[17,"ENETDOWN","","",null,null],[17,"ENETUNREACH","","",null,null],[17,"ENETRESET","","",null,null],[17,"ECONNABORTED","","",null,null],[17,"ECONNRESET","","",null,null],[17,"ENOBUFS","","",null,null],[17,"EISCONN","","",null,null],[17,"ENOTCONN","","",null,null],[17,"ESHUTDOWN","","",null,null],[17,"ETOOMANYREFS","","",null,null],[17,"ETIMEDOUT","","",null,null],[17,"ECONNREFUSED","","",null,null],[17,"EHOSTDOWN","","",null,null],[17,"EHOSTUNREACH","","",null,null],[17,"EALREADY","","",null,null],[17,"EINPROGRESS","","",null,null],[17,"ESTALE","","",null,null],[17,"EUCLEAN","","",null,null],[17,"ENOTNAM","","",null,null],[17,"ENAVAIL","","",null,null],[17,"EISNAM","","",null,null],[17,"EREMOTEIO","","",null,null],[17,"EDQUOT","","",null,null],[17,"ENOMEDIUM","","",null,null],[17,"EMEDIUMTYPE","","",null,null],[17,"ECANCELED","","",null,null],[17,"ENOKEY","","",null,null],[17,"EKEYEXPIRED","","",null,null],[17,"EKEYREVOKED","","",null,null],[17,"EKEYREJECTED","","",null,null],[17,"EOWNERDEAD","","",null,null],[17,"ENOTRECOVERABLE","","",null,null],[17,"EHWPOISON","","",null,null],[17,"ERFKILL","","",null,null],[17,"SOCK_STREAM","","",null,null],[17,"SOCK_DGRAM","","",null,null],[17,"SOCK_SEQPACKET","","",null,null],[17,"SOL_SOCKET","","",null,null],[17,"SO_REUSEADDR","","",null,null],[17,"SO_TYPE","","",null,null],[17,"SO_ERROR","","",null,null],[17,"SO_DONTROUTE","","",null,null],[17,"SO_BROADCAST","","",null,null],[17,"SO_SNDBUF","","",null,null],[17,"SO_RCVBUF","","",null,null],[17,"SO_KEEPALIVE","","",null,null],[17,"SO_OOBINLINE","","",null,null],[17,"SO_LINGER","","",null,null],[17,"SO_REUSEPORT","","",null,null],[17,"SO_ACCEPTCONN","","",null,null],[17,"TCP_COOKIE_TRANSACTIONS","","",null,null],[17,"TCP_THIN_LINEAR_TIMEOUTS","","",null,null],[17,"TCP_THIN_DUPACK","","",null,null],[17,"TCP_USER_TIMEOUT","","",null,null],[17,"TCP_REPAIR","","",null,null],[17,"TCP_REPAIR_QUEUE","","",null,null],[17,"TCP_QUEUE_SEQ","","",null,null],[17,"TCP_REPAIR_OPTIONS","","",null,null],[17,"TCP_FASTOPEN","","",null,null],[17,"TCP_TIMESTAMP","","",null,null],[17,"SA_ONSTACK","","",null,null],[17,"SA_SIGINFO","","",null,null],[17,"SA_NOCLDWAIT","","",null,null],[17,"SIGCHLD","","",null,null],[17,"SIGBUS","","",null,null],[17,"SIGUSR1","","",null,null],[17,"SIGUSR2","","",null,null],[17,"SIGCONT","","",null,null],[17,"SIGSTOP","","",null,null],[17,"SIGTSTP","","",null,null],[17,"SIGURG","","",null,null],[17,"SIGIO","","",null,null],[17,"SIGSYS","","",null,null],[17,"SIGSTKFLT","","",null,null],[17,"SIGUNUSED","","",null,null],[17,"SIGTTIN","","",null,null],[17,"SIGTTOU","","",null,null],[17,"SIGXCPU","","",null,null],[17,"SIGXFSZ","","",null,null],[17,"SIGVTALRM","","",null,null],[17,"SIGPROF","","",null,null],[17,"SIGWINCH","","",null,null],[17,"SIGPOLL","","",null,null],[17,"SIGPWR","","",null,null],[17,"SIG_SETMASK","","",null,null],[17,"SIG_BLOCK","","",null,null],[17,"SIG_UNBLOCK","","",null,null],[17,"FALLOC_FL_KEEP_SIZE","","",null,null],[17,"FALLOC_FL_PUNCH_HOLE","","",null,null],[17,"BUFSIZ","","",null,null],[17,"TMP_MAX","","",null,null],[17,"FOPEN_MAX","","",null,null],[17,"POSIX_MADV_DONTNEED","","",null,null],[17,"_SC_2_C_VERSION","","",null,null],[17,"RUSAGE_THREAD","","",null,null],[17,"O_ACCMODE","","",null,null],[17,"O_ASYNC","","",null,null],[17,"O_NDELAY","","",null,null],[17,"RUSAGE_CHILDREN","","",null,null],[17,"ST_RELATIME","","",null,null],[17,"NI_MAXHOST","","",null,null],[17,"ADFS_SUPER_MAGIC","","",null,null],[17,"AFFS_SUPER_MAGIC","","",null,null],[17,"CODA_SUPER_MAGIC","","",null,null],[17,"CRAMFS_MAGIC","","",null,null],[17,"EFS_SUPER_MAGIC","","",null,null],[17,"EXT2_SUPER_MAGIC","","",null,null],[17,"EXT3_SUPER_MAGIC","","",null,null],[17,"EXT4_SUPER_MAGIC","","",null,null],[17,"HPFS_SUPER_MAGIC","","",null,null],[17,"HUGETLBFS_MAGIC","","",null,null],[17,"ISOFS_SUPER_MAGIC","","",null,null],[17,"JFFS2_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC","","",null,null],[17,"MINIX_SUPER_MAGIC2","","",null,null],[17,"MINIX2_SUPER_MAGIC","","",null,null],[17,"MINIX2_SUPER_MAGIC2","","",null,null],[17,"MSDOS_SUPER_MAGIC","","",null,null],[17,"NCP_SUPER_MAGIC","","",null,null],[17,"NFS_SUPER_MAGIC","","",null,null],[17,"OPENPROM_SUPER_MAGIC","","",null,null],[17,"PROC_SUPER_MAGIC","","",null,null],[17,"QNX4_SUPER_MAGIC","","",null,null],[17,"REISERFS_SUPER_MAGIC","","",null,null],[17,"SMB_SUPER_MAGIC","","",null,null],[17,"TMPFS_MAGIC","","",null,null],[17,"USBDEVICE_SUPER_MAGIC","","",null,null],[17,"VEOF","","",null,null],[17,"VEOL","","",null,null],[17,"VEOL2","","",null,null],[17,"VMIN","","",null,null],[17,"IEXTEN","","",null,null],[17,"TOSTOP","","",null,null],[17,"FLUSHO","","",null,null],[17,"IUTF8","","",null,null],[17,"CPU_SETSIZE","","",null,null],[17,"EXTPROC","","",null,null],[17,"QFMT_VFS_V1","","",null,null],[17,"PTRACE_TRACEME","","",null,null],[17,"PTRACE_PEEKTEXT","","",null,null],[17,"PTRACE_PEEKDATA","","",null,null],[17,"PTRACE_PEEKUSER","","",null,null],[17,"PTRACE_POKETEXT","","",null,null],[17,"PTRACE_POKEDATA","","",null,null],[17,"PTRACE_POKEUSER","","",null,null],[17,"PTRACE_CONT","","",null,null],[17,"PTRACE_KILL","","",null,null],[17,"PTRACE_SINGLESTEP","","",null,null],[17,"PTRACE_ATTACH","","",null,null],[17,"PTRACE_DETACH","","",null,null],[17,"PTRACE_SYSCALL","","",null,null],[17,"PTRACE_SETOPTIONS","","",null,null],[17,"PTRACE_GETEVENTMSG","","",null,null],[17,"PTRACE_GETSIGINFO","","",null,null],[17,"PTRACE_SETSIGINFO","","",null,null],[17,"PTRACE_GETREGSET","","",null,null],[17,"PTRACE_SETREGSET","","",null,null],[17,"PTRACE_SEIZE","","",null,null],[17,"PTRACE_INTERRUPT","","",null,null],[17,"PTRACE_LISTEN","","",null,null],[17,"PTRACE_PEEKSIGINFO","","",null,null],[17,"MADV_DODUMP","","",null,null],[17,"MADV_DONTDUMP","","",null,null],[17,"EPOLLWAKEUP","","",null,null],[17,"MADV_HUGEPAGE","","",null,null],[17,"MADV_NOHUGEPAGE","","",null,null],[17,"MAP_HUGETLB","","",null,null],[17,"EFD_NONBLOCK","","",null,null],[17,"F_GETLK","","",null,null],[17,"F_GETOWN","","",null,null],[17,"F_SETOWN","","",null,null],[17,"F_SETLK","","",null,null],[17,"F_SETLKW","","",null,null],[17,"SEEK_DATA","","",null,null],[17,"SEEK_HOLE","","",null,null],[17,"SFD_NONBLOCK","","",null,null],[17,"TCSANOW","","",null,null],[17,"TCSADRAIN","","",null,null],[17,"TCSAFLUSH","","",null,null],[17,"TCGETS","","",null,null],[17,"TCSETS","","",null,null],[17,"TCSETSW","","",null,null],[17,"TCSETSF","","",null,null],[17,"TCGETA","","",null,null],[17,"TCSETA","","",null,null],[17,"TCSETAW","","",null,null],[17,"TCSETAF","","",null,null],[17,"TCSBRK","","",null,null],[17,"TCXONC","","",null,null],[17,"TCFLSH","","",null,null],[17,"TIOCGSOFTCAR","","",null,null],[17,"TIOCSSOFTCAR","","",null,null],[17,"TIOCINQ","","",null,null],[17,"TIOCLINUX","","",null,null],[17,"TIOCGSERIAL","","",null,null],[17,"TIOCEXCL","","",null,null],[17,"TIOCNXCL","","",null,null],[17,"TIOCSCTTY","","",null,null],[17,"TIOCGPGRP","","",null,null],[17,"TIOCSPGRP","","",null,null],[17,"TIOCOUTQ","","",null,null],[17,"TIOCSTI","","",null,null],[17,"TIOCGWINSZ","","",null,null],[17,"TIOCSWINSZ","","",null,null],[17,"TIOCMGET","","",null,null],[17,"TIOCMBIS","","",null,null],[17,"TIOCMBIC","","",null,null],[17,"TIOCMSET","","",null,null],[17,"FIONREAD","","",null,null],[17,"TIOCCONS","","",null,null],[17,"RTLD_DEEPBIND","","",null,null],[17,"RTLD_GLOBAL","","",null,null],[17,"RTLD_NOLOAD","","",null,null],[17,"PTHREAD_STACK_MIN","","",null,null],[17,"__SIZEOF_PTHREAD_RWLOCK_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEX_T","","",null,null],[17,"__SIZEOF_PTHREAD_MUTEXATTR_T","","",null,null],[17,"O_DIRECT","","",null,null],[17,"O_DIRECTORY","","",null,null],[17,"O_NOFOLLOW","","",null,null],[17,"MAP_LOCKED","","",null,null],[17,"MAP_NORESERVE","","",null,null],[17,"MAP_32BIT","","",null,null],[17,"EDEADLOCK","","",null,null],[17,"SO_PEERCRED","","",null,null],[17,"SO_RCVLOWAT","","",null,null],[17,"SO_SNDLOWAT","","",null,null],[17,"SO_RCVTIMEO","","",null,null],[17,"SO_SNDTIMEO","","",null,null],[17,"FIOCLEX","","",null,null],[17,"FIONBIO","","",null,null],[17,"PTRACE_GETFPREGS","","",null,null],[17,"PTRACE_SETFPREGS","","",null,null],[17,"PTRACE_GETFPXREGS","","",null,null],[17,"PTRACE_SETFPXREGS","","",null,null],[17,"PTRACE_GETREGS","","",null,null],[17,"PTRACE_SETREGS","","",null,null],[17,"SYS_gettid","","",null,null],[17,"SYS_perf_event_open","","",null,null]],"paths":[[3,"utimbuf"],[3,"timeval"],[3,"timespec"],[3,"rlimit"],[3,"rusage"],[3,"in_addr"],[3,"in6_addr"],[3,"ip_mreq"],[3,"ipv6_mreq"],[3,"hostent"],[3,"iovec"],[3,"pollfd"],[3,"winsize"],[3,"linger"],[3,"sockaddr"],[3,"sockaddr_in"],[3,"sockaddr_in6"],[3,"sockaddr_un"],[3,"sockaddr_storage"],[3,"addrinfo"],[3,"sockaddr_nl"],[3,"sockaddr_ll"],[3,"tm"],[3,"sched_param"],[3,"Dl_info"],[3,"epoll_event"],[3,"utsname"],[3,"lconv"],[3,"dirent"],[3,"dirent64"],[3,"rlimit64"],[3,"glob_t"],[3,"ifaddrs"],[3,"passwd"],[3,"statvfs"],[3,"dqblk"],[3,"signalfd_siginfo"],[3,"mq_attr"],[3,"sigaction"],[3,"stack_t"],[3,"siginfo_t"],[3,"glob64_t"],[3,"ucred"],[3,"statfs"],[3,"msghdr"],[3,"termios"],[3,"flock"],[3,"ipc_perm"],[3,"shmid_ds"],[3,"sysinfo"],[3,"stat"],[3,"stat64"],[3,"_libc_fpxreg"],[3,"_libc_xmmreg"],[3,"_libc_fpstate"],[3,"mcontext_t"],[3,"ucontext_t"],[4,"Option"],[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"Clone"],[3,"pthread_attr_t"],[3,"sigset_t"],[3,"sem_t"],[3,"pthread_mutex_t"],[3,"pthread_rwlock_t"],[3,"pthread_mutexattr_t"],[3,"pthread_cond_t"],[3,"fsid_t"],[3,"cpu_set_t"],[3,"fd_set"]]};
searchIndex["num_traits"] = {"doc":"Numeric traits for generic mathematics","items":[[3,"ParseFloatError","num_traits","",null,null],[12,"kind","","",0,null],[4,"FloatErrorKind","","",null,null],[13,"Empty","","",1,null],[13,"Invalid","","",1,null],[0,"identities","","",null,null],[5,"zero","num_traits::identities","Returns the additive identity, `0`.",null,{"inputs":[],"output":{"name":"t"}}],[5,"one","","Returns the multiplicative identity, `1`.",null,{"inputs":[],"output":{"name":"t"}}],[8,"Zero","","Defines an additive identity element for `Self`.",null,null],[10,"zero","","Returns the additive identity element of `Self`, `0`.",2,{"inputs":[],"output":{"name":"self"}}],[10,"is_zero","","Returns `true` if `self` is equal to the additive identity.",2,null],[8,"One","","Defines a multiplicative identity element for `Self`.",null,null],[10,"one","","Returns the multiplicative identity element of `Self`, `1`.",3,{"inputs":[],"output":{"name":"self"}}],[0,"sign","num_traits","",null,null],[5,"abs","num_traits::sign","Computes the absolute value.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"abs_sub","","The positive difference of two numbers.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"signum","","Returns the sign of the number.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[8,"Signed","","Useful functions for signed numbers (i.e. numbers that can be negative).",null,null],[10,"abs","","Computes the absolute value.",4,null],[10,"abs_sub","","The positive difference of two numbers.",4,null],[10,"signum","","Returns the sign of the number.",4,null],[10,"is_positive","","Returns true if the number is positive and false if the number is zero or negative.",4,null],[10,"is_negative","","Returns true if the number is negative and false if the number is zero or positive.",4,null],[8,"Unsigned","","A trait for values which cannot be negative",null,null],[0,"ops","num_traits","",null,null],[0,"saturating","num_traits::ops","",null,null],[8,"Saturating","num_traits::ops::saturating","Saturating math operations",null,null],[10,"saturating_add","","Saturating addition operator.\nReturns a+b, saturating at the numeric bounds instead of overflowing.",5,null],[10,"saturating_sub","","Saturating subtraction operator.\nReturns a-b, saturating at the numeric bounds instead of overflowing.",5,null],[0,"checked","num_traits::ops","",null,null],[8,"CheckedAdd","num_traits::ops::checked","Performs addition that returns `None` instead of wrapping around on\noverflow.",null,null],[10,"checked_add","","Adds two numbers, checking for overflow. If overflow happens, `None` is\nreturned.",6,null],[8,"CheckedSub","","Performs subtraction that returns `None` instead of wrapping around on underflow.",null,null],[10,"checked_sub","","Subtracts two numbers, checking for underflow. If underflow happens,\n`None` is returned.",7,null],[8,"CheckedMul","","Performs multiplication that returns `None` instead of wrapping around on underflow or\noverflow.",null,null],[10,"checked_mul","","Multiplies two numbers, checking for underflow or overflow. If underflow\nor overflow happens, `None` is returned.",8,null],[8,"CheckedDiv","","Performs division that returns `None` instead of panicking on division by zero and instead of\nwrapping around on underflow and overflow.",null,null],[10,"checked_div","","Divides two numbers, checking for underflow, overflow and division by\nzero. If any of that happens, `None` is returned.",9,null],[0,"bounds","num_traits","",null,null],[8,"Bounded","num_traits::bounds","Numbers which have upper and lower bounds",null,null],[10,"min_value","","returns the smallest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","returns the largest finite number this type can represent",10,{"inputs":[],"output":{"name":"self"}}],[0,"float","num_traits","",null,null],[8,"Float","num_traits::float","",null,null],[10,"nan","","Returns the `NaN` value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"infinity","","Returns the infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_infinity","","Returns the negative infinite value.",11,{"inputs":[],"output":{"name":"self"}}],[10,"neg_zero","","Returns `-0.0`.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_value","","Returns the smallest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"min_positive_value","","Returns the smallest positive, normalized value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"max_value","","Returns the largest finite value that this type can represent.",11,{"inputs":[],"output":{"name":"self"}}],[10,"is_nan","","Returns `true` if this value is `NaN` and false otherwise.",11,null],[10,"is_infinite","","Returns `true` if this value is positive infinity or negative infinity and\nfalse otherwise.",11,null],[10,"is_finite","","Returns `true` if this number is neither infinite nor `NaN`.",11,null],[10,"is_normal","","Returns `true` if the number is neither zero, infinite,\n[subnormal][subnormal], or `NaN`.",11,null],[10,"classify","","Returns the floating point category of the number. If only one property\nis going to be tested, it is generally faster to use the specific\npredicate instead.",11,null],[10,"floor","","Returns the largest integer less than or equal to a number.",11,null],[10,"ceil","","Returns the smallest integer greater than or equal to a number.",11,null],[10,"round","","Returns the nearest integer to a number. Round half-way cases away from\n`0.0`.",11,null],[10,"trunc","","Return the integer part of a number.",11,null],[10,"fract","","Returns the fractional part of a number.",11,null],[10,"abs","","Computes the absolute value of `self`. Returns `Float::nan()` if the\nnumber is `Float::nan()`.",11,null],[10,"signum","","Returns a number that represents the sign of `self`.",11,null],[10,"is_sign_positive","","Returns `true` if `self` is positive, including `+0.0` and\n`Float::infinity()`.",11,null],[10,"is_sign_negative","","Returns `true` if `self` is negative, including `-0.0` and\n`Float::neg_infinity()`.",11,null],[10,"mul_add","","Fused multiply-add. Computes `(self * a) + b` with only one rounding\nerror. This produces a more accurate result with better performance than\na separate multiplication operation followed by an add.",11,null],[10,"recip","","Take the reciprocal (inverse) of a number, `1/x`.",11,null],[10,"powi","","Raise a number to an integer power.",11,null],[10,"powf","","Raise a number to a floating point power.",11,null],[10,"sqrt","","Take the square root of a number.",11,null],[10,"exp","","Returns `e^(self)`, (the exponential function).",11,null],[10,"exp2","","Returns `2^(self)`.",11,null],[10,"ln","","Returns the natural logarithm of the number.",11,null],[10,"log","","Returns the logarithm of the number with respect to an arbitrary base.",11,null],[10,"log2","","Returns the base 2 logarithm of the number.",11,null],[10,"log10","","Returns the base 10 logarithm of the number.",11,null],[10,"max","","Returns the maximum of the two numbers.",11,null],[10,"min","","Returns the minimum of the two numbers.",11,null],[10,"abs_sub","","The positive difference of two numbers.",11,null],[10,"cbrt","","Take the cubic root of a number.",11,null],[10,"hypot","","Calculate the length of the hypotenuse of a right-angle triangle given\nlegs of length `x` and `y`.",11,null],[10,"sin","","Computes the sine of a number (in radians).",11,null],[10,"cos","","Computes the cosine of a number (in radians).",11,null],[10,"tan","","Computes the tangent of a number (in radians).",11,null],[10,"asin","","Computes the arcsine of a number. Return value is in radians in\nthe range [-pi/2, pi/2] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"acos","","Computes the arccosine of a number. Return value is in radians in\nthe range [0, pi] or NaN if the number is outside the range\n[-1, 1].",11,null],[10,"atan","","Computes the arctangent of a number. Return value is in radians in the\nrange [-pi/2, pi/2];",11,null],[10,"atan2","","Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).",11,null],[10,"sin_cos","","Simultaneously computes the sine and cosine of the number, `x`. Returns\n`(sin(x), cos(x))`.",11,null],[10,"exp_m1","","Returns `e^(self) - 1` in a way that is accurate even if the\nnumber is close to zero.",11,null],[10,"ln_1p","","Returns `ln(1+n)` (natural logarithm) more accurately than if\nthe operations were performed separately.",11,null],[10,"sinh","","Hyperbolic sine function.",11,null],[10,"cosh","","Hyperbolic cosine function.",11,null],[10,"tanh","","Hyperbolic tangent function.",11,null],[10,"asinh","","Inverse hyperbolic sine function.",11,null],[10,"acosh","","Inverse hyperbolic cosine function.",11,null],[10,"atanh","","Inverse hyperbolic tangent function.",11,null],[10,"integer_decode","","Returns the mantissa, base 2 exponent, and sign as integers, respectively.\nThe original number can be recovered by `sign * mantissa * 2 ^ exponent`.\nThe floating point encoding is documented in the [Reference][floating-point].",11,null],[0,"cast","num_traits","",null,null],[5,"cast","num_traits::cast","Cast from one machine scalar to another.",null,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[8,"ToPrimitive","","A generic trait for converting a value to a number.",null,null],[11,"to_isize","","Converts the value of `self` to an `isize`.",12,null],[11,"to_i8","","Converts the value of `self` to an `i8`.",12,null],[11,"to_i16","","Converts the value of `self` to an `i16`.",12,null],[11,"to_i32","","Converts the value of `self` to an `i32`.",12,null],[10,"to_i64","","Converts the value of `self` to an `i64`.",12,null],[11,"to_usize","","Converts the value of `self` to a `usize`.",12,null],[11,"to_u8","","Converts the value of `self` to an `u8`.",12,null],[11,"to_u16","","Converts the value of `self` to an `u16`.",12,null],[11,"to_u32","","Converts the value of `self` to an `u32`.",12,null],[10,"to_u64","","Converts the value of `self` to an `u64`.",12,null],[11,"to_f32","","Converts the value of `self` to an `f32`.",12,null],[11,"to_f64","","Converts the value of `self` to an `f64`.",12,null],[8,"FromPrimitive","","A generic trait for converting a number to a value.",null,null],[11,"from_isize","","Convert an `isize` to return an optional value of this type. If the\nvalue cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"isize"}],"output":{"name":"option"}}],[11,"from_i8","","Convert an `i8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i8"}],"output":{"name":"option"}}],[11,"from_i16","","Convert an `i16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i16"}],"output":{"name":"option"}}],[11,"from_i32","","Convert an `i32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i32"}],"output":{"name":"option"}}],[10,"from_i64","","Convert an `i64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"i64"}],"output":{"name":"option"}}],[11,"from_usize","","Convert a `usize` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"usize"}],"output":{"name":"option"}}],[11,"from_u8","","Convert an `u8` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u8"}],"output":{"name":"option"}}],[11,"from_u16","","Convert an `u16` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u16"}],"output":{"name":"option"}}],[11,"from_u32","","Convert an `u32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[10,"from_u64","","Convert an `u64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"u64"}],"output":{"name":"option"}}],[11,"from_f32","","Convert a `f32` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f32"}],"output":{"name":"option"}}],[11,"from_f64","","Convert a `f64` to return an optional value of this type. If the\ntype cannot be represented by this value, the `None` is returned.",13,{"inputs":[{"name":"f64"}],"output":{"name":"option"}}],[8,"NumCast","","An interface for casting between machine scalars.",null,null],[10,"from","","Creates a number from another value that can be converted into\na primitive via the `ToPrimitive` trait.",14,{"inputs":[{"name":"t"}],"output":{"name":"option"}}],[0,"int","num_traits","",null,null],[8,"PrimInt","num_traits::int","",null,null],[10,"count_ones","","Returns the number of ones in the binary representation of `self`.",15,null],[10,"count_zeros","","Returns the number of zeros in the binary representation of `self`.",15,null],[10,"leading_zeros","","Returns the number of leading zeros in the binary representation\nof `self`.",15,null],[10,"trailing_zeros","","Returns the number of trailing zeros in the binary representation\nof `self`.",15,null],[10,"rotate_left","","Shifts the bits to the left by a specified amount amount, `n`, wrapping\nthe truncated bits to the end of the resulting integer.",15,null],[10,"rotate_right","","Shifts the bits to the right by a specified amount amount, `n`, wrapping\nthe truncated bits to the beginning of the resulting integer.",15,null],[10,"signed_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"signed_shr","","Shifts the bits to the right by a specified amount amount, `n`, copying\nthe &quot;sign bit&quot; in the most significant bits even for unsigned types.",15,null],[10,"unsigned_shl","","Shifts the bits to the left by a specified amount amount, `n`, filling\nzeros in the least significant bits.",15,null],[10,"unsigned_shr","","Shifts the bits to the right by a specified amount amount, `n`, filling\nzeros in the most significant bits.",15,null],[10,"swap_bytes","","Reverses the byte order of the integer.",15,null],[10,"from_be","","Convert an integer from big endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"from_le","","Convert an integer from little endian to the target&#39;s endianness.",15,{"inputs":[{"name":"self"}],"output":{"name":"self"}}],[10,"to_be","","Convert `self` to big endian from the target&#39;s endianness.",15,null],[10,"to_le","","Convert `self` to little endian from the target&#39;s endianness.",15,null],[10,"pow","","Raises self to the power of `exp`, using exponentiation by squaring.",15,null],[0,"pow","num_traits","",null,null],[5,"pow","num_traits::pow","Raises a value to the power of exp, using exponentiation by squaring.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"t"}}],[5,"checked_pow","","Raises a value to the power of exp, returning `None` if an overflow occurred.",null,{"inputs":[{"name":"t"},{"name":"usize"}],"output":{"name":"option"}}],[8,"Num","num_traits","The base trait for numeric types",null,null],[16,"FromStrRadixErr","","",16,null],[10,"from_str_radix","","Convert from a string and radix &lt;= 36.",16,{"inputs":[{"name":"str"},{"name":"u32"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"fmt","","",0,null]],"paths":[[3,"ParseFloatError"],[4,"FloatErrorKind"],[8,"Zero"],[8,"One"],[8,"Signed"],[8,"Saturating"],[8,"CheckedAdd"],[8,"CheckedSub"],[8,"CheckedMul"],[8,"CheckedDiv"],[8,"Bounded"],[8,"Float"],[8,"ToPrimitive"],[8,"FromPrimitive"],[8,"NumCast"],[8,"PrimInt"],[8,"Num"]]};
searchIndex["bitflags"] = {"doc":"A typesafe bitmask flag generator.","items":[[0,"isize","bitflags::__core","The pointer-sized signed integer type.",null,null],[17,"MIN","bitflags::__core::isize","",null,null],[17,"MAX","","",null,null],[0,"i8","bitflags::__core","The 8-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i8","",null,null],[17,"MAX","","",null,null],[0,"i16","bitflags::__core","The 16-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i16","",null,null],[17,"MAX","","",null,null],[0,"i32","bitflags::__core","The 32-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i32","",null,null],[17,"MAX","","",null,null],[0,"i64","bitflags::__core","The 64-bit signed integer type.",null,null],[17,"MIN","bitflags::__core::i64","",null,null],[17,"MAX","","",null,null],[0,"usize","bitflags::__core","The pointer-sized unsigned integer type.",null,null],[17,"MIN","bitflags::__core::usize","",null,null],[17,"MAX","","",null,null],[0,"u8","bitflags::__core","The 8-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u8","",null,null],[17,"MAX","","",null,null],[0,"u16","bitflags::__core","The 16-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u16","",null,null],[17,"MAX","","",null,null],[0,"u32","bitflags::__core","The 32-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u32","",null,null],[17,"MAX","","",null,null],[0,"u64","bitflags::__core","The 64-bit unsigned integer type.",null,null],[17,"MIN","bitflags::__core::u64","",null,null],[17,"MAX","","",null,null],[0,"f32","bitflags::__core","Operations and constants for 32-bits floats (`f32` type)",null,null],[17,"RADIX","bitflags::__core::f32","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f32 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f32 value",null,null],[17,"MAX","","Largest finite f32 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f32::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"f64","bitflags::__core","Operations and constants for 64-bits floats (`f64` type)",null,null],[17,"RADIX","bitflags::__core::f64","",null,null],[17,"MANTISSA_DIGITS","","",null,null],[17,"DIGITS","","",null,null],[17,"EPSILON","","",null,null],[17,"MIN","","Smallest finite f64 value",null,null],[17,"MIN_POSITIVE","","Smallest positive, normalized f64 value",null,null],[17,"MAX","","Largest finite f64 value",null,null],[17,"MIN_EXP","","",null,null],[17,"MAX_EXP","","",null,null],[17,"MIN_10_EXP","","",null,null],[17,"MAX_10_EXP","","",null,null],[17,"NAN","","",null,null],[17,"INFINITY","","",null,null],[17,"NEG_INFINITY","","",null,null],[0,"consts","","Basic mathematical constants.",null,null],[17,"PI","bitflags::__core::f64::consts","Archimedes&#39; constant",null,null],[17,"FRAC_PI_2","","pi/2.0",null,null],[17,"FRAC_PI_3","","pi/3.0",null,null],[17,"FRAC_PI_4","","pi/4.0",null,null],[17,"FRAC_PI_6","","pi/6.0",null,null],[17,"FRAC_PI_8","","pi/8.0",null,null],[17,"FRAC_1_PI","","1.0/pi",null,null],[17,"FRAC_2_PI","","2.0/pi",null,null],[17,"FRAC_2_SQRT_PI","","2.0/sqrt(pi)",null,null],[17,"SQRT_2","","sqrt(2.0)",null,null],[17,"FRAC_1_SQRT_2","","1.0/sqrt(2.0)",null,null],[17,"E","","Euler&#39;s number",null,null],[17,"LOG2_E","","log2(e)",null,null],[17,"LOG10_E","","log10(e)",null,null],[17,"LN_2","","ln(2.0)",null,null],[17,"LN_10","","ln(10.0)",null,null],[0,"num","bitflags::__core","Numeric traits and functions for the built-in numeric types.",null,null],[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","bitflags::__core","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"last","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"clone","","",68,null],[11,"hash","core::result","",69,null],[11,"fmt","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"lt","","",69,null],[11,"le","","",69,null],[11,"gt","","",69,null],[11,"ge","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"is_ok","","Returns true if the result is `Ok`",69,null],[11,"is_err","","Returns true if the result is `Err`",69,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",69,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",69,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",69,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",69,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",69,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",69,null],[11,"iter","","Returns an iterator over the possibly contained value.",69,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",69,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",69,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",69,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","","",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"next_back","","",72,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",73,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"count","","",74,null],[11,"nth","","",74,null],[11,"last","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"clone","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","","",83,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"count","","",83,null],[11,"nth","","",83,null],[11,"last","","",83,null],[11,"next_back","","",83,null],[11,"fmt","core::str::pattern","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_reject","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"next_reject_back","","",87,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"haystack","","",88,null],[11,"next","","",88,null],[11,"next_match","","",88,null],[11,"next_back","","",88,null],[11,"next_match_back","","",88,null],[11,"eq","core::str","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",90,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next_back","","",92,null],[11,"as_str","","View the underlying data as a subslice of the original data.",92,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"count","","",93,null],[11,"last","","",93,null],[11,"nth","","",93,null],[11,"next_back","","",93,null],[11,"len","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"next_back","","",94,null],[11,"next_back","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"next_back","","",96,null],[11,"next_back","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"next_back","","",100,null],[11,"next_back","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"next","","",103,null],[11,"clone","","",103,null],[11,"next_back","","",102,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"fmt","core::hash::sip","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[3,"Wrapping","bitflags::__core::num","Provides intentionally-wrapped arithmetic on `T`.",null,null],[12,"0","","",0,null],[11,"explicit_sig_bits","bitflags::__core::num::dec2flt::rawfp","The number of bits in the singificand, *excluding* the hidden bit.",118,{"inputs":[],"output":{"name":"u8"}}],[11,"max_exp","","The maximum legal exponent in fractional representation.",118,{"inputs":[],"output":{"name":"i16"}}],[11,"min_exp","","The minimum legal exponent in fractional representation, excluding subnormals.",118,{"inputs":[],"output":{"name":"i16"}}],[11,"max_exp_int","","`MAX_EXP` for integral representation, i.e., with the shift applied.",118,{"inputs":[],"output":{"name":"i16"}}],[11,"max_encoded_exp","","`MAX_EXP` encoded (i.e., with offset bias)",118,{"inputs":[],"output":{"name":"i16"}}],[11,"min_exp_int","","`MIN_EXP` for integral representation, i.e., with the shift applied.",118,{"inputs":[],"output":{"name":"i16"}}],[11,"max_sig","","The maximum normalized singificand in integral representation.",118,{"inputs":[],"output":{"name":"u64"}}],[11,"min_sig","","The minimal normalized significand in integral representation.",118,{"inputs":[],"output":{"name":"u64"}}],[8,"Zero","bitflags::__core::num","Types that have a &quot;zero&quot; value.",null,null],[10,"zero","","The &quot;zero&quot; (usually, additive identity) for this type.",119,{"inputs":[],"output":{"name":"self"}}],[8,"One","","Types that have a &quot;one&quot; value.",null,null],[10,"one","","The &quot;one&quot; (usually, multiplicative identity) for this type.",120,{"inputs":[],"output":{"name":"self"}}],[4,"FpCategory","","A classification of floating point numbers.",null,null],[13,"Nan","","&quot;Not a Number&quot;, often obtained by dividing by zero",2,null],[13,"Infinite","","Positive or negative infinity",2,null],[13,"Zero","","Positive or negative zero",2,null],[13,"Subnormal","","De-normalized floating point representation (less precise than `Normal`)",2,null],[13,"Normal","","A regular floating point number",2,null],[3,"TryFromIntError","","The error type returned when a checked integral type conversion fails.",null,null],[3,"ParseIntError","","An error which can be returned when parsing an integer.",null,null],[3,"ParseFloatError","","An error which can be returned when parsing a float.",null,null],[0,"prelude","bitflags::__core","The libcore prelude",null,null],[0,"v1","bitflags::__core::prelude","The core prelude",null,null],[8,"Iterator","bitflags::__core::prelude::v1","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",121,null],[10,"next","","Advances the iterator and returns the next value.",121,null],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",121,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",121,null],[11,"last","","Consumes the iterator, returning the last element.",121,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",121,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",121,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",121,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",121,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",121,null],[11,"filter_map","","Creates an iterator that both filters and maps.",121,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",121,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",121,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",121,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",121,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",121,null],[11,"take","","Creates an iterator that yields its first `n` elements.",121,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",121,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",121,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",121,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",121,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",121,null],[11,"collect","","Transforms an iterator into a collection.",121,null],[11,"partition","","Consumes an iterator, creating two collections from it.",121,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",121,null],[11,"all","","Tests if every element of the iterator matches a predicate.",121,null],[11,"any","","Tests if any element of the iterator matches a predicate.",121,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",121,null],[11,"position","","Searches for an element in an iterator, returning its index.",121,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",121,null],[11,"max","","Returns the maximum element of an iterator.",121,null],[11,"min","","Returns the minimum element of an iterator.",121,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",121,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",121,null],[11,"rev","","Reverses an iterator&#39;s direction.",121,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",121,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",121,null],[11,"cycle","","Repeats an iterator endlessly.",121,null],[11,"sum","","Sums the elements of an iterator.",121,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",121,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",121,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",121,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",121,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",121,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",121,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",121,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",121,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",121,null],[8,"PartialEq","","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",122,null],[11,"ne","","This method tests for `!=`.",122,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",123,null],[4,"Option","","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",63,null],[13,"Some","","Some value `T`",63,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",124,null],[4,"Result","","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",69,null],[13,"Err","","Contains the error value",69,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",125,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"Send","","Types that can be transferred across thread boundaries.",null,null],[8,"Clone","","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",126,null],[11,"clone_from","","Performs copy-assignment from `source`.",126,null],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",127,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",127,null],[10,"into_iter","","Creates an iterator from a value.",127,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",128,null],[8,"Default","","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",129,{"inputs":[],"output":{"name":"self"}}],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",130,null],[8,"Drop","","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",131,null],[8,"AsRef","","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",132,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",133,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",134,null],[10,"call_once","","This is called when the call operator is used.",134,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",135,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",136,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[5,"drop","","Disposes of a value.",null,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",137,null],[8,"SliceExt","","Extension methods for slices.",null,null],[16,"Item","","",138,null],[10,"split_at","","",138,null],[10,"iter","","",138,null],[10,"split","","",138,null],[10,"splitn","","",138,null],[10,"rsplitn","","",138,null],[10,"windows","","",138,null],[10,"chunks","","",138,null],[10,"get","","",138,null],[10,"first","","",138,null],[10,"split_first","","",138,null],[10,"split_last","","",138,null],[10,"last","","",138,null],[10,"get_unchecked","","",138,null],[10,"as_ptr","","",138,null],[10,"binary_search","","",138,null],[10,"binary_search_by","","",138,null],[10,"binary_search_by_key","","",138,null],[10,"len","","",138,null],[11,"is_empty","","",138,null],[10,"get_mut","","",138,null],[10,"iter_mut","","",138,null],[10,"first_mut","","",138,null],[10,"split_first_mut","","",138,null],[10,"split_last_mut","","",138,null],[10,"last_mut","","",138,null],[10,"split_mut","","",138,null],[10,"splitn_mut","","",138,null],[10,"rsplitn_mut","","",138,null],[10,"chunks_mut","","",138,null],[10,"swap","","",138,null],[10,"split_at_mut","","",138,null],[10,"reverse","","",138,null],[10,"get_unchecked_mut","","",138,null],[10,"as_mut_ptr","","",138,null],[10,"contains","","",138,null],[10,"starts_with","","",138,null],[10,"ends_with","","",138,null],[10,"clone_from_slice","","",138,null],[10,"copy_from_slice","","",138,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",139,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",139,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",139,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",139,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",139,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[0,"intrinsics","bitflags::__core","rustc compiler intrinsics.",null,null],[5,"atomic_cxchg","bitflags::__core::intrinsics","",null,null],[5,"atomic_cxchg_acq","","",null,null],[5,"atomic_cxchg_rel","","",null,null],[5,"atomic_cxchg_acqrel","","",null,null],[5,"atomic_cxchg_relaxed","","",null,null],[5,"atomic_cxchg_failrelaxed","","",null,null],[5,"atomic_cxchg_failacq","","",null,null],[5,"atomic_cxchg_acq_failrelaxed","","",null,null],[5,"atomic_cxchg_acqrel_failrelaxed","","",null,null],[5,"atomic_cxchgweak","","",null,null],[5,"atomic_cxchgweak_acq","","",null,null],[5,"atomic_cxchgweak_rel","","",null,null],[5,"atomic_cxchgweak_acqrel","","",null,null],[5,"atomic_cxchgweak_relaxed","","",null,null],[5,"atomic_cxchgweak_failrelaxed","","",null,null],[5,"atomic_cxchgweak_failacq","","",null,null],[5,"atomic_cxchgweak_acq_failrelaxed","","",null,null],[5,"atomic_cxchgweak_acqrel_failrelaxed","","",null,null],[5,"atomic_load","","",null,null],[5,"atomic_load_acq","","",null,null],[5,"atomic_load_relaxed","","",null,null],[5,"atomic_load_unordered","","",null,null],[5,"atomic_store","","",null,null],[5,"atomic_store_rel","","",null,null],[5,"atomic_store_relaxed","","",null,null],[5,"atomic_store_unordered","","",null,null],[5,"atomic_xchg","","",null,null],[5,"atomic_xchg_acq","","",null,null],[5,"atomic_xchg_rel","","",null,null],[5,"atomic_xchg_acqrel","","",null,null],[5,"atomic_xchg_relaxed","","",null,null],[5,"atomic_xadd","","",null,null],[5,"atomic_xadd_acq","","",null,null],[5,"atomic_xadd_rel","","",null,null],[5,"atomic_xadd_acqrel","","",null,null],[5,"atomic_xadd_relaxed","","",null,null],[5,"atomic_xsub","","",null,null],[5,"atomic_xsub_acq","","",null,null],[5,"atomic_xsub_rel","","",null,null],[5,"atomic_xsub_acqrel","","",null,null],[5,"atomic_xsub_relaxed","","",null,null],[5,"atomic_and","","",null,null],[5,"atomic_and_acq","","",null,null],[5,"atomic_and_rel","","",null,null],[5,"atomic_and_acqrel","","",null,null],[5,"atomic_and_relaxed","","",null,null],[5,"atomic_nand","","",null,null],[5,"atomic_nand_acq","","",null,null],[5,"atomic_nand_rel","","",null,null],[5,"atomic_nand_acqrel","","",null,null],[5,"atomic_nand_relaxed","","",null,null],[5,"atomic_or","","",null,null],[5,"atomic_or_acq","","",null,null],[5,"atomic_or_rel","","",null,null],[5,"atomic_or_acqrel","","",null,null],[5,"atomic_or_relaxed","","",null,null],[5,"atomic_xor","","",null,null],[5,"atomic_xor_acq","","",null,null],[5,"atomic_xor_rel","","",null,null],[5,"atomic_xor_acqrel","","",null,null],[5,"atomic_xor_relaxed","","",null,null],[5,"atomic_max","","",null,null],[5,"atomic_max_acq","","",null,null],[5,"atomic_max_rel","","",null,null],[5,"atomic_max_acqrel","","",null,null],[5,"atomic_max_relaxed","","",null,null],[5,"atomic_min","","",null,null],[5,"atomic_min_acq","","",null,null],[5,"atomic_min_rel","","",null,null],[5,"atomic_min_acqrel","","",null,null],[5,"atomic_min_relaxed","","",null,null],[5,"atomic_umin","","",null,null],[5,"atomic_umin_acq","","",null,null],[5,"atomic_umin_rel","","",null,null],[5,"atomic_umin_acqrel","","",null,null],[5,"atomic_umin_relaxed","","",null,null],[5,"atomic_umax","","",null,null],[5,"atomic_umax_acq","","",null,null],[5,"atomic_umax_rel","","",null,null],[5,"atomic_umax_acqrel","","",null,null],[5,"atomic_umax_relaxed","","",null,null],[5,"atomic_fence","","",null,null],[5,"atomic_fence_acq","","",null,null],[5,"atomic_fence_rel","","",null,null],[5,"atomic_fence_acqrel","","",null,null],[5,"atomic_singlethreadfence","","A compiler-only memory barrier.",null,null],[5,"atomic_singlethreadfence_acq","","",null,null],[5,"atomic_singlethreadfence_rel","","",null,null],[5,"atomic_singlethreadfence_acqrel","","",null,null],[5,"abort","","Aborts the execution of the process.",null,null],[5,"unreachable","","Tells LLVM that this point in the code is not reachable,\nenabling further optimizations.",null,null],[5,"assume","","Informs the optimizer that a condition is always true.\nIf the condition is false, the behavior is undefined.",null,null],[5,"breakpoint","","Executes a breakpoint trap, for inspection by a debugger.",null,null],[5,"size_of","","The size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"move_val_init","","Moves a value to an uninitialized memory location.",null,null],[5,"min_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"pref_align_of","","",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of_val","","",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"type_name","","Gets a static string slice containing the name of a type.",null,{"inputs":[],"output":{"name":"str"}}],[5,"type_id","","Gets an identifier which is globally unique to the specified type. This\nfunction will return the same value for a type regardless of whichever\ncrate it is invoked in.",null,{"inputs":[],"output":{"name":"u64"}}],[5,"init_dropped","","Creates a value initialized to so that its drop flag,\nif any, says that it has been dropped.",null,{"inputs":[],"output":{"name":"t"}}],[5,"init","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninit","","Creates an uninitialized value.",null,{"inputs":[],"output":{"name":"t"}}],[5,"forget","","Moves a value out of scope without running drop glue.",null,null],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"return_address","","Gives the address for the return value of the enclosing function.",null,null],[5,"needs_drop","","Returns `true` if the actual type given as `T` requires drop\nglue; returns `false` if the actual type provided for `T`\nimplements `Copy`.",null,{"inputs":[],"output":{"name":"bool"}}],[5,"offset","","Calculates the offset from a pointer.",null,null],[5,"arith_offset","","Calculates the offset from a pointer, potentially wrapping.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"volatile_copy_nonoverlapping_memory","","Equivalent to the appropriate `llvm.memcpy.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_copy_memory","","Equivalent to the appropriate `llvm.memmove.p0i8.0i8.*` intrinsic, with\na size of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`",null,null],[5,"volatile_set_memory","","Equivalent to the appropriate `llvm.memset.p0i8.*` intrinsic, with a\nsize of `count` * `size_of::&lt;T&gt;()` and an alignment of\n`min_align_of::&lt;T&gt;()`.",null,null],[5,"volatile_load","","Perform a volatile load from the `src` pointer.",null,null],[5,"volatile_store","","Perform a volatile store to the `dst` pointer.",null,null],[5,"sqrtf32","","Returns the square root of an `f32`",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sqrtf64","","Returns the square root of an `f64`",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powif32","","Raises an `f32` to an integer power.",null,{"inputs":[{"name":"f32"},{"name":"i32"}],"output":{"name":"f32"}}],[5,"powif64","","Raises an `f64` to an integer power.",null,{"inputs":[{"name":"f64"},{"name":"i32"}],"output":{"name":"f64"}}],[5,"sinf32","","Returns the sine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"sinf64","","Returns the sine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"cosf32","","Returns the cosine of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"cosf64","","Returns the cosine of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"powf32","","Raises an `f32` to an `f32` power.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"powf64","","Raises an `f64` to an `f64` power.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"expf32","","Returns the exponential of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"expf64","","Returns the exponential of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"exp2f32","","Returns 2 raised to the power of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"exp2f64","","Returns 2 raised to the power of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"logf32","","Returns the natural logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"logf64","","Returns the natural logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log10f32","","Returns the base 10 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log10f64","","Returns the base 10 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"log2f32","","Returns the base 2 logarithm of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"log2f64","","Returns the base 2 logarithm of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fmaf32","","Returns `a * b + c` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"fmaf64","","Returns `a * b + c` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"fabsf32","","Returns the absolute value of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"fabsf64","","Returns the absolute value of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"copysignf32","","Copies the sign from `y` to `x` for `f32` values.",null,{"inputs":[{"name":"f32"},{"name":"f32"}],"output":{"name":"f32"}}],[5,"copysignf64","","Copies the sign from `y` to `x` for `f64` values.",null,{"inputs":[{"name":"f64"},{"name":"f64"}],"output":{"name":"f64"}}],[5,"floorf32","","Returns the largest integer less than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"floorf64","","Returns the largest integer less than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"ceilf32","","Returns the smallest integer greater than or equal to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"ceilf64","","Returns the smallest integer greater than or equal to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"truncf32","","Returns the integer part of an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"truncf64","","Returns the integer part of an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"rintf32","","Returns the nearest integer to an `f32`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"rintf64","","Returns the nearest integer to an `f64`. May raise an inexact floating-point exception\nif the argument is not an integer.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"nearbyintf32","","Returns the nearest integer to an `f32`.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"nearbyintf64","","Returns the nearest integer to an `f64`.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"roundf32","","Returns the nearest integer to an `f32`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f32"}],"output":{"name":"f32"}}],[5,"roundf64","","Returns the nearest integer to an `f64`. Rounds half-way cases away from zero.",null,{"inputs":[{"name":"f64"}],"output":{"name":"f64"}}],[5,"fadd_fast","","Float addition that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fsub_fast","","Float subtraction that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fmul_fast","","Float multiplication that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"fdiv_fast","","Float division that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"frem_fast","","Float remainder that allows optimizations based on algebraic rules.\nMay assume inputs are finite.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"ctpop","","Returns the number of bits set in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"ctlz","","Returns the number of leading bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"cttz","","Returns the number of trailing bits unset in an integer type `T`",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"bswap","","Reverses the bytes in an integer type `T`.",null,{"inputs":[{"name":"t"}],"output":{"name":"t"}}],[5,"add_with_overflow","","Performs checked integer addition.",null,null],[5,"sub_with_overflow","","Performs checked integer subtraction",null,null],[5,"mul_with_overflow","","Performs checked integer multiplication",null,null],[5,"unchecked_div","","Performs an unchecked division, resulting in undefined behavior\nwhere y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"unchecked_rem","","Returns the remainder of an unchecked division, resulting in\nundefined behavior where y = 0 or x = `T::min_value()` and y = -1",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_add","","Returns (a + b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_sub","","Returns (a - b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"overflowing_mul","","Returns (a * b) mod 2^N, where N is the width of T in bits.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"discriminant_value","","Returns the value of the discriminant for the variant in &#39;v&#39;,\ncast to a `u64`; if `T` has no discriminant, returns 0.",null,{"inputs":[{"name":"t"}],"output":{"name":"u64"}}],[5,"try","","Rust&#39;s &quot;try catch&quot; construct which invokes the function pointer `f` with\nthe data pointer `data`.",null,null],[0,"mem","bitflags::__core","Basic functions for dealing with memory.",null,null],[5,"forget","bitflags::__core::mem","Leaks a value into the void, consuming ownership and never running its\ndestructor.",null,null],[5,"size_of","","Returns the size of a type in bytes.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"size_of_val","","Returns the size of the given value in bytes.",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"min_align_of","","Returns the ABI-required minimum alignment of a type",null,{"inputs":[],"output":{"name":"usize"}}],[5,"min_align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"align_of","","Returns the alignment in memory for a type.",null,{"inputs":[],"output":{"name":"usize"}}],[5,"align_of_val","","Returns the ABI-required minimum alignment of the type of the value that `val` points to",null,{"inputs":[{"name":"t"}],"output":{"name":"usize"}}],[5,"zeroed","","Creates a value initialized to zero.",null,{"inputs":[],"output":{"name":"t"}}],[5,"dropped","","Creates a value initialized to an unspecified series of bytes.",null,{"inputs":[],"output":{"name":"t"}}],[5,"uninitialized","","Bypasses Rust&#39;s normal memory-initialization checks by pretending to\nproduce a value of type T, while doing nothing at all.",null,{"inputs":[],"output":{"name":"t"}}],[5,"swap","","Swap the values at two mutable locations of the same type, without deinitializing or copying\neither one.",null,null],[5,"replace","","Replaces the value at a mutable location with a new one, returning the old value, without\ndeinitializing or copying either one.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"drop","","Disposes of a value.",null,null],[17,"POST_DROP_U8","","",null,null],[17,"POST_DROP_U32","","",null,null],[17,"POST_DROP_U64","","",null,null],[17,"POST_DROP_USIZE","","",null,null],[5,"transmute_copy","","Interprets `src` as `&amp;U`, and then reads `src` without moving the contained\nvalue.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[5,"transmute","","Unsafely transforms a value of one type into a value of another type.",null,{"inputs":[{"name":"t"}],"output":{"name":"u"}}],[0,"nonzero","bitflags::__core","Exposes the NonZero lang item which provides optimization hints.",null,null],[8,"Zeroable","bitflags::__core::nonzero","Unsafe trait to indicate what types are usable with the NonZero struct",null,null],[3,"NonZero","","A wrapper type for raw pointers and integers that will never be\nNULL or 0 that might allow certain optimizations.",null,null],[0,"ptr","bitflags::__core","Raw, unsafe pointers, `*const T`, and `*mut T`.",null,null],[5,"null","bitflags::__core::ptr","Creates a null raw pointer.",null,null],[5,"null_mut","","Creates a null mutable raw pointer.",null,null],[5,"swap","","Swaps the values at two mutable locations of the same type, without\ndeinitializing either. They may overlap, unlike `mem::swap` which is\notherwise equivalent.",null,null],[5,"replace","","Replaces the value at `dest` with `src`, returning the old\nvalue, without dropping either.",null,null],[5,"read","","Reads the value from `src` without moving it. This leaves the\nmemory in `src` unchanged.",null,null],[5,"read_and_drop","","",null,null],[5,"write","","Overwrites a memory location with the given value without reading or\ndropping the old value.",null,null],[5,"read_volatile","","Performs a volatile read of the value from `src` without moving it. This\nleaves the memory in `src` unchanged.",null,null],[5,"write_volatile","","Performs a volatile write of a memory location with the given value without\nreading or dropping the old value.",null,null],[3,"Unique","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper owns the referent. This in turn implies that the\n`Unique&lt;T&gt;` is `Send`/`Sync` if `T` is `Send`/`Sync`, unlike a raw\n`*mut T` (which conveys no particular ownership semantics).  It\nalso implies that the referent of the pointer should not be\nmodified without a unique path to the `Unique` reference. Useful\nfor building abstractions like `Vec&lt;T&gt;` or `Box&lt;T&gt;`, which\ninternally use raw pointers to manage the memory that they own.",null,null],[3,"Shared","","A wrapper around a raw non-null `*mut T` that indicates that the possessor\nof this wrapper has shared ownership of the referent. Useful for\nbuilding abstractions like `Rc&lt;T&gt;` or `Arc&lt;T&gt;`, which internally\nuse raw pointers to manage the memory that they own.",null,null],[5,"write_bytes","","Invokes memset on the specified pointer, setting `count * size_of::&lt;T&gt;()`\nbytes of memory starting at `dst` to `val`.",null,null],[5,"copy_nonoverlapping","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may *not* overlap.",null,null],[5,"drop_in_place","","Executes the destructor (if any) of the pointed-to value.",null,null],[5,"copy","","Copies `count * size_of&lt;T&gt;` bytes from `src` to `dst`. The source\nand destination may overlap.",null,null],[0,"marker","bitflags::__core","Primitive traits and marker types representing basic &#39;kinds&#39; of types.",null,null],[8,"Send","bitflags::__core::marker","Types that can be transferred across thread boundaries.",null,null],[8,"Sized","","Types with a constant size known at compile-time.",null,null],[8,"Unsize","","Types that can be &quot;unsized&quot; to a dynamically sized type.",null,null],[8,"Copy","","Types that can be copied by simply copying bits (i.e. `memcpy`).",null,null],[8,"Sync","","Types that can be safely shared between threads when aliased.",null,null],[3,"PhantomData","","`PhantomData&lt;T&gt;` allows you to describe that a type acts as if it stores a value of type `T`,\neven though it does not. This allows you to inform the compiler about certain safety properties\nof your code.",null,null],[8,"Reflect","","Types that can be reflected over.",null,null],[0,"ops","bitflags::__core","Overloadable operators.",null,null],[8,"Drop","bitflags::__core::ops","The `Drop` trait is used to run some code when a value goes out of scope.\nThis is sometimes called a &#39;destructor&#39;.",null,null],[10,"drop","","A method called when the value goes out of scope.",131,null],[8,"Add","","The `Add` trait is used to specify the functionality of `+`.",null,null],[16,"Output","","The resulting type after applying the `+` operator",140,null],[10,"add","","The method for the `+` operator",140,null],[8,"Sub","","The `Sub` trait is used to specify the functionality of `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",141,null],[10,"sub","","The method for the `-` operator",141,null],[8,"Mul","","The `Mul` trait is used to specify the functionality of `*`.",null,null],[16,"Output","","The resulting type after applying the `*` operator",142,null],[10,"mul","","The method for the `*` operator",142,null],[8,"Div","","The `Div` trait is used to specify the functionality of `/`.",null,null],[16,"Output","","The resulting type after applying the `/` operator",143,null],[10,"div","","The method for the `/` operator",143,null],[8,"Rem","","The `Rem` trait is used to specify the functionality of `%`.",null,null],[16,"Output","","The resulting type after applying the `%` operator",144,null],[10,"rem","","The method for the `%` operator",144,null],[8,"Neg","","The `Neg` trait is used to specify the functionality of unary `-`.",null,null],[16,"Output","","The resulting type after applying the `-` operator",145,null],[10,"neg","","The method for the unary `-` operator",145,null],[8,"Not","","The `Not` trait is used to specify the functionality of unary `!`.",null,null],[16,"Output","","The resulting type after applying the `!` operator",146,null],[10,"not","","The method for the unary `!` operator",146,null],[8,"BitAnd","","The `BitAnd` trait is used to specify the functionality of `&amp;`.",null,null],[16,"Output","","The resulting type after applying the `&amp;` operator",147,null],[10,"bitand","","The method for the `&amp;` operator",147,null],[8,"BitOr","","The `BitOr` trait is used to specify the functionality of `|`.",null,null],[16,"Output","","The resulting type after applying the `|` operator",148,null],[10,"bitor","","The method for the `|` operator",148,null],[8,"BitXor","","The `BitXor` trait is used to specify the functionality of `^`.",null,null],[16,"Output","","The resulting type after applying the `^` operator",149,null],[10,"bitxor","","The method for the `^` operator",149,null],[8,"Shl","","The `Shl` trait is used to specify the functionality of `&lt;&lt;`.",null,null],[16,"Output","","The resulting type after applying the `&lt;&lt;` operator",150,null],[10,"shl","","The method for the `&lt;&lt;` operator",150,null],[8,"Shr","","The `Shr` trait is used to specify the functionality of `&gt;&gt;`.",null,null],[16,"Output","","The resulting type after applying the `&gt;&gt;` operator",151,null],[10,"shr","","The method for the `&gt;&gt;` operator",151,null],[8,"AddAssign","","The `AddAssign` trait is used to specify the functionality of `+=`.",null,null],[10,"add_assign","","The method for the `+=` operator",152,null],[8,"SubAssign","","The `SubAssign` trait is used to specify the functionality of `-=`.",null,null],[10,"sub_assign","","The method for the `-=` operator",153,null],[8,"MulAssign","","The `MulAssign` trait is used to specify the functionality of `*=`.",null,null],[10,"mul_assign","","The method for the `*=` operator",154,null],[8,"DivAssign","","The `DivAssign` trait is used to specify the functionality of `/=`.",null,null],[10,"div_assign","","The method for the `/=` operator",155,null],[8,"RemAssign","","The `RemAssign` trait is used to specify the functionality of `%=`.",null,null],[10,"rem_assign","","The method for the `%=` operator",156,null],[8,"BitAndAssign","","The `BitAndAssign` trait is used to specify the functionality of `&amp;=`.",null,null],[10,"bitand_assign","","The method for the `&amp;` operator",157,null],[8,"BitOrAssign","","The `BitOrAssign` trait is used to specify the functionality of `|=`.",null,null],[10,"bitor_assign","","The method for the `|=` operator",158,null],[8,"BitXorAssign","","The `BitXorAssign` trait is used to specify the functionality of `^=`.",null,null],[10,"bitxor_assign","","The method for the `^=` operator",159,null],[8,"ShlAssign","","The `ShlAssign` trait is used to specify the functionality of `&lt;&lt;=`.",null,null],[10,"shl_assign","","The method for the `&lt;&lt;=` operator",160,null],[8,"ShrAssign","","The `ShrAssign` trait is used to specify the functionality of `&gt;&gt;=`.",null,null],[10,"shr_assign","","The method for the `&gt;&gt;=` operator",161,null],[8,"Index","","The `Index` trait is used to specify the functionality of indexing operations\nlike `arr[idx]` when used in an immutable context.",null,null],[16,"Output","","The returned type after indexing",162,null],[10,"index","","The method for the indexing (`Foo[Bar]`) operation",162,null],[8,"IndexMut","","The `IndexMut` trait is used to specify the functionality of indexing\noperations like `arr[idx]`, when used in a mutable context.",null,null],[10,"index_mut","","The method for the indexing (`Foo[Bar]`) operation",163,null],[3,"RangeFull","","An unbounded range. Use `..` (two dots) for its shorthand.",null,null],[3,"Range","","A (half-open) range which is bounded at both ends: { x | start &lt;= x &lt; end }.\nUse `start..end` (two dots) for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",10,null],[12,"end","","The upper bound of the range (exclusive).",10,null],[3,"RangeFrom","","A range which is only bounded below: { x | start &lt;= x }.\nUse `start..` for its shorthand.",null,null],[12,"start","","The lower bound of the range (inclusive).",11,null],[3,"RangeTo","","A range which is only bounded above: { x | x &lt; end }.\nUse `..end` (two dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (exclusive).",12,null],[4,"RangeInclusive","","An inclusive range which is bounded at both ends: { x | start &lt;= x &lt;= end }.\nUse `start...end` (three dots) for its shorthand.",null,null],[13,"Empty","","Empty range (iteration has finished)",13,null],[12,"at","bitflags::__core::ops::RangeInclusive","",13,null],[13,"NonEmpty","bitflags::__core::ops","Non-empty range (iteration will yield value(s))",13,null],[12,"start","bitflags::__core::ops::RangeInclusive","",13,null],[12,"end","","",13,null],[3,"RangeToInclusive","bitflags::__core::ops","An inclusive range which is only bounded above: { x | x &lt;= end }.\nUse `...end` (three dots) for its shorthand.",null,null],[12,"end","","The upper bound of the range (inclusive)",14,null],[8,"Deref","","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",164,null],[10,"deref","","The method called to dereference a value",164,null],[8,"DerefMut","","The `DerefMut` trait is used to specify the functionality of dereferencing\nmutably like `*v = 1;`",null,null],[10,"deref_mut","","The method called to mutably dereference a value",165,null],[8,"Fn","","A version of the call operator that takes an immutable receiver.",null,null],[10,"call","","This is called when the call operator is used.",133,null],[8,"FnMut","","A version of the call operator that takes a mutable receiver.",null,null],[10,"call_mut","","This is called when the call operator is used.",128,null],[8,"FnOnce","","A version of the call operator that takes a by-value receiver.",null,null],[16,"Output","","The returned type after the call operator is used.",134,null],[10,"call_once","","This is called when the call operator is used.",134,null],[8,"CoerceUnsized","","Trait that indicates that this is a pointer or a wrapper for one,\nwhere unsizing can be performed on the pointee.",null,null],[8,"Place","","Both `in (PLACE) EXPR` and `box EXPR` desugar into expressions\nthat allocate an intermediate &quot;place&quot; that holds uninitialized\nstate.  The desugaring evaluates EXPR, and writes the result at\nthe address returned by the `pointer` method of this trait.",null,null],[10,"pointer","","Returns the address where the input value will be written.\nNote that the data at this address is generally uninitialized,\nand thus one should use `ptr::write` for initializing it.",166,null],[8,"Placer","","Interface to implementations of  `in (PLACE) EXPR`.",null,null],[16,"Place","","`Place` is the intermedate agent guarding the\nuninitialized state for `Data`.",167,null],[10,"make_place","","Creates a fresh place from `self`.",167,null],[8,"InPlace","","Specialization of `Place` trait supporting `in (PLACE) EXPR`.",null,null],[16,"Owner","","`Owner` is the type of the end value of `in (PLACE) EXPR`",168,null],[10,"finalize","","Converts self into the final value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nthe returned instance of `Owner` and forgetting self.",168,null],[8,"Boxed","","Core trait for the `box EXPR` form.",null,null],[16,"Data","","The kind of data that is stored in this kind of box.",169,null],[16,"Place","","The place that will negotiate the storage of the data.",169,null],[10,"finalize","","Converts filled place into final owning value, shifting\ndeallocation/cleanup responsibilities (if any remain), over to\nreturned instance of `Self` and forgetting `filled`.",169,null],[8,"BoxPlace","","Specialization of `Place` trait supporting `box EXPR`.",null,null],[10,"make_place","","Creates a globally fresh place.",170,{"inputs":[],"output":{"name":"self"}}],[0,"cmp","bitflags::__core","Functionality for ordering and comparison.",null,null],[8,"PartialEq","bitflags::__core::cmp","Trait for equality comparisons which are [partial equivalence\nrelations](http://en.wikipedia.org/wiki/Partial_equivalence_relation).",null,null],[10,"eq","","This method tests for `self` and `other` values to be equal, and is used\nby `==`.",122,null],[11,"ne","","This method tests for `!=`.",122,null],[8,"Eq","","Trait for equality comparisons which are [equivalence relations](\nhttps://en.wikipedia.org/wiki/Equivalence_relation).",null,null],[4,"Ordering","","An `Ordering` is the result of a comparison between two values.",null,null],[13,"Less","","An ordering where a compared value is less [than another].",15,null],[13,"Equal","","An ordering where a compared value is equal [to another].",15,null],[13,"Greater","","An ordering where a compared value is greater [than another].",15,null],[8,"Ord","","Trait for types that form a [total order](https://en.wikipedia.org/wiki/Total_order).",null,null],[10,"cmp","","This method returns an `Ordering` between `self` and `other`.",130,null],[8,"PartialOrd","","Trait for values that can be compared for a sort-order.",null,null],[10,"partial_cmp","","This method returns an ordering between `self` and `other` values if one exists.",139,null],[11,"lt","","This method tests less than (for `self` and `other`) and is used by the `&lt;` operator.",139,null],[11,"le","","This method tests less than or equal to (for `self` and `other`) and is used by the `&lt;=`\noperator.",139,null],[11,"gt","","This method tests greater than (for `self` and `other`) and is used by the `&gt;` operator.",139,null],[11,"ge","","This method tests greater than or equal to (for `self` and `other`) and is used by the `&gt;=`\noperator.",139,null],[5,"min","","Compare and return the minimum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[5,"max","","Compare and return the maximum of two values.",null,{"inputs":[{"name":"t"},{"name":"t"}],"output":{"name":"t"}}],[0,"clone","bitflags::__core","The `Clone` trait for types that cannot be &#39;implicitly copied&#39;.",null,null],[8,"Clone","bitflags::__core::clone","A common trait for cloning an object.",null,null],[10,"clone","","Returns a copy of the value.",126,null],[11,"clone_from","","Performs copy-assignment from `source`.",126,null],[0,"default","bitflags::__core","The `Default` trait for types which may have meaningful default values.",null,null],[8,"Default","bitflags::__core::default","A trait for giving a type a useful default value.",null,null],[10,"default","","Returns the &quot;default value&quot; for a type.",129,{"inputs":[],"output":{"name":"self"}}],[0,"convert","bitflags::__core","Traits for conversions between types.",null,null],[8,"AsRef","bitflags::__core::convert","A cheap, reference-to-reference conversion.",null,null],[10,"as_ref","","Performs the conversion.",132,null],[8,"AsMut","","A cheap, mutable reference-to-mutable reference conversion.",null,null],[10,"as_mut","","Performs the conversion.",137,null],[8,"Into","","A conversion that consumes `self`, which may or may not be expensive.",null,null],[10,"into","","Performs the conversion.",123,null],[8,"From","","Construct `Self` via a conversion.",null,null],[10,"from","","Performs the conversion.",125,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[8,"TryInto","","An attempted conversion that consumes `self`, which may or may not be expensive.",null,null],[16,"Err","","The type returned in the event of a conversion error.",171,null],[10,"try_into","","Performs the conversion.",171,null],[8,"TryFrom","","Attempt to construct `Self` via a conversion.",null,null],[16,"Err","","The type returned in the event of a conversion error.",172,null],[10,"try_from","","Performs the conversion.",172,{"inputs":[{"name":"t"}],"output":{"name":"result"}}],[0,"borrow","bitflags::__core","A module for working with borrowed data.",null,null],[8,"Borrow","bitflags::__core::borrow","A trait for borrowing data.",null,null],[10,"borrow","","Immutably borrows from an owned value.",173,null],[8,"BorrowMut","","A trait for mutably borrowing data.",null,null],[10,"borrow_mut","","Mutably borrows from an owned value.",174,null],[0,"any","bitflags::__core","This module implements the `Any` trait, which enables dynamic typing\nof any `&#39;static` type through runtime reflection.",null,null],[8,"Any","bitflags::__core::any","A type to emulate dynamic typing.",null,null],[10,"get_type_id","","Gets the `TypeId` of `self`.",16,null],[3,"TypeId","","A `TypeId` represents a globally unique identifier for a type.",null,null],[0,"array","bitflags::__core","Implementations of things like `Eq` for fixed-length arrays\nup to a certain length. Eventually we should able to generalize\nto all lengths.",null,null],[8,"FixedSizeArray","bitflags::__core::array","Utility trait implemented only on arrays of fixed size",null,null],[10,"as_slice","","Converts the array to immutable slice",175,null],[10,"as_mut_slice","","Converts the array to mutable slice",175,null],[0,"sync","bitflags::__core","Synchronization primitives",null,null],[0,"atomic","bitflags::__core::sync","Atomic types",null,null],[3,"AtomicBool","bitflags::__core::sync::atomic","A boolean type which can be safely shared between threads.",null,null],[3,"AtomicPtr","","A raw pointer type which can be safely shared between threads.",null,null],[4,"Ordering","","Atomic memory orderings",null,null],[13,"Relaxed","","No ordering constraints, only atomic operations. Corresponds to LLVM&#39;s\n`Monotonic` ordering.",20,null],[13,"Release","","When coupled with a store, all previous writes become visible\nto the other threads that perform a load with `Acquire` ordering\non the same value.",20,null],[13,"Acquire","","When coupled with a load, all subsequent loads will see data\nwritten before a store with `Release` ordering on the same value\nin other threads.",20,null],[13,"AcqRel","","When coupled with a load, uses `Acquire` ordering, and with a store\n`Release` ordering.",20,null],[13,"SeqCst","","Like `AcqRel` with the additional guarantee that all threads see all\nsequentially consistent operations in the same order.",20,null],[17,"ATOMIC_BOOL_INIT","","An `AtomicBool` initialized to `false`.",null,null],[3,"AtomicI8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU8","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U8_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU16","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U16_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU32","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U32_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicI64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_I64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicU64","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_U64_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicIsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_ISIZE_INIT","","An atomic integer initialized to `0`.",null,null],[3,"AtomicUsize","","An integer type which can be safely shared between threads.",null,null],[17,"ATOMIC_USIZE_INIT","","An atomic integer initialized to `0`.",null,null],[5,"fence","","An atomic fence.",null,null],[0,"cell","bitflags::__core","Shareable mutable containers.",null,null],[3,"Cell","bitflags::__core::cell","A mutable memory location that admits only `Copy` data.",null,null],[3,"RefCell","","A mutable memory location with dynamically checked borrow rules",null,null],[4,"BorrowState","","An enumeration of values returned from the `state` method on a `RefCell&lt;T&gt;`.",null,null],[13,"Reading","","The cell is currently being read, there is at least one active `borrow`.",32,null],[13,"Writing","","The cell is currently being written to, there is an active `borrow_mut`.",32,null],[13,"Unused","","There are no outstanding borrows on this cell.",32,null],[3,"Ref","","Wraps a borrowed reference to a value in a `RefCell` box.\nA wrapper type for an immutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"RefMut","","A wrapper type for a mutably borrowed value from a `RefCell&lt;T&gt;`.",null,null],[3,"UnsafeCell","","The core primitive for interior mutability in Rust.",null,null],[0,"char","bitflags::__core","Character manipulation.",null,null],[17,"MAX","bitflags::__core::char","The highest valid code point a `char` can have.",null,null],[5,"from_u32","","Converts a `u32` to a `char`.",null,{"inputs":[{"name":"u32"}],"output":{"name":"option"}}],[5,"from_u32_unchecked","","Converts a `u32` to a `char`, ignoring validity.",null,{"inputs":[{"name":"u32"}],"output":{"name":"char"}}],[5,"from_digit","","Converts a digit in the given radix to a `char`.",null,{"inputs":[{"name":"u32"},{"name":"u32"}],"output":{"name":"option"}}],[3,"EscapeUnicode","","Returns an iterator that yields the hexadecimal Unicode escape of a\ncharacter, as `char`s.",null,null],[3,"EscapeDefault","","An iterator that yields the literal escape code of a `char`.",null,null],[3,"EncodeUtf8","","An iterator over `u8` entries represending the UTF-8 encoding of a `char`\nvalue.",null,null],[3,"EncodeUtf16","","An iterator over `u16` entries represending the UTF-16 encoding of a `char`\nvalue.",null,null],[0,"panicking","bitflags::__core","Panic support for libcore",null,null],[5,"panic","bitflags::__core::panicking","",null,null],[5,"panic_fmt","","",null,null],[0,"iter","bitflags::__core","Composable external iteration.",null,null],[3,"Rev","bitflags::__core::iter","An double-ended iterator with the direction inverted.",null,null],[3,"Cloned","","An iterator that clones the elements of an underlying iterator.",null,null],[3,"Cycle","","An iterator that repeats endlessly.",null,null],[3,"Chain","","An iterator that strings two iterators together.",null,null],[3,"Zip","","An iterator that iterates two other iterators simultaneously.",null,null],[3,"Map","","An iterator that maps the values of `iter` with `f`.",null,null],[3,"Filter","","An iterator that filters the elements of `iter` with `predicate`.",null,null],[3,"FilterMap","","An iterator that uses `f` to both filter and map elements from `iter`.",null,null],[3,"Enumerate","","An iterator that yields the current count and the element during iteration.",null,null],[3,"Peekable","","An iterator with a `peek()` that returns an optional reference to the next\nelement.",null,null],[3,"SkipWhile","","An iterator that rejects elements while `predicate` is true.",null,null],[3,"TakeWhile","","An iterator that only accepts elements while `predicate` is true.",null,null],[3,"Skip","","An iterator that skips over `n` elements of `iter`.",null,null],[3,"Take","","An iterator that only iterates over the first `n` iterations of `iter`.",null,null],[3,"Scan","","An iterator to maintain state while iterating another iterator.",null,null],[3,"FlatMap","","An iterator that maps each element to an iterator, and yields the elements\nof the produced iterators.",null,null],[3,"Fuse","","An iterator that yields `None` forever after the underlying iterator\nyields `None` once.",null,null],[3,"Inspect","","An iterator that calls a function with a reference to each element before\nyielding it.",null,null],[8,"Iterator","","An interface for dealing with iterators.",null,null],[16,"Item","","The type of the elements being iterated over.",121,null],[10,"next","","Advances the iterator and returns the next value.",121,null],[11,"size_hint","","Returns the bounds on the remaining length of the iterator.",121,null],[11,"count","","Consumes the iterator, counting the number of iterations and returning it.",121,null],[11,"last","","Consumes the iterator, returning the last element.",121,null],[11,"nth","","Consumes the `n` first elements of the iterator, then returns the\n`next()` one.",121,null],[11,"chain","","Takes two iterators and creates a new iterator over both in sequence.",121,null],[11,"zip","","&#39;Zips up&#39; two iterators into a single iterator of pairs.",121,null],[11,"map","","Takes a closure and creates an iterator which calls that closure on each\nelement.",121,null],[11,"filter","","Creates an iterator which uses a closure to determine if an element\nshould be yielded.",121,null],[11,"filter_map","","Creates an iterator that both filters and maps.",121,null],[11,"enumerate","","Creates an iterator which gives the current iteration count as well as\nthe next value.",121,null],[11,"peekable","","Creates an iterator which can use `peek` to look at the next element of\nthe iterator without consuming it.",121,null],[11,"skip_while","","Creates an iterator that [`skip()`]s elements based on a predicate.",121,null],[11,"take_while","","Creates an iterator that yields elements based on a predicate.",121,null],[11,"skip","","Creates an iterator that skips the first `n` elements.",121,null],[11,"take","","Creates an iterator that yields its first `n` elements.",121,null],[11,"scan","","An iterator adaptor similar to [`fold()`] that holds internal state and\nproduces a new iterator.",121,null],[11,"flat_map","","Creates an iterator that works like map, but flattens nested structure.",121,null],[11,"fuse","","Creates an iterator which ends after the first `None`.",121,null],[11,"inspect","","Do something with each element of an iterator, passing the value on.",121,null],[11,"by_ref","","Borrows an iterator, rather than consuming it.",121,null],[11,"collect","","Transforms an iterator into a collection.",121,null],[11,"partition","","Consumes an iterator, creating two collections from it.",121,null],[11,"fold","","An iterator adaptor that applies a function, producing a single, final value.",121,null],[11,"all","","Tests if every element of the iterator matches a predicate.",121,null],[11,"any","","Tests if any element of the iterator matches a predicate.",121,null],[11,"find","","Searches for an element of an iterator that satisfies a predicate.",121,null],[11,"position","","Searches for an element in an iterator, returning its index.",121,null],[11,"rposition","","Searches for an element in an iterator from the right, returning its\nindex.",121,null],[11,"max","","Returns the maximum element of an iterator.",121,null],[11,"min","","Returns the minimum element of an iterator.",121,null],[11,"max_by_key","","Returns the element that gives the maximum value from the\nspecified function.",121,null],[11,"min_by_key","","Returns the element that gives the minimum value from the\nspecified function.",121,null],[11,"rev","","Reverses an iterator&#39;s direction.",121,null],[11,"unzip","","Converts an iterator of pairs into a pair of containers.",121,null],[11,"cloned","","Creates an iterator which `clone()`s all of its elements.",121,null],[11,"cycle","","Repeats an iterator endlessly.",121,null],[11,"sum","","Sums the elements of an iterator.",121,null],[11,"product","","Iterates over the entire iterator, multiplying all the elements",121,null],[11,"cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",121,null],[11,"partial_cmp","","Lexicographically compares the elements of this `Iterator` with those\nof another.",121,null],[11,"eq","","Determines if the elements of this `Iterator` are equal to those of\nanother.",121,null],[11,"ne","","Determines if the elements of this `Iterator` are unequal to those of\nanother.",121,null],[11,"lt","","Determines if the elements of this `Iterator` are lexicographically\nless than those of another.",121,null],[11,"le","","Determines if the elements of this `Iterator` are lexicographically\nless or equal to those of another.",121,null],[11,"gt","","Determines if the elements of this `Iterator` are lexicographically\ngreater than those of another.",121,null],[11,"ge","","Determines if the elements of this `Iterator` are lexicographically\ngreater than or equal to those of another.",121,null],[3,"Repeat","","An iterator that repeats an element endlessly.",null,null],[8,"ExactSizeIterator","","An iterator that knows its exact length.",null,null],[11,"len","","Returns the exact number of times the iterator will iterate.",135,null],[8,"Step","","Objects that can be stepped over in both directions.",null,null],[10,"step","","Steps `self` if possible.",176,null],[10,"steps_between","","Returns the number of steps between two step objects. The count is\ninclusive of `start` and exclusive of `end`.",176,{"inputs":[{"name":"self"},{"name":"self"},{"name":"self"}],"output":{"name":"option"}}],[3,"Once","","An iterator that yields an element exactly once.",null,null],[8,"DoubleEndedIterator","","An iterator able to yield elements from both ends.",null,null],[10,"next_back","","An iterator able to yield elements from both ends.",136,null],[8,"Extend","","Extend a collection with the contents of an iterator.",null,null],[10,"extend","","Extends a collection with the contents of an iterator.",124,null],[5,"once","","Creates an iterator that yields an element exactly once.",null,{"inputs":[{"name":"t"}],"output":{"name":"once"}}],[8,"IntoIterator","","Conversion into an `Iterator`.",null,null],[16,"Item","","The type of the elements being iterated over.",127,null],[16,"IntoIter","","Which kind of iterator are we turning this into?",127,null],[10,"into_iter","","Creates an iterator from a value.",127,null],[8,"FromIterator","","Conversion from an `Iterator`.",null,null],[10,"from_iter","","Creates a value from an iterator.",177,{"inputs":[{"name":"t"}],"output":{"name":"self"}}],[5,"repeat","","Creates a new iterator that endlessly repeats a single element.",null,{"inputs":[{"name":"t"}],"output":{"name":"repeat"}}],[3,"Empty","","An iterator that yields nothing.",null,null],[3,"StepBy","","An adapter for stepping range iterators by a custom amount.",null,null],[5,"empty","","Creates an iterator that yields nothing.",null,{"inputs":[],"output":{"name":"empty"}}],[0,"option","bitflags::__core","Optional values.",null,null],[4,"Option","bitflags::__core::option","The `Option` type. See [the module level documentation](index.html) for more.",null,null],[13,"None","","No value",63,null],[13,"Some","","Some value `T`",63,null],[3,"Iter","","An iterator over a reference of the contained item in an Option.",null,null],[3,"IterMut","","An iterator over a mutable reference of the contained item in an Option.",null,null],[3,"IntoIter","","An iterator over the item contained inside an Option.",null,null],[0,"raw","bitflags::__core","Contains struct definitions for the layout of compiler built-in types.",null,null],[3,"Slice","bitflags::__core::raw","The representation of a slice like `&amp;[T]`.",null,null],[12,"data","","",67,null],[12,"len","","",67,null],[3,"TraitObject","","The representation of a trait object like `&amp;SomeTrait`.",null,null],[12,"data","","",68,null],[12,"vtable","","",68,null],[8,"Repr","","This trait is meant to map equivalences between raw structs and their\ncorresponding rust values.",null,null],[11,"repr","","This function &quot;unwraps&quot; a rust value (without consuming it) into its raw\nstruct representation. This can be used to read/write different values\nfor the struct. This is a safe method because by default it does not\nenable write-access to the fields of the return value in safe code.",178,null],[0,"result","bitflags::__core","Error handling with the `Result` type.",null,null],[4,"Result","bitflags::__core::result","`Result` is a type that represents either success (`Ok`) or failure (`Err`).",null,null],[13,"Ok","","Contains the success value",69,null],[13,"Err","","Contains the error value",69,null],[3,"Iter","","An iterator over a reference to the `Ok` variant of a `Result`.",null,null],[3,"IterMut","","An iterator over a mutable reference to the `Ok` variant of a `Result`.",null,null],[3,"IntoIter","","An iterator over the value in a `Ok` variant of a `Result`.",null,null],[0,"slice","bitflags::__core","Slice management and manipulation",null,null],[8,"SliceExt","bitflags::__core::slice","Extension methods for slices.",null,null],[16,"Item","","",138,null],[10,"split_at","","",138,null],[10,"iter","","",138,null],[10,"split","","",138,null],[10,"splitn","","",138,null],[10,"rsplitn","","",138,null],[10,"windows","","",138,null],[10,"chunks","","",138,null],[10,"get","","",138,null],[10,"first","","",138,null],[10,"split_first","","",138,null],[10,"split_last","","",138,null],[10,"last","","",138,null],[10,"get_unchecked","","",138,null],[10,"as_ptr","","",138,null],[10,"binary_search","","",138,null],[10,"binary_search_by","","",138,null],[10,"binary_search_by_key","","",138,null],[10,"len","","",138,null],[11,"is_empty","","",138,null],[10,"get_mut","","",138,null],[10,"iter_mut","","",138,null],[10,"first_mut","","",138,null],[10,"split_first_mut","","",138,null],[10,"split_last_mut","","",138,null],[10,"last_mut","","",138,null],[10,"split_mut","","",138,null],[10,"splitn_mut","","",138,null],[10,"rsplitn_mut","","",138,null],[10,"chunks_mut","","",138,null],[10,"swap","","",138,null],[10,"split_at_mut","","",138,null],[10,"reverse","","",138,null],[10,"get_unchecked_mut","","",138,null],[10,"as_mut_ptr","","",138,null],[10,"contains","","",138,null],[10,"starts_with","","",138,null],[10,"ends_with","","",138,null],[10,"clone_from_slice","","",138,null],[10,"copy_from_slice","","",138,null],[3,"Iter","","Immutable slice iterator",null,null],[3,"IterMut","","Mutable slice iterator.",null,null],[3,"Split","","An iterator over subslices separated by elements that match a predicate\nfunction.",null,null],[3,"SplitMut","","An iterator over the subslices of the vector which are separated\nby elements that match `pred`.",null,null],[3,"SplitN","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitN","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"SplitNMut","","An iterator over subslices separated by elements that match a predicate\nfunction, limited to a given number of splits.",null,null],[3,"RSplitNMut","","An iterator over subslices separated by elements that match a\npredicate function, limited to a given number of splits, starting\nfrom the end of the slice.",null,null],[3,"Windows","","An iterator over overlapping subslices of length `size`.",null,null],[3,"Chunks","","An iterator over a slice in (non-overlapping) chunks (`size` elements at a\ntime).",null,null],[3,"ChunksMut","","An iterator over a slice in (non-overlapping) mutable chunks (`size`\nelements at a time). When the slice len is not evenly divided by the chunk\nsize, the last slice of the iteration will be the remainder.",null,null],[5,"from_raw_parts","","Forms a slice from a pointer and a length.",null,null],[5,"from_raw_parts_mut","","Performs the same functionality as `from_raw_parts`, except that a mutable\nslice is returned.",null,null],[0,"str","bitflags::__core","String manipulation",null,null],[0,"pattern","bitflags::__core::str","The string Pattern API.",null,null],[8,"Pattern","bitflags::__core::str::pattern","A string pattern.",null,null],[16,"Searcher","","Associated searcher for this pattern",179,null],[10,"into_searcher","","Constructs the associated searcher from\n`self` and the `haystack` to search in.",179,null],[11,"is_contained_in","","Checks whether the pattern matches anywhere in the haystack",179,null],[11,"is_prefix_of","","Checks whether the pattern matches at the front of the haystack",179,null],[11,"is_suffix_of","","Checks whether the pattern matches at the back of the haystack",179,null],[4,"SearchStep","","Result of calling `Searcher::next()` or `ReverseSearcher::next_back()`.",null,null],[13,"Match","","Expresses that a match of the pattern has been found at\n`haystack[a..b]`.",84,null],[13,"Reject","","Expresses that `haystack[a..b]` has been rejected as a possible match\nof the pattern.",84,null],[13,"Done","","Expresses that every byte of the haystack has been visted, ending\nthe iteration.",84,null],[8,"Searcher","","A searcher for a string pattern.",null,null],[10,"haystack","","Getter for the underlaying string to be searched in",180,null],[10,"next","","Performs the next search step starting from the front.",180,null],[11,"next_match","","Find the next `Match` result. See `next()`",180,null],[11,"next_reject","","Find the next `Reject` result. See `next()`",180,null],[8,"ReverseSearcher","","A reverse searcher for a string pattern.",null,null],[10,"next_back","","Performs the next search step starting from the back.",181,null],[11,"next_match_back","","Find the next `Match` result. See `next_back()`",181,null],[11,"next_reject_back","","Find the next `Reject` result. See `next_back()`",181,null],[8,"DoubleEndedSearcher","","A marker trait to express that a `ReverseSearcher`\ncan be used for a `DoubleEndedIterator` implementation.",null,null],[3,"CharSearcher","","Associated type for `&lt;char as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharSliceSearcher","","Associated type for `&lt;&amp;[char] as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"CharPredicateSearcher","","Associated type for `&lt;F as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[3,"StrSearcher","","Associated type for `&lt;&amp;str as Pattern&lt;&#39;a&gt;&gt;::Searcher`.",null,null],[8,"FromStr","bitflags::__core::str","A trait to abstract the idea of creating a new instance of a type from a\nstring.",null,null],[16,"Err","","The associated error which can be returned from parsing.",182,null],[10,"from_str","","Parses a string `s` to return a value of this type.",182,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[3,"ParseBoolError","","An error returned when parsing a `bool` from a string fails.",null,null],[3,"Utf8Error","","Errors which can occur when attempting to interpret a sequence of `u8`\nas a string.",null,null],[5,"from_utf8","","Converts a slice of bytes to a string slice.",null,null],[5,"from_utf8_unchecked","","Converts a slice of bytes to a string slice without checking\nthat the string contains valid UTF-8.",null,null],[3,"Chars","","Iterator for the char (representing *Unicode Scalar Values*) of a string",null,null],[5,"next_code_point","","Reads the next code point out of a byte iterator (assuming a\nUTF-8-like encoding).",null,{"inputs":[{"name":"iter"}],"output":{"name":"option"}}],[3,"CharIndices","","Iterator for a string&#39;s characters and their byte offsets.",null,null],[3,"Bytes","","External iterator for a string&#39;s bytes.\nUse with the `std::iter` module.",null,null],[3,"Split","","Created with the method [`split()`].",null,null],[3,"RSplit","","Created with the method [`rsplit()`].",null,null],[3,"SplitTerminator","","Created with the method [`split_terminator()`].",null,null],[3,"RSplitTerminator","","Created with the method [`rsplit_terminator()`].",null,null],[3,"SplitN","","Created with the method [`splitn()`].",null,null],[3,"RSplitN","","Created with the method [`rsplitn()`].",null,null],[3,"MatchIndices","","Created with the method [`match_indices()`].",null,null],[3,"RMatchIndices","","Created with the method [`rmatch_indices()`].",null,null],[3,"Matches","","Created with the method [`matches()`].",null,null],[3,"RMatches","","Created with the method [`rmatches()`].",null,null],[3,"Lines","","Created with the method [`lines()`].",null,null],[3,"LinesAny","","Created with the method [`lines_any()`].",null,null],[3,"CharRange","","Struct that contains a `char` and the index of the first byte of\nthe next `char` in a string.  This can be used as a data structure\nfor iterating over the UTF-8 bytes of a string.",null,null],[12,"ch","","Current `char`",106,null],[12,"next","","Index of the first byte of the next `char`",106,null],[0,"hash","bitflags::__core","Generic hashing support.",null,null],[8,"Hash","bitflags::__core::hash","A hashable type.",null,null],[10,"hash","","Feeds this value into the state given, updating the hasher as necessary.",183,null],[11,"hash_slice","","Feeds a slice of this type into the state provided.",183,null],[8,"Hasher","","A trait which represents the ability to hash an arbitrary stream of bytes.",null,null],[10,"finish","","Completes a round of hashing, producing the output hash generated.",184,null],[10,"write","","Writes some data into this `Hasher`",184,null],[11,"write_u8","","Write a single `u8` into this hasher",184,null],[11,"write_u16","","Write a single `u16` into this hasher.",184,null],[11,"write_u32","","Write a single `u32` into this hasher.",184,null],[11,"write_u64","","Write a single `u64` into this hasher.",184,null],[11,"write_usize","","Write a single `usize` into this hasher.",184,null],[11,"write_i8","","Write a single `i8` into this hasher.",184,null],[11,"write_i16","","Write a single `i16` into this hasher.",184,null],[11,"write_i32","","Write a single `i32` into this hasher.",184,null],[11,"write_i64","","Write a single `i64` into this hasher.",184,null],[11,"write_isize","","Write a single `isize` into this hasher.",184,null],[8,"BuildHasher","","A `BuildHasher` is typically used as a factory for instances of `Hasher`\nwhich a `HashMap` can then use to hash keys independently.",null,null],[16,"Hasher","","Type of the hasher that will be created.",185,null],[10,"build_hasher","","Creates a new hasher.",185,null],[3,"BuildHasherDefault","","A structure which implements `BuildHasher` for all `Hasher` types which also\nimplement `Default`.",null,null],[3,"SipHasher","","An implementation of SipHash 2-4.",null,null],[0,"fmt","bitflags::__core","Utilities for formatting and printing strings.",null,null],[4,"Alignment","bitflags::__core::fmt","Possible alignments returned by `Formatter::align`",null,null],[13,"Left","","Indication that contents should be left-aligned.",109,null],[13,"Right","","Indication that contents should be right-aligned.",109,null],[13,"Center","","Indication that contents should be center-aligned.",109,null],[13,"Unknown","","No alignment was requested.",109,null],[6,"Result","","",null,null],[3,"Error","","The error type which is returned from formatting a message into a stream.",null,null],[8,"Write","","A collection of methods that are required to format a message into a stream.",null,null],[10,"write_str","","Writes a slice of bytes into this writer, returning whether the write\nsucceeded.",186,null],[11,"write_char","","Writes a `char` into this writer, returning whether the write succeeded.",186,null],[11,"write_fmt","","Glue for usage of the `write!` macro with implementors of this trait.",186,null],[3,"Formatter","","A struct to represent both where to emit formatting strings to and how they\nshould be formatted. A mutable version of this is passed to all formatting\ntraits.",null,null],[3,"Arguments","","This structure represents a safely precompiled version of a format string\nand its arguments. This cannot be generated at runtime because it cannot\nsafely be done so, so no constructors are given and the fields are private\nto prevent modification.",null,null],[8,"Debug","","Format trait for the `?` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",187,null],[8,"Display","","Format trait for an empty format, `{}`.",null,null],[10,"fmt","","Formats the value using the given formatter.",188,null],[8,"Octal","","Format trait for the `o` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",189,null],[8,"Binary","","Format trait for the `b` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",190,null],[8,"LowerHex","","Format trait for the `x` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",191,null],[8,"UpperHex","","Format trait for the `X` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",192,null],[8,"Pointer","","Format trait for the `p` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",193,null],[8,"LowerExp","","Format trait for the `e` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",194,null],[8,"UpperExp","","Format trait for the `E` character.",null,null],[10,"fmt","","Formats the value using the given formatter.",195,null],[5,"write","","The `write` function takes an output stream, a precompiled format string,\nand a list of arguments. The arguments will be formatted according to the\nspecified format string into the output stream provided.",null,{"inputs":[{"name":"write"},{"name":"arguments"}],"output":{"name":"result"}}],[3,"DebugMap","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugList","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugStruct","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugSet","","A struct to help with `fmt::Debug` implementations.",null,null],[3,"DebugTuple","","A struct to help with `fmt::Debug` implementations.",null,null],[14,"bitflags!","bitflags","The `bitflags!` macro generates a `struct` that holds a set of C-style\nbitmask flags. It is useful for creating typesafe wrappers for C APIs.",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"RawFloat"],[8,"Zero"],[8,"One"],[8,"Iterator"],[8,"PartialEq"],[8,"Into"],[8,"Extend"],[8,"From"],[8,"Clone"],[8,"IntoIterator"],[8,"FnMut"],[8,"Default"],[8,"Ord"],[8,"Drop"],[8,"AsRef"],[8,"Fn"],[8,"FnOnce"],[8,"ExactSizeIterator"],[8,"DoubleEndedIterator"],[8,"AsMut"],[8,"SliceExt"],[8,"PartialOrd"],[8,"Add"],[8,"Sub"],[8,"Mul"],[8,"Div"],[8,"Rem"],[8,"Neg"],[8,"Not"],[8,"BitAnd"],[8,"BitOr"],[8,"BitXor"],[8,"Shl"],[8,"Shr"],[8,"AddAssign"],[8,"SubAssign"],[8,"MulAssign"],[8,"DivAssign"],[8,"RemAssign"],[8,"BitAndAssign"],[8,"BitOrAssign"],[8,"BitXorAssign"],[8,"ShlAssign"],[8,"ShrAssign"],[8,"Index"],[8,"IndexMut"],[8,"Deref"],[8,"DerefMut"],[8,"Place"],[8,"Placer"],[8,"InPlace"],[8,"Boxed"],[8,"BoxPlace"],[8,"TryInto"],[8,"TryFrom"],[8,"Borrow"],[8,"BorrowMut"],[8,"FixedSizeArray"],[8,"Step"],[8,"FromIterator"],[8,"Repr"],[8,"Pattern"],[8,"Searcher"],[8,"ReverseSearcher"],[8,"FromStr"],[8,"Hash"],[8,"Hasher"],[8,"BuildHasher"],[8,"Write"],[8,"Debug"],[8,"Display"],[8,"Octal"],[8,"Binary"],[8,"LowerHex"],[8,"UpperHex"],[8,"Pointer"],[8,"LowerExp"],[8,"UpperExp"]]};
searchIndex["lazy_static"] = {"doc":"A macro for declaring lazily evaluated statics.","items":[[11,"hash","core::num","",0,null],[11,"default","","",0,{"inputs":[],"output":{"name":"wrapping"}}],[11,"clone","","",0,null],[11,"cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"lt","","",0,null],[11,"le","","",0,null],[11,"gt","","",0,null],[11,"ge","","",0,null],[11,"eq","","",0,null],[11,"ne","","",0,null],[11,"fmt","","",0,null],[11,"fmt","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"shl","","",0,null],[11,"shl_assign","","",0,null],[11,"shr","","",0,null],[11,"shr_assign","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"add","","",0,null],[11,"add_assign","","",0,null],[11,"sub","","",0,null],[11,"sub_assign","","",0,null],[11,"mul","","",0,null],[11,"mul_assign","","",0,null],[11,"div","","",0,null],[11,"div_assign","","",0,null],[11,"rem","","",0,null],[11,"rem_assign","","",0,null],[11,"not","","",0,null],[11,"bitxor","","",0,null],[11,"bitxor_assign","","",0,null],[11,"bitor","","",0,null],[11,"bitor_assign","","",0,null],[11,"bitand","","",0,null],[11,"bitand_assign","","",0,null],[11,"neg","","",0,null],[11,"eq","core::num::dec2flt","",1,null],[11,"ne","","",1,null],[11,"clone","","",1,null],[11,"fmt","","",1,null],[11,"fmt","","",1,null],[11,"fmt","core::num","",2,null],[11,"eq","","",2,null],[11,"clone","","",2,null],[11,"clone","","",3,null],[11,"fmt","","",3,null],[11,"fmt","","",3,null],[11,"eq","","",4,null],[11,"ne","","",4,null],[11,"clone","","",4,null],[11,"fmt","","",4,null],[11,"fmt","","",4,null],[11,"hash","core::nonzero","",5,null],[11,"fmt","","",5,null],[11,"partial_cmp","","",5,null],[11,"lt","","",5,null],[11,"le","","",5,null],[11,"gt","","",5,null],[11,"ge","","",5,null],[11,"cmp","","",5,null],[11,"eq","","",5,null],[11,"ne","","",5,null],[11,"clone","","",5,null],[11,"new","","Creates an instance of NonZero with the provided value.\nYou must indeed ensure that the value is actually &quot;non-zero&quot;.",5,{"inputs":[{"name":"t"}],"output":{"name":"nonzero"}}],[11,"deref","","",5,null],[11,"new","core::ptr","Creates a new `Unique`.",6,null],[11,"get","","Dereferences the content.",6,null],[11,"get_mut","","Mutably dereferences the content.",6,null],[11,"deref","","",6,null],[11,"fmt","","",6,null],[11,"new","","Creates a new `Shared`.",7,null],[11,"clone","","",7,null],[11,"deref","","",7,null],[11,"fmt","","",7,null],[11,"hash","core::marker","",8,null],[11,"eq","","",8,null],[11,"partial_cmp","","",8,null],[11,"cmp","","",8,null],[11,"clone","","",8,null],[11,"default","","",8,{"inputs":[],"output":{"name":"phantomdata"}}],[11,"eq","core::ops","",9,null],[11,"clone","","",9,null],[11,"fmt","","",9,null],[11,"eq","","",10,null],[11,"ne","","",10,null],[11,"clone","","",10,null],[11,"fmt","","",10,null],[11,"contains","","# Examples",10,null],[11,"eq","","",11,null],[11,"ne","","",11,null],[11,"clone","","",11,null],[11,"fmt","","",11,null],[11,"contains","","# Examples",11,null],[11,"eq","","",12,null],[11,"ne","","",12,null],[11,"clone","","",12,null],[11,"fmt","","",12,null],[11,"contains","","# Examples",12,null],[11,"eq","","",13,null],[11,"ne","","",13,null],[11,"clone","","",13,null],[11,"fmt","","",13,null],[11,"from","","",13,{"inputs":[{"name":"range"}],"output":{"name":"rangeinclusive"}}],[11,"contains","","# Examples",13,null],[11,"eq","","",14,null],[11,"ne","","",14,null],[11,"clone","","",14,null],[11,"fmt","","",14,null],[11,"contains","","# Examples",14,null],[11,"hash","core::cmp","",15,null],[11,"fmt","","",15,null],[11,"eq","","",15,null],[11,"clone","","",15,null],[11,"reverse","","Reverse the `Ordering`.",15,null],[11,"cmp","","",15,null],[11,"partial_cmp","","",15,null],[11,"fmt","","",16,null],[11,"fmt","","",16,null],[11,"is","","Returns true if the boxed type is the same as `T`",16,null],[11,"downcast_ref","","Returns some reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"downcast_mut","","Returns some mutable reference to the boxed value if it is of type `T`, or\n`None` if it isn&#39;t.",16,null],[11,"is","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_ref","","Forwards to the method defined on the type `Any`.",16,null],[11,"downcast_mut","","Forwards to the method defined on the type `Any`.",16,null],[11,"hash","core::any","",17,null],[11,"fmt","","",17,null],[11,"eq","","",17,null],[11,"ne","","",17,null],[11,"clone","","",17,null],[11,"of","","Returns the `TypeId` of the type this generic function has been\ninstantiated with",17,{"inputs":[],"output":{"name":"typeid"}}],[11,"default","core::sync::atomic","",18,{"inputs":[],"output":{"name":"atomicbool"}}],[11,"default","","",19,{"inputs":[],"output":{"name":"atomicptr"}}],[11,"fmt","","",20,null],[11,"clone","","",20,null],[11,"new","","Creates a new `AtomicBool`.",18,{"inputs":[{"name":"bool"}],"output":{"name":"atomicbool"}}],[11,"load","","Loads a value from the bool.",18,null],[11,"store","","Stores a value into the bool.",18,null],[11,"swap","","Stores a value into the bool, returning the old value.",18,null],[11,"compare_and_swap","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"compare_exchange_weak","","Stores a value into the `bool` if the current value is the same as the `current` value.",18,null],[11,"fetch_and","","Logical &quot;and&quot; with a boolean value.",18,null],[11,"fetch_nand","","Logical &quot;nand&quot; with a boolean value.",18,null],[11,"fetch_or","","Logical &quot;or&quot; with a boolean value.",18,null],[11,"fetch_xor","","Logical &quot;xor&quot; with a boolean value.",18,null],[11,"new","","Creates a new `AtomicPtr`.",19,null],[11,"load","","Loads a value from the pointer.",19,null],[11,"store","","Stores a value into the pointer.",19,null],[11,"swap","","Stores a value into the pointer, returning the old value.",19,null],[11,"compare_and_swap","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"compare_exchange_weak","","Stores a value into the pointer if the current value is the same as the `current` value.",19,null],[11,"default","","",21,{"inputs":[],"output":{"name":"atomici8"}}],[11,"fmt","","",21,null],[11,"new","","Creates a new atomic integer.",21,{"inputs":[{"name":"i8"}],"output":{"name":"atomici8"}}],[11,"load","","Loads a value from the atomic integer.",21,null],[11,"store","","Stores a value into the atomic integer.",21,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",21,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",21,null],[11,"fetch_add","","Add to the current value, returning the previous value.",21,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",21,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",21,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",21,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",21,null],[11,"default","","",22,{"inputs":[],"output":{"name":"atomicu8"}}],[11,"fmt","","",22,null],[11,"new","","Creates a new atomic integer.",22,{"inputs":[{"name":"u8"}],"output":{"name":"atomicu8"}}],[11,"load","","Loads a value from the atomic integer.",22,null],[11,"store","","Stores a value into the atomic integer.",22,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",22,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",22,null],[11,"fetch_add","","Add to the current value, returning the previous value.",22,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",22,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",22,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",22,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",22,null],[11,"default","","",23,{"inputs":[],"output":{"name":"atomici16"}}],[11,"fmt","","",23,null],[11,"new","","Creates a new atomic integer.",23,{"inputs":[{"name":"i16"}],"output":{"name":"atomici16"}}],[11,"load","","Loads a value from the atomic integer.",23,null],[11,"store","","Stores a value into the atomic integer.",23,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",23,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",23,null],[11,"fetch_add","","Add to the current value, returning the previous value.",23,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",23,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",23,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",23,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",23,null],[11,"default","","",24,{"inputs":[],"output":{"name":"atomicu16"}}],[11,"fmt","","",24,null],[11,"new","","Creates a new atomic integer.",24,{"inputs":[{"name":"u16"}],"output":{"name":"atomicu16"}}],[11,"load","","Loads a value from the atomic integer.",24,null],[11,"store","","Stores a value into the atomic integer.",24,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",24,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",24,null],[11,"fetch_add","","Add to the current value, returning the previous value.",24,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",24,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",24,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",24,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",24,null],[11,"default","","",25,{"inputs":[],"output":{"name":"atomici32"}}],[11,"fmt","","",25,null],[11,"new","","Creates a new atomic integer.",25,{"inputs":[{"name":"i32"}],"output":{"name":"atomici32"}}],[11,"load","","Loads a value from the atomic integer.",25,null],[11,"store","","Stores a value into the atomic integer.",25,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",25,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",25,null],[11,"fetch_add","","Add to the current value, returning the previous value.",25,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",25,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",25,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",25,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",25,null],[11,"default","","",26,{"inputs":[],"output":{"name":"atomicu32"}}],[11,"fmt","","",26,null],[11,"new","","Creates a new atomic integer.",26,{"inputs":[{"name":"u32"}],"output":{"name":"atomicu32"}}],[11,"load","","Loads a value from the atomic integer.",26,null],[11,"store","","Stores a value into the atomic integer.",26,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",26,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",26,null],[11,"fetch_add","","Add to the current value, returning the previous value.",26,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",26,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",26,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",26,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",26,null],[11,"default","","",27,{"inputs":[],"output":{"name":"atomici64"}}],[11,"fmt","","",27,null],[11,"new","","Creates a new atomic integer.",27,{"inputs":[{"name":"i64"}],"output":{"name":"atomici64"}}],[11,"load","","Loads a value from the atomic integer.",27,null],[11,"store","","Stores a value into the atomic integer.",27,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",27,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",27,null],[11,"fetch_add","","Add to the current value, returning the previous value.",27,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",27,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",27,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",27,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",27,null],[11,"default","","",28,{"inputs":[],"output":{"name":"atomicu64"}}],[11,"fmt","","",28,null],[11,"new","","Creates a new atomic integer.",28,{"inputs":[{"name":"u64"}],"output":{"name":"atomicu64"}}],[11,"load","","Loads a value from the atomic integer.",28,null],[11,"store","","Stores a value into the atomic integer.",28,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",28,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",28,null],[11,"fetch_add","","Add to the current value, returning the previous value.",28,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",28,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",28,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",28,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",28,null],[11,"default","","",29,{"inputs":[],"output":{"name":"atomicisize"}}],[11,"fmt","","",29,null],[11,"new","","Creates a new atomic integer.",29,{"inputs":[{"name":"isize"}],"output":{"name":"atomicisize"}}],[11,"load","","Loads a value from the atomic integer.",29,null],[11,"store","","Stores a value into the atomic integer.",29,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",29,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",29,null],[11,"fetch_add","","Add to the current value, returning the previous value.",29,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",29,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",29,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",29,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",29,null],[11,"default","","",30,{"inputs":[],"output":{"name":"atomicusize"}}],[11,"fmt","","",30,null],[11,"new","","Creates a new atomic integer.",30,{"inputs":[{"name":"usize"}],"output":{"name":"atomicusize"}}],[11,"load","","Loads a value from the atomic integer.",30,null],[11,"store","","Stores a value into the atomic integer.",30,null],[11,"swap","","Stores a value into the atomic integer, returning the old value.",30,null],[11,"compare_and_swap","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"compare_exchange_weak","","Stores a value into the atomic integer if the current value is the same as the\n`current` value.",30,null],[11,"fetch_add","","Add to the current value, returning the previous value.",30,null],[11,"fetch_sub","","Subtract from the current value, returning the previous value.",30,null],[11,"fetch_and","","Bitwise and with the current value, returning the previous value.",30,null],[11,"fetch_or","","Bitwise or with the current value, returning the previous value.",30,null],[11,"fetch_xor","","Bitwise xor with the current value, returning the previous value.",30,null],[11,"fmt","","",18,null],[11,"fmt","","",19,null],[11,"new","core::cell","Creates a new `Cell` containing the given value.",31,{"inputs":[{"name":"t"}],"output":{"name":"cell"}}],[11,"get","","Returns a copy of the contained value.",31,null],[11,"set","","Sets the contained value.",31,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",31,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",31,null],[11,"clone","","",31,null],[11,"default","","",31,{"inputs":[],"output":{"name":"cell"}}],[11,"eq","","",31,null],[11,"partial_cmp","","",31,null],[11,"lt","","",31,null],[11,"le","","",31,null],[11,"gt","","",31,null],[11,"ge","","",31,null],[11,"cmp","","",31,null],[11,"fmt","","",32,null],[11,"eq","","",32,null],[11,"clone","","",32,null],[11,"new","","Creates a new `RefCell` containing `value`.",33,{"inputs":[{"name":"t"}],"output":{"name":"refcell"}}],[11,"into_inner","","Consumes the `RefCell`, returning the wrapped value.",33,null],[11,"borrow_state","","Query the current state of this `RefCell`",33,null],[11,"borrow","","Immutably borrows the wrapped value.",33,null],[11,"borrow_mut","","Mutably borrows the wrapped value.",33,null],[11,"as_unsafe_cell","","Returns a reference to the underlying `UnsafeCell`.",33,null],[11,"get_mut","","Returns a mutable reference to the underlying data.",33,null],[11,"clone","","",33,null],[11,"default","","",33,{"inputs":[],"output":{"name":"refcell"}}],[11,"eq","","",33,null],[11,"partial_cmp","","",33,null],[11,"lt","","",33,null],[11,"le","","",33,null],[11,"gt","","",33,null],[11,"ge","","",33,null],[11,"cmp","","",33,null],[11,"deref","","",34,null],[11,"clone","","Copies a `Ref`.",34,{"inputs":[{"name":"ref"}],"output":{"name":"ref"}}],[11,"map","","Make a new `Ref` for a component of the borrowed data.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"ref"}}],[11,"filter_map","","Make a new `Ref` for an optional component of the borrowed data, e.g. an\nenum variant.",34,{"inputs":[{"name":"ref"},{"name":"f"}],"output":{"name":"option"}}],[11,"map","","Make a new `RefMut` for a component of the borrowed data, e.g. an enum\nvariant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"refmut"}}],[11,"filter_map","","Make a new `RefMut` for an optional component of the borrowed data, e.g.\nan enum variant.",35,{"inputs":[{"name":"refmut"},{"name":"f"}],"output":{"name":"option"}}],[11,"deref","","",35,null],[11,"deref_mut","","",35,null],[11,"new","","Constructs a new instance of `UnsafeCell` which will wrap the specified\nvalue.",36,{"inputs":[{"name":"t"}],"output":{"name":"unsafecell"}}],[11,"into_inner","","Unwraps the value.",36,null],[11,"get","","Gets a mutable pointer to the wrapped value.",36,null],[11,"default","","",36,{"inputs":[],"output":{"name":"unsafecell"}}],[11,"fmt","core::char","",37,null],[11,"clone","","",37,null],[11,"next","","",37,null],[11,"size_hint","","",37,null],[11,"last","","",37,null],[11,"fmt","","",38,null],[11,"clone","","",38,null],[11,"next","","",38,null],[11,"size_hint","","",38,null],[11,"count","","",38,null],[11,"nth","","",38,null],[11,"last","","",38,null],[11,"fmt","","",39,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",39,null],[11,"next","","",39,null],[11,"size_hint","","",39,null],[11,"fmt","","",40,null],[11,"as_slice","","Returns the remaining bytes of this iterator as a slice.",40,null],[11,"next","","",40,null],[11,"size_hint","","",40,null],[11,"fmt","core::iter::range","",41,null],[11,"clone","","",41,null],[11,"step_by","core::ops","Creates an iterator starting at the same point, but stepping by\nthe given amount at each iteration.",11,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",10,null],[11,"step_by","","Creates an iterator with the same range, but stepping by the\ngiven amount at each iteration.",13,null],[11,"next","core::iter::range","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","","",41,null],[11,"size_hint","","",41,null],[11,"next","core::ops","",10,null],[11,"size_hint","","",10,null],[11,"next_back","","",10,null],[11,"next","","",11,null],[11,"next","","",13,null],[11,"size_hint","","",13,null],[11,"next_back","","",13,null],[11,"fmt","core::iter::sources","",42,null],[11,"clone","","",42,null],[11,"next","","",42,null],[11,"size_hint","","",42,null],[11,"next_back","","",42,null],[11,"fmt","","",43,null],[11,"next","","",43,null],[11,"size_hint","","",43,null],[11,"next_back","","",43,null],[11,"len","","",43,null],[11,"clone","","",43,null],[11,"default","","",43,{"inputs":[],"output":{"name":"empty"}}],[11,"fmt","","",44,null],[11,"clone","","",44,null],[11,"next","","",44,null],[11,"size_hint","","",44,null],[11,"next_back","","",44,null],[11,"len","","",44,null],[11,"fmt","core::iter","",45,null],[11,"clone","","",45,null],[11,"next","","",45,null],[11,"size_hint","","",45,null],[11,"next_back","","",45,null],[11,"fmt","","",46,null],[11,"clone","","",46,null],[11,"next","","",46,null],[11,"size_hint","","",46,null],[11,"next_back","","",46,null],[11,"fmt","","",47,null],[11,"clone","","",47,null],[11,"next","","",47,null],[11,"size_hint","","",47,null],[11,"fmt","","",48,null],[11,"clone","","",48,null],[11,"next","","",48,null],[11,"count","","",48,null],[11,"nth","","",48,null],[11,"find","","",48,null],[11,"last","","",48,null],[11,"size_hint","","",48,null],[11,"next_back","","",48,null],[11,"fmt","","",49,null],[11,"clone","","",49,null],[11,"next","","",49,null],[11,"size_hint","","",49,null],[11,"next_back","","",49,null],[11,"clone","","",50,null],[11,"fmt","","",50,null],[11,"next","","",50,null],[11,"size_hint","","",50,null],[11,"next_back","","",50,null],[11,"clone","","",51,null],[11,"fmt","","",51,null],[11,"next","","",51,null],[11,"size_hint","","",51,null],[11,"next_back","","",51,null],[11,"clone","","",52,null],[11,"fmt","","",52,null],[11,"next","","",52,null],[11,"size_hint","","",52,null],[11,"next_back","","",52,null],[11,"fmt","","",53,null],[11,"clone","","",53,null],[11,"next","","# Overflow Behavior",53,null],[11,"size_hint","","",53,null],[11,"nth","","",53,null],[11,"count","","",53,null],[11,"next_back","","",53,null],[11,"fmt","","",54,null],[11,"clone","","",54,null],[11,"next","","",54,null],[11,"count","","",54,null],[11,"nth","","",54,null],[11,"last","","",54,null],[11,"size_hint","","",54,null],[11,"peek","","Returns a reference to the next() value without advancing the iterator.",54,null],[11,"is_empty","","Checks if the iterator has finished iterating.",54,null],[11,"clone","","",55,null],[11,"fmt","","",55,null],[11,"next","","",55,null],[11,"size_hint","","",55,null],[11,"clone","","",56,null],[11,"fmt","","",56,null],[11,"next","","",56,null],[11,"size_hint","","",56,null],[11,"fmt","","",57,null],[11,"clone","","",57,null],[11,"next","","",57,null],[11,"nth","","",57,null],[11,"count","","",57,null],[11,"last","","",57,null],[11,"size_hint","","",57,null],[11,"next_back","","",57,null],[11,"fmt","","",58,null],[11,"clone","","",58,null],[11,"next","","",58,null],[11,"nth","","",58,null],[11,"size_hint","","",58,null],[11,"clone","","",59,null],[11,"fmt","","",59,null],[11,"next","","",59,null],[11,"size_hint","","",59,null],[11,"clone","","",60,null],[11,"fmt","","",60,null],[11,"next","","",60,null],[11,"size_hint","","",60,null],[11,"next_back","","",60,null],[11,"fmt","","",61,null],[11,"clone","","",61,null],[11,"next","","",61,null],[11,"nth","","",61,null],[11,"last","","",61,null],[11,"count","","",61,null],[11,"size_hint","","",61,null],[11,"next_back","","",61,null],[11,"clone","","",62,null],[11,"fmt","","",62,null],[11,"next","","",62,null],[11,"size_hint","","",62,null],[11,"next_back","","",62,null],[11,"hash","core::option","",63,null],[11,"fmt","","",63,null],[11,"cmp","","",63,null],[11,"partial_cmp","","",63,null],[11,"lt","","",63,null],[11,"le","","",63,null],[11,"gt","","",63,null],[11,"ge","","",63,null],[11,"eq","","",63,null],[11,"ne","","",63,null],[11,"clone","","",63,null],[11,"is_some","","Returns `true` if the option is a `Some` value",63,null],[11,"is_none","","Returns `true` if the option is a `None` value",63,null],[11,"as_ref","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;T&gt;`",63,null],[11,"as_mut","","Converts from `Option&lt;T&gt;` to `Option&lt;&amp;mut T&gt;`",63,null],[11,"expect","","Unwraps an option, yielding the content of a `Some`.",63,null],[11,"unwrap","","Moves the value `v` out of the `Option&lt;T&gt;` if it is `Some(v)`.",63,null],[11,"unwrap_or","","Returns the contained value or a default.",63,null],[11,"unwrap_or_else","","Returns the contained value or computes it from a closure.",63,null],[11,"map","","Maps an `Option&lt;T&gt;` to `Option&lt;U&gt;` by applying a function to a contained value",63,null],[11,"map_or","","Applies a function to the contained value (if any),\nor returns a `default` (if not).",63,null],[11,"map_or_else","","Applies a function to the contained value (if any),\nor computes a `default` (if not).",63,null],[11,"ok_or","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err)`.",63,null],[11,"ok_or_else","","Transforms the `Option&lt;T&gt;` into a `Result&lt;T, E&gt;`, mapping `Some(v)` to\n`Ok(v)` and `None` to `Err(err())`.",63,null],[11,"iter","","Returns an iterator over the possibly contained value.",63,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",63,null],[11,"and","","Returns `None` if the option is `None`, otherwise returns `optb`.",63,null],[11,"and_then","","Returns `None` if the option is `None`, otherwise calls `f` with the\nwrapped value and returns the result.",63,null],[11,"or","","Returns the option if it contains a value, otherwise returns `optb`.",63,null],[11,"or_else","","Returns the option if it contains a value, otherwise calls `f` and\nreturns the result.",63,null],[11,"take","","Takes the value out of the option, leaving a `None` in its place.",63,null],[11,"cloned","","Maps an `Option&lt;&amp;T&gt;` to an `Option&lt;T&gt;` by cloning the contents of the\noption.",63,null],[11,"unwrap_or_default","","Returns the contained value or a default",63,null],[11,"default","","",63,{"inputs":[],"output":{"name":"option"}}],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",63,null],[11,"fmt","","",64,null],[11,"next","","",64,null],[11,"size_hint","","",64,null],[11,"next_back","","",64,null],[11,"clone","","",64,null],[11,"fmt","","",65,null],[11,"next","","",65,null],[11,"size_hint","","",65,null],[11,"next_back","","",65,null],[11,"fmt","","",66,null],[11,"clone","","",66,null],[11,"next","","",66,null],[11,"size_hint","","",66,null],[11,"next_back","","",66,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is `None`, no further\nelements are taken, and the `None` is returned. Should no `None` occur, a\ncontainer with the values of each `Option` is returned.",63,{"inputs":[{"name":"i"}],"output":{"name":"option"}}],[11,"clone","core::raw","",67,null],[11,"clone","","",68,null],[11,"hash","core::result","",69,null],[11,"fmt","","",69,null],[11,"cmp","","",69,null],[11,"partial_cmp","","",69,null],[11,"lt","","",69,null],[11,"le","","",69,null],[11,"gt","","",69,null],[11,"ge","","",69,null],[11,"eq","","",69,null],[11,"ne","","",69,null],[11,"clone","","",69,null],[11,"is_ok","","Returns true if the result is `Ok`",69,null],[11,"is_err","","Returns true if the result is `Err`",69,null],[11,"ok","","Converts from `Result&lt;T, E&gt;` to `Option&lt;T&gt;`",69,null],[11,"err","","Converts from `Result&lt;T, E&gt;` to `Option&lt;E&gt;`",69,null],[11,"as_ref","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;T, &amp;E&gt;`",69,null],[11,"as_mut","","Converts from `Result&lt;T, E&gt;` to `Result&lt;&amp;mut T, &amp;mut E&gt;`",69,null],[11,"map","","Maps a `Result&lt;T, E&gt;` to `Result&lt;U, E&gt;` by applying a function to a\ncontained `Ok` value, leaving an `Err` value untouched.",69,null],[11,"map_err","","Maps a `Result&lt;T, E&gt;` to `Result&lt;T, F&gt;` by applying a function to a\ncontained `Err` value, leaving an `Ok` value untouched.",69,null],[11,"iter","","Returns an iterator over the possibly contained value.",69,null],[11,"iter_mut","","Returns a mutable iterator over the possibly contained value.",69,null],[11,"and","","Returns `res` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"and_then","","Calls `op` if the result is `Ok`, otherwise returns the `Err` value of `self`.",69,null],[11,"or","","Returns `res` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"or_else","","Calls `op` if the result is `Err`, otherwise returns the `Ok` value of `self`.",69,null],[11,"unwrap_or","","Unwraps a result, yielding the content of an `Ok`.\nElse it returns `optb`.",69,null],[11,"unwrap_or_else","","Unwraps a result, yielding the content of an `Ok`.\nIf the value is an `Err` then it calls `op` with its value.",69,null],[11,"unwrap","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"expect","","Unwraps a result, yielding the content of an `Ok`.",69,null],[11,"unwrap_err","","Unwraps a result, yielding the content of an `Err`.",69,null],[11,"into_iter","","Returns a consuming iterator over the possibly contained value.",69,null],[11,"fmt","","",70,null],[11,"next","","",70,null],[11,"size_hint","","",70,null],[11,"next_back","","",70,null],[11,"clone","","",70,null],[11,"fmt","","",71,null],[11,"next","","",71,null],[11,"size_hint","","",71,null],[11,"next_back","","",71,null],[11,"fmt","","",72,null],[11,"next","","",72,null],[11,"size_hint","","",72,null],[11,"next_back","","",72,null],[11,"from_iter","","Takes each element in the `Iterator`: if it is an `Err`, no further\nelements are taken, and the `Err` is returned. Should no `Err` occur, a\ncontainer with the values of each `Result` is returned.",69,{"inputs":[{"name":"i"}],"output":{"name":"result"}}],[11,"fmt","core::slice","",73,null],[11,"as_slice","","View the underlying data as a subslice of the original data.",73,null],[11,"next","","",73,null],[11,"size_hint","","",73,null],[11,"count","","",73,null],[11,"nth","","",73,null],[11,"last","","",73,null],[11,"next_back","","",73,null],[11,"clone","","",73,null],[11,"fmt","","",74,null],[11,"into_slice","","View the underlying data as a subslice of the original data.",74,null],[11,"next","","",74,null],[11,"size_hint","","",74,null],[11,"count","","",74,null],[11,"nth","","",74,null],[11,"last","","",74,null],[11,"next_back","","",74,null],[11,"fmt","","",75,null],[11,"clone","","",75,null],[11,"next","","",75,null],[11,"size_hint","","",75,null],[11,"next_back","","",75,null],[11,"fmt","","",76,null],[11,"next","","",76,null],[11,"size_hint","","",76,null],[11,"next_back","","",76,null],[11,"fmt","","",77,null],[11,"fmt","","",78,null],[11,"fmt","","",79,null],[11,"fmt","","",80,null],[11,"next","","",77,null],[11,"size_hint","","",77,null],[11,"next","","",78,null],[11,"size_hint","","",78,null],[11,"next","","",79,null],[11,"size_hint","","",79,null],[11,"next","","",80,null],[11,"size_hint","","",80,null],[11,"fmt","","",81,null],[11,"clone","","",81,null],[11,"next","","",81,null],[11,"size_hint","","",81,null],[11,"count","","",81,null],[11,"nth","","",81,null],[11,"last","","",81,null],[11,"next_back","","",81,null],[11,"fmt","","",82,null],[11,"clone","","",82,null],[11,"next","","",82,null],[11,"size_hint","","",82,null],[11,"count","","",82,null],[11,"nth","","",82,null],[11,"last","","",82,null],[11,"next_back","","",82,null],[11,"fmt","","",83,null],[11,"next","","",83,null],[11,"size_hint","","",83,null],[11,"count","","",83,null],[11,"nth","","",83,null],[11,"last","","",83,null],[11,"next_back","","",83,null],[11,"fmt","core::str::pattern","",84,null],[11,"eq","","",84,null],[11,"ne","","",84,null],[11,"clone","","",84,null],[11,"fmt","","",85,null],[11,"clone","","",85,null],[11,"haystack","","",85,null],[11,"next","","",85,null],[11,"next_match","","",85,null],[11,"next_reject","","",85,null],[11,"next_back","","",85,null],[11,"next_match_back","","",85,null],[11,"next_reject_back","","",85,null],[11,"fmt","","",86,null],[11,"clone","","",86,null],[11,"haystack","","",86,null],[11,"next","","",86,null],[11,"next_match","","",86,null],[11,"next_reject","","",86,null],[11,"next_back","","",86,null],[11,"next_match_back","","",86,null],[11,"next_reject_back","","",86,null],[11,"clone","","",87,null],[11,"fmt","","",87,null],[11,"haystack","","",87,null],[11,"next","","",87,null],[11,"next_match","","",87,null],[11,"next_reject","","",87,null],[11,"next_back","","",87,null],[11,"next_match_back","","",87,null],[11,"next_reject_back","","",87,null],[11,"fmt","","",88,null],[11,"clone","","",88,null],[11,"haystack","","",88,null],[11,"next","","",88,null],[11,"next_match","","",88,null],[11,"next_back","","",88,null],[11,"next_match_back","","",88,null],[11,"eq","core::str","",89,null],[11,"ne","","",89,null],[11,"clone","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",89,null],[11,"fmt","","",90,null],[11,"clone","","",90,null],[11,"eq","","",90,null],[11,"ne","","",90,null],[11,"valid_up_to","","Returns the index in the given string up to which valid UTF-8 was\nverified.",90,null],[11,"fmt","","",90,null],[11,"fmt","","",91,null],[11,"clone","","",91,null],[11,"next","","",91,null],[11,"size_hint","","",91,null],[11,"next_back","","",91,null],[11,"as_str","","View the underlying data as a subslice of the original data.",91,null],[11,"fmt","","",92,null],[11,"clone","","",92,null],[11,"next","","",92,null],[11,"size_hint","","",92,null],[11,"next_back","","",92,null],[11,"as_str","","View the underlying data as a subslice of the original data.",92,null],[11,"fmt","","",93,null],[11,"clone","","",93,null],[11,"next","","",93,null],[11,"size_hint","","",93,null],[11,"count","","",93,null],[11,"last","","",93,null],[11,"nth","","",93,null],[11,"next_back","","",93,null],[11,"len","","",93,null],[11,"fmt","","",94,null],[11,"next","","",94,null],[11,"clone","","",94,null],[11,"fmt","","",95,null],[11,"next","","",95,null],[11,"clone","","",95,null],[11,"next_back","","",94,null],[11,"next_back","","",95,null],[11,"fmt","","",96,null],[11,"next","","",96,null],[11,"clone","","",96,null],[11,"fmt","","",97,null],[11,"next","","",97,null],[11,"clone","","",97,null],[11,"next_back","","",96,null],[11,"next_back","","",97,null],[11,"fmt","","",98,null],[11,"next","","",98,null],[11,"clone","","",98,null],[11,"fmt","","",99,null],[11,"next","","",99,null],[11,"clone","","",99,null],[11,"fmt","","",100,null],[11,"next","","",100,null],[11,"clone","","",100,null],[11,"fmt","","",101,null],[11,"next","","",101,null],[11,"clone","","",101,null],[11,"next_back","","",100,null],[11,"next_back","","",101,null],[11,"fmt","","",102,null],[11,"next","","",102,null],[11,"clone","","",102,null],[11,"fmt","","",103,null],[11,"next","","",103,null],[11,"clone","","",103,null],[11,"next_back","","",102,null],[11,"next_back","","",103,null],[11,"fmt","","",104,null],[11,"clone","","",104,null],[11,"next","","",104,null],[11,"size_hint","","",104,null],[11,"next_back","","",104,null],[11,"fmt","","",105,null],[11,"clone","","",105,null],[11,"next","","",105,null],[11,"size_hint","","",105,null],[11,"next_back","","",105,null],[11,"fmt","","",106,null],[11,"clone","","",106,null],[11,"fmt","core::hash::sip","",107,null],[11,"new","","Creates a new `SipHasher` with the two initial keys set to 0.",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"new_with_keys","","Creates a `SipHasher` that is keyed off the provided keys.",107,{"inputs":[{"name":"u64"},{"name":"u64"}],"output":{"name":"siphasher"}}],[11,"write","","",107,null],[11,"finish","","",107,null],[11,"clone","","",107,null],[11,"default","","",107,{"inputs":[],"output":{"name":"siphasher"}}],[11,"fmt","core::hash","",108,null],[11,"build_hasher","","",108,null],[11,"clone","","",108,null],[11,"default","","",108,{"inputs":[],"output":{"name":"buildhasherdefault"}}],[11,"fmt","core::fmt","",109,null],[11,"field","core::fmt::builders","Adds a new field to the generated struct output.",110,null],[11,"finish","","Finishes output and returns any error encountered.",110,null],[11,"field","","Adds a new field to the generated tuple struct output.",111,null],[11,"finish","","Finishes output and returns any error encountered.",111,null],[11,"entry","","Adds a new entry to the set output.",112,null],[11,"entries","","Adds the contents of an iterator of entries to the set output.",112,null],[11,"finish","","Finishes output and returns any error encountered.",112,null],[11,"entry","","Adds a new entry to the list output.",113,null],[11,"entries","","Adds the contents of an iterator of entries to the list output.",113,null],[11,"finish","","Finishes output and returns any error encountered.",113,null],[11,"entry","","Adds a new entry to the map output.",114,null],[11,"entries","","Adds the contents of an iterator of entries to the map output.",114,null],[11,"finish","","Finishes output and returns any error encountered.",114,null],[11,"partial_cmp","core::fmt","",115,null],[11,"eq","","",115,null],[11,"cmp","","",115,null],[11,"hash","","",115,null],[11,"default","","",115,{"inputs":[],"output":{"name":"error"}}],[11,"fmt","","",115,null],[11,"clone","","",115,null],[11,"clone","","",116,null],[11,"fmt","","",116,null],[11,"fmt","","",116,null],[11,"pad_integral","","Performs the correct padding for an integer which has already been\nemitted into a str. The str should *not* contain the sign for the\ninteger, that will be added by this method.",117,null],[11,"pad","","This function takes a string slice and emits it to the internal buffer\nafter applying the relevant formatting flags specified. The flags\nrecognized for generic strings are:",117,null],[11,"write_str","","Writes some data to the underlying buffer contained within this\nformatter.",117,null],[11,"write_fmt","","Writes some formatted information into this instance",117,null],[11,"flags","","Flags for formatting (packed version of rt::Flag)",117,null],[11,"fill","","Character used as &#39;fill&#39; whenever there is alignment",117,null],[11,"align","","Flag indicating what form of alignment was requested",117,null],[11,"width","","Optionally specified integer width that the output should be",117,null],[11,"precision","","Optionally specified precision for numeric types",117,null],[11,"sign_plus","","Determines if the `+` flag was specified.",117,null],[11,"sign_minus","","Determines if the `-` flag was specified.",117,null],[11,"alternate","","Determines if the `#` flag was specified.",117,null],[11,"sign_aware_zero_pad","","Determines if the `0` flag was specified.",117,null],[11,"debug_struct","","Creates a `DebugStruct` builder designed to assist with creation of\n`fmt::Debug` implementations for structs.",117,null],[11,"debug_tuple","","Creates a `DebugTuple` builder designed to assist with creation of\n`fmt::Debug` implementations for tuple structs.",117,null],[11,"debug_list","","Creates a `DebugList` builder designed to assist with creation of\n`fmt::Debug` implementations for list-like structures.",117,null],[11,"debug_set","","Creates a `DebugSet` builder designed to assist with creation of\n`fmt::Debug` implementations for set-like structures.",117,null],[11,"debug_map","","Creates a `DebugMap` builder designed to assist with creation of\n`fmt::Debug` implementations for map-like structures.",117,null],[11,"write_str","","",117,null],[11,"write_char","","",117,null],[11,"write_fmt","","",117,null],[11,"fmt","","",115,null],[11,"fmt","core::marker","",8,null],[11,"fmt","core::cell","",31,null],[11,"fmt","","",33,null],[11,"fmt","","",34,null],[11,"fmt","","",35,null],[11,"fmt","","",36,null],[8,"__Deref","lazy_static","The `Deref` trait is used to specify the functionality of dereferencing\noperations, like `*v`.",null,null],[16,"Target","","The resulting type after dereferencing",118,null],[10,"deref","","The method called to dereference a value",118,null],[0,"lazy","","",null,null],[3,"Lazy","lazy_static::lazy","",null,null],[12,"0","","",119,null],[12,"1","","",119,null],[11,"get","","",119,null],[14,"__lazy_static_create!","lazy_static","",null,null],[14,"lazy_static!","","",null,null]],"paths":[[3,"Wrapping"],[3,"ParseFloatError"],[4,"FpCategory"],[3,"TryFromIntError"],[3,"ParseIntError"],[3,"NonZero"],[3,"Unique"],[3,"Shared"],[3,"PhantomData"],[3,"RangeFull"],[3,"Range"],[3,"RangeFrom"],[3,"RangeTo"],[4,"RangeInclusive"],[3,"RangeToInclusive"],[4,"Ordering"],[8,"Any"],[3,"TypeId"],[3,"AtomicBool"],[3,"AtomicPtr"],[4,"Ordering"],[3,"AtomicI8"],[3,"AtomicU8"],[3,"AtomicI16"],[3,"AtomicU16"],[3,"AtomicI32"],[3,"AtomicU32"],[3,"AtomicI64"],[3,"AtomicU64"],[3,"AtomicIsize"],[3,"AtomicUsize"],[3,"Cell"],[4,"BorrowState"],[3,"RefCell"],[3,"Ref"],[3,"RefMut"],[3,"UnsafeCell"],[3,"EscapeUnicode"],[3,"EscapeDefault"],[3,"EncodeUtf8"],[3,"EncodeUtf16"],[3,"StepBy"],[3,"Repeat"],[3,"Empty"],[3,"Once"],[3,"Rev"],[3,"Cloned"],[3,"Cycle"],[3,"Chain"],[3,"Zip"],[3,"Map"],[3,"Filter"],[3,"FilterMap"],[3,"Enumerate"],[3,"Peekable"],[3,"SkipWhile"],[3,"TakeWhile"],[3,"Skip"],[3,"Take"],[3,"Scan"],[3,"FlatMap"],[3,"Fuse"],[3,"Inspect"],[4,"Option"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Slice"],[3,"TraitObject"],[4,"Result"],[3,"Iter"],[3,"IterMut"],[3,"IntoIter"],[3,"Iter"],[3,"IterMut"],[3,"Split"],[3,"SplitMut"],[3,"SplitN"],[3,"RSplitN"],[3,"SplitNMut"],[3,"RSplitNMut"],[3,"Windows"],[3,"Chunks"],[3,"ChunksMut"],[4,"SearchStep"],[3,"CharSearcher"],[3,"CharSliceSearcher"],[3,"CharPredicateSearcher"],[3,"StrSearcher"],[3,"ParseBoolError"],[3,"Utf8Error"],[3,"Chars"],[3,"CharIndices"],[3,"Bytes"],[3,"Split"],[3,"RSplit"],[3,"SplitTerminator"],[3,"RSplitTerminator"],[3,"SplitN"],[3,"RSplitN"],[3,"MatchIndices"],[3,"RMatchIndices"],[3,"Matches"],[3,"RMatches"],[3,"Lines"],[3,"LinesAny"],[3,"CharRange"],[3,"SipHasher"],[3,"BuildHasherDefault"],[4,"Alignment"],[3,"DebugStruct"],[3,"DebugTuple"],[3,"DebugSet"],[3,"DebugList"],[3,"DebugMap"],[3,"Error"],[3,"Arguments"],[3,"Formatter"],[8,"__Deref"],[3,"Lazy"]]};
searchIndex["matrixmultiply"] = {"doc":"","items":[[5,"sgemm","matrixmultiply","General matrix multiplication (f32)",null,null],[5,"dgemm","","General matrix multiplication (f64)",null,null]],"paths":[]};
searchIndex["log"] = {"doc":"A lightweight logging facade.","items":[[3,"LogRecord","log","The &quot;payload&quot; of a log message.",null,null],[3,"LogMetadata","","Metadata about a log message.",null,null],[3,"LogLocation","","The location of a log message.",null,null],[3,"MaxLogLevelFilter","","A token providing read and write access to the global maximum log level\nfilter.",null,null],[3,"SetLoggerError","","The type returned by `set_logger` if `set_logger` has already been called.",null,null],[3,"ShutdownLoggerError","","The type returned by `shutdown_logger_raw` if `shutdown_logger_raw` has\nalready been called or if `set_logger_raw` has not been called yet.",null,null],[4,"LogLevel","","An enum representing the available verbosity levels of the logging framework",null,null],[13,"Error","","The &quot;error&quot; level.",0,null],[13,"Warn","","The &quot;warn&quot; level.",0,null],[13,"Info","","The &quot;info&quot; level.",0,null],[13,"Debug","","The &quot;debug&quot; level.",0,null],[13,"Trace","","The &quot;trace&quot; level.",0,null],[4,"LogLevelFilter","","An enum representing the available verbosity level filters of the logging\nframework.",null,null],[13,"Off","","A level lower than all log levels.",1,null],[13,"Error","","Corresponds to the `Error` log level.",1,null],[13,"Warn","","Corresponds to the `Warn` log level.",1,null],[13,"Info","","Corresponds to the `Info` log level.",1,null],[13,"Debug","","Corresponds to the `Debug` log level.",1,null],[13,"Trace","","Corresponds to the `Trace` log level.",1,null],[5,"max_log_level","","Returns the current maximum log level.",null,{"inputs":[],"output":{"name":"loglevelfilter"}}],[5,"set_logger","","Sets the global logger.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"set_logger_raw","","Sets the global logger from a raw pointer.",null,{"inputs":[{"name":"m"}],"output":{"name":"result"}}],[5,"shutdown_logger","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[5,"shutdown_logger_raw","","Shuts down the global logger.",null,{"inputs":[],"output":{"name":"result"}}],[8,"Log","","A trait encapsulating the operations required of a logger",null,null],[10,"enabled","","Determines if a log message with the specified metadata would be\nlogged.",2,null],[10,"log","","Logs the `LogRecord`.",2,null],[11,"fmt","","",0,null],[11,"clone","","",0,null],[11,"eq","","",0,null],[11,"eq","","",0,null],[11,"partial_cmp","","",0,null],[11,"partial_cmp","","",0,null],[11,"cmp","","",0,null],[11,"from_str","","",0,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",0,null],[11,"max","","Returns the most verbose logging level.",0,{"inputs":[],"output":{"name":"loglevel"}}],[11,"to_log_level_filter","","Converts the `LogLevel` to the equivalent `LogLevelFilter`.",0,null],[11,"fmt","","",1,null],[11,"clone","","",1,null],[11,"eq","","",1,null],[11,"eq","","",1,null],[11,"partial_cmp","","",1,null],[11,"partial_cmp","","",1,null],[11,"cmp","","",1,null],[11,"from_str","","",1,{"inputs":[{"name":"str"}],"output":{"name":"result"}}],[11,"fmt","","",1,null],[11,"max","","Returns the most verbose logging level filter.",1,{"inputs":[],"output":{"name":"loglevelfilter"}}],[11,"to_log_level","","Converts `self` to the equivalent `LogLevel`.",1,null],[11,"args","","The message body.",3,null],[11,"metadata","","Metadata about the log directive.",3,null],[11,"location","","The location of the log directive.",3,null],[11,"level","","The verbosity level of the message.",3,null],[11,"target","","The name of the target of the directive.",3,null],[11,"level","","The verbosity level of the message.",4,null],[11,"target","","The name of the target of the directive.",4,null],[11,"fmt","","",5,null],[11,"clone","","",5,null],[11,"module_path","","The module path of the message.",5,null],[11,"file","","The source file containing the message.",5,null],[11,"line","","The line containing the message.",5,null],[11,"fmt","","",6,null],[11,"get","","Gets the current maximum log level filter.",6,null],[11,"set","","Sets the maximum log level.",6,null],[11,"fmt","","",7,null],[11,"fmt","","",7,null],[11,"description","","",7,null],[11,"fmt","","",8,null],[11,"fmt","","",8,null],[11,"description","","",8,null],[14,"log!","","The standard logging macro.",null,null],[14,"error!","","Logs a message at the error level.",null,null],[14,"warn!","","Logs a message at the warn level.",null,null],[14,"info!","","Logs a message at the info level.",null,null],[14,"debug!","","Logs a message at the debug level.",null,null],[14,"trace!","","Logs a message at the trace level.",null,null],[14,"log_enabled!","","Determines if a message logged at the specified level in that module will\nbe logged.",null,null]],"paths":[[4,"LogLevel"],[4,"LogLevelFilter"],[8,"Log"],[3,"LogRecord"],[3,"LogMetadata"],[3,"LogLocation"],[3,"MaxLogLevelFilter"],[3,"SetLoggerError"],[3,"ShutdownLoggerError"]]};
initSearch(searchIndex);
